openapi: 3.0.2
info:
  title: Belvo API Docs
  description: >
    # Introduction


    Belvo is an open banking API for Latin America that allows companies to
    access banking and fiscal information in a secure as well as agile way.


    Through our API, you can access:



    - **Bank information** such as account information, real-time

    balance, historical transactions, and account owner identification.


    - **Fiscal information** such as received and sent invoices and tax returns.



    <img src="https://files.readme.io/acf27d3-belvo_pipes.png"

    alt="fiscal-endpoints">



    In this API reference you'll find all the information you need about each


    endpoint and resource.



    <div style="background-color:#f4f6f8; border-left: 6px solid

    #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:

    25px">


    <strong>Tip: </strong> Make sure that you also check out our Developer

    Portal for guides on <a

    href="https://developers.belvo.com/docs/get-started-in-5-minutes"

    target="_blank">how to get started</a>, using our <a

    href="https://developers.belvo.com/docs/test-in-sandbox"

    target="_blank">Sandbox environment</a>, as well as how to <a

    href="https://developers.belvo.com/docs/connect-widget"

    target="_blank">integrate the widget</a> or use our <a

    href="https://developers.belvo.com/docs/quickstart-application"

    target="_blank">quickstart application</a>.


    </div>



    ## Environment


    We currently offer three environments: sandbox, development, and

    production.



    When using our SDKs, make sure to use the **Alias** (and not the Base URL).



    | Environment | Purpose | Access |

    |-----------|-------|-------|

    | **Sandbox** | The [Sandbox
    environment](https://developers.belvo.com/docs/test-in-sandbox) is dedicated
    for your testing and development phases. In this environment, you can create
    links without real credentials and you can pull test data from all
    endpoints. **‚ö†Ô∏èThe sandbox environment is refreshed frequently and your test
    data can be updated or deleted.** | Base URL (cURL):
    https://sandbox.belvo.com/ <br><br>Alias (SDKs): sandbox|

    |**Development**|The Development environment is dedicated for testing with
    real credentials and institutions with real-world institutions. You can
    create up to 25 links for free in this environment.| Base URL (cURL):
    https://development.belvo.com/ <br><br>Alias (SDKs): development |

    | **Production** | The Production environment is dedicated for live
    applications with real connections to institutions. In this environment, you

    will need real credentials to create links and you will pull real data from
    the institutions.| Base URL (cURL): https://api.belvo.com/ <br><br>Alias

    (SDKs): production|



    For each environment, you'll need to [generate separate API

    keys](https://developers.belvo.com/docs/get-your-belvo-api-keys).



    ## Response codes



    We use the following HTTP status code in the response depending on the

    success or failure:



    | Status Code | Description |

    |-----------|-------|

    | `200` | ‚úÖ **Success** - The content is available in the response body. |

    | `201` | ‚úÖ **Success** - The content was created successfully on Belvo. |

    | `204` | ‚úÖ **Success** - No content to return. |

    | `400` | ‚ùå **Bad Request Error** - Request returned an error, detail in
    content.|

    | `401` | ‚ùå **Unauthorized** - The Belvo credentials provided are not
    valid.|

    | `404` | ‚ùå **Not Found** - The resource you try to access cannot be found.|

    | `405` | ‚ùå **Method Not Allowed** - The HTTP method you are using is not
    accepted for this resource.|

    | `408` | ‚ùå **Request Timeout** - The request timed out and was terminated
    by the server.|

    | `428` | ‚ùå **MFA Token Required** - MFA token was required by the
    institution to connect. |

    | `500` | ‚ùå **Internal Server Error** - The detail of the error is available
    in the response body.|



    ## Error handling



    ### Error messages



    Belvo API errors are returned in JSON format. For example, an error might

    look like this:



    ```json


    [
        {
          "request_id": "a6e1c493d7a29d91aed4338e6fcf077d",
          "message": "This field is required.",
          "code": "required",
          "field": "link"
        }
    ]


    ```



    Typically, an error response will have the following parameters:


    - `request_id`: a unique ID for the request, you should share it with the

    Belvo support team for investigations.


    - `message`: human-readable description of the error.


    - `code`: a unique code for the error. Check the table below to see how to

    handle each error code.


    - `field` *(optional)*: The specific field in the request body that has an

    issue.




    ### Request identifier


    When you need help with a specific error, add the request identifier

    (`request_id`) in your message to the Belvo support team. This will speed up

    investigations and get you back up and running in no time at all.



    ### Error codes and troubleshooting



    For a full list of errors and how to troubleshoot them, please see our

    dedicated [Error handling

    articles](https://developers.belvo.com/docs/integration-overview#error-handling)

    in our DevPortal.




    ### Retry policy



    Please see our recommended [retry

    policies](https://developers.belvo.com/docs/integration-overview#error-retry-policy)

    in the DevPortal.
  version: 1.35.0
  contact:
    name: Need help?
    url: https://developers.belvo.com
    email: support@belvo.com
  x-logo:
    url: https://files.readme.io/5111448-belvo-for-developers.svg
    altText: Belvo logo
  x-konfig-ignore:
    potential-incorrect-type: true
servers:
  - description: Sandbox
    url: https://sandbox.belvo.com
  - description: Development
    url: https://development.belvo.com
tags:
  - description: >-
      A **Link** is a set of credentials associated to an end-user's access to
      an **institution**.


      <div style="background-color:#f4f6f8; border-left: 6px solid
      #808080;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:
      25px">

      <strong>Example: </strong> The username and password combination used to
      log in to an online banking application would be a link.

      </div>


      You will need to register a **Link** before accessing information from
      that specific end-user, such as account or transaction details.


      <div style="background-color:#f4f6f8; border-left: 6px solid
      #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:
      25px">

      <strong>Note: </strong> We recommend using our <a
      href="https://developers.belvo.com/docs/connect-widget"
      target="_blank">Connect Widget</a> to handle link creation and link status
      updates.

      </div>


      You have the possibility to register two types of links:


      ### Recurrent links (default)


      With recurrent links, Belvo automatically refreshes information weekly and
      notifies you via [Webhooks](https://developers.belvo.com/docs/webhooks) so
      you always have up-to-date data. Then, when you receive the webhook, you
      can make GET requests to the List or Detail endpoints to instantly access
      up-to-date information, without needing to connect to the institution.


      <img src="https://files.readme.io/7b6c0d4-Recurrent_Link_FLow.png"
      alt="fiscal-endpoints" width="950">


      You can also make POST calls directly to the institution, as with single
      links, as soon as the link is created. However, we recommend you follow
      the flow described above (waiting for the webhook event) for a more
      optimal experience.


      ### Single links


      Single links are used to perform ad hoc data access to accounts, owners,
      transactions, and so on. For example, you can use it when you want to do
      an underwriting process to assess risk before lending money.


      For single links, you have to perform POST calls to an institution **every
      time** you want to access fresh data.


      <img src="https://files.readme.io/eda7956-Single_Link_Flow.svg"
      alt="fiscal-endpoints" width="950">
    name: Links
  - description: >-
      An **account** is the representation of a bank account inside a financial
      institution. A user can have one or more accounts in an institution. 


      For example, one user (or link) can have a checking account, several
      credit cards, and a loan account.


      Querying for a user's account information is useful as you can get
      information regarding:


      - what types of accounts the user has

      - the balance for each account (savings, checking, credit card, loan, and
      so on)



      > üöß Scheduled field deprecation

      > 

      > Please note that we will soon be deprecating the following fields in our
      `loan_data` object:

      > 

      > - `cutting_date`

      > - `cutting_day`

      > - `credit_limit`: replaced by the `principal` field.

      > - `interest_rate`: replaced by the `interest_rates` object.

      > - `last_payment_date`

      > - `last_period_balance`: replaced by the `outstanding_balance ` field.

      > - `limit_day`

      > - `limit_date`: replaced by the `payment_day ` field.

      > - `no_interest_payment`

      > - `payment_due_day`


      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field                         | Available Filters                      |

      | ----------------------------- | -------------------------------------- |

      | `balance__available`          | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `balance__current`            | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `bank_product_id`             | `=`                                    |

      | `category`                    | `=`, `in`                              |

      | `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |

      | `currency`                    | `=`\*, `in`                            |

      | `id`                          | `=`, `in`                              |

      | `institution`                 | `=`, `in`                              |

      | `internal_identification`     | `=`                                    |

      | `link`                        | `=`, `in`                              |

      | `name`                        | `=`, `icontains`                       |

      | `number`                      | `=`, `in`                              |

      | `public_identification_name`  | `=`                                    |

      | `public_identification_value` | `=`                                    |

      | `type`                        | `=`, `in`                              |


      ```curl cURL

      ## Filtering results to have savings accounts with a balance

      ## between 5000 and 8000 Colombian pesos

      https://sandbox.belvo.com/api/accounts/?category=savings&balance__available__range=5000,8000&currency=COP

      ```

      ```javascript Node

      // Filtering results to have savings accounts with a balance

      // between 5000 and 8000 Colombian pesos

      client.accounts.list({
        filters: {
          category: "savings",
          balance__available__range: "5000,8000",
          currency: "COP"
        }
      })

      ```

      ```python Python

      ## Filtering results to have savings accounts with a balance

      ## between 5000 and 8000 Colombian pesos

      client.Accounts.list(category="savings",balance__available__range="5000,8000",currency="COP")

      ```

      ```ruby Ruby

      ## Filtering results to have savings accounts with a balance

      ## between 5000 and 8000 Colombian pesos

      client.accounts.list(params: {
        category: "savings",
        balance__available__range: "5000,8000",
        currency: "COP"
      })

      ```
    name: Accounts
  - description: >-
      A **transaction** contains the detailed information of each movement
      inside an account. For example, a purchase at a store or a restaurant.


      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field                         | Available Filters                      |

      | ----------------------------- | -------------------------------------- |

      | `account`                     | `=`, `in`                              |

      | `account**balance**available` | `=`, `lt`, `lte`, `range`              |

      | `account**balance**current`   | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `account_type`                | `=`, `in`                              |

      | `accounting_date`             | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `amount`                      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `credit_card_data__bill_name` | `=`, `in`                              |

      | `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |

      | `currency`                    | `=`, `in`                              |

      | `id`                          | `=`, `in`                              |

      | `institution`                 | `=`, `in`                              |

      | `link`                        | `=`, `in`                              |

      | `reference`                   | `=`, `in`                              |

      | `status`                      | `=`, `in`                              |

      | `type`                        | `=`, `in`                              |

      | `value_date`                  | `=`, `gt`, `gte`, `lt`, `lte`, `range` |


      ```curl cURL

      # Filtering results to have transactions just from one link

      https://api.belvo.com/api/transactions/?link=link_id


      # Filtering results to have transactions just form one link and between a
      date range

      https://api.belvo.com/api/transactions/?link=link_id&value_date__range=2020-10-01,2020-12-01


      ```

      ```javascript Node

      // Filtering results to have transactions just from one link


      client.transactions.list({
        filters: {
          link: "link_id"
        }
      })


      // Filtering results to have transactions just form one link and between a
      date range

      client.transactions.list({
        filters: {
          link: "link_id",
          value_date__range: "2020-10-01,2020-12-01"
        }
      })


      ```

      ```python Python

      # Filtering results to have links just from two institutions

      client.Transactions.list(link="link_id")


      # Filtering results from one institution and a certain status

      client.Transactions.list(link="link_id",
      value_date__range="2020-10-01,2020-12-01")


      ```

      ```ruby Ruby

      # Filtering results to have links just from two institutions

      client.transactions.list(params: {
        link: "link_id"
      })


      # Filtering results from one institution and a certain status

      client.transactions.list(params: {
        link: "link_id",
        value_date__range: "2020-10-01,2020-12-01"
      })

      ```
    name: Transactions
  - description: >-
      A **balance** represents the amount of funds available in a checking or
      savings account over a period of time.


      <ul>
        <li>
          If your Balance request is not for a checking or savings account, we return
          an empty array.
        </li>
        <li>
          If we cannot calculate the balance for a given day within your requested
          period, the <code>balance</code> and <code>current_balance</code> fields
          will return <code>null</code> for that day.
        </li>
      </ul>


      > üìò 

      > 

      > Savings accounts that do not have any associated transactions (for
      example, some _poupan√ßa_ accounts in Brazil) will not contain accurate
      Balance information. We do not recommend using the Balance endpoint for
      these types of accounts. 

      > 

      > Savings accounts vary from institution to institution, so we recommend
      that you first use our [Retrieve transactions for a
      link](https://developers.belvo.com/reference/retrievetransactions)
      request, adding the `account` in the request body, to see if the Savings
      account has any associated transactions.



      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field             | Available Filters                      |

      | ----------------- | -------------------------------------- |

      | `account`         | `=`, `in`                              |

      | `account_type`    | `=`, `in`                              |

      | `balance`         | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `currency`        | `=`, `in`                              |

      | `current_balance` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `id`              | `=`, `in`                              |

      | `institution`     | `=`, `in`                              |

      | `link`            | `=`, `in`                              |

      | `value_date`      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |


      ```curl cURL

      # Filtering results to have balances greater than 5000

      https://api.belvo.com/api/balances/?balance__gt=5000 


      # Filtering results to have balances greater than 5000 and in Brazilian
      Reis

      https://api.belvo.com/api/balances/?balance__gt=5000&currency=BRL

      ```

      ```javascript Node

      //  Filtering results to have balances greater than 5000

      client.balances.list({
        filters: {
          balance__gt: 5000
        }
      })


      //  Filtering results to have balances greater than 5000 and in Brazilian
      Reis


      client.balances.list({
        filters: {
          balance__gt: 5000,
          currency: "BRL"
        }
      })

      ```

      ```python Python

      # Filtering results to have balances greater than 5000

      client.Balances.list(balance__gt=5000)


      # Filtering results to have balances greater than 5000 and in Brazilian
      Reis

      client.Balances.list(balance__gt=5000, currency="BRL")

      ```

      ```ruby Ruby

      # Filtering results to have balances greater than 5000

      client.balances.list(params: {
        balance__gt: 5000
      })


      # Filtering results to have balances greater than 5000 and in Brazilian
      Reis

      client.balances.list(params: {
        balance__gt: 5000,
        currency: "BRL"
      })

      ```
    name: Balances
  - description: >-
      An **owner** represents the person who has access to a Link and is the
      owner of all the accounts inside the Link.


      You can use this endpoint in order to get useful information about your
      client, such as:


      - their full name

      - key contact information

      - information about the ID document they used when opening the account


      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field         | Available Filters                 |

      | ------------- | --------------------------------- |

      | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

      | `email`       | `=`                               |

      | `id`          | `=`, `in`                         |

      | `link`        | `=`, `in`                         |


      ```curl cURL

      # Filtering results so that you get the emails of one link:

      https://sandbox.belvo.com/api/owners/?email=filtering@belvo.com


      ```

      ```javascript Node

      // Filtering results so that you get the emails of one link:

      client.owners.list({
        filters: {
          email: "filtering@belvo.com"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the emails of one link:

      client.Owners.list(email="filtering@belvo.com")


      ```

      ```ruby Ruby

      # Filtering results so that you get the emails of one link:

      client.owners.list(params: {
        email: "filtering@belvo.com"
      })


      })

      ```
    name: Owners
  - description: >-
      At the moment we only support the following institutions and investment
      products:


      | Institution                     | Portfolio                         |
      Instruments                 |

      | ------------------------------- | --------------------------------- |
      --------------------------- |

      | Banco de Brazil Retail (Brazil) | `FIXED_INCOME`                    |
      `DEPOSIT`                   |

      | Banco Inter Retail (Brazil)     | `FIXED_INCOME`                    |
      `DEPOSIT`                   |

      | Bradesco Retail (Brazil)        | `FIXED_INCOME`, `VARIABLE_INCOME` |
      `DEPOSIT`, `FUND`           |

      | CaixaBank Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` |
      `DEPOSIT`, `FUND`           |

      | Itau Retail (Brazil)            | `FIXED_INCOME`, `VARIABLE_INCOME` |
      `DEPOSIT`, `FUND`, `STOCKS` |

      | Santander Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` |
      `DEPOSIT`, `BOND`, `FUND`   |



      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field         | Available Filters                 |

      | ------------- | --------------------------------- |

      | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

      | `link`        | `=`, `in`                         |


      ```curl cURL

      # Filtering results so that you get the portfolios of one link:

      https://sandbox.belvo.com/investments/portfolios/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4


      ```

      ```javascript Node

      // Filtering results so that you get the portfolios of one link:

      client. investmentsPortfolios.list({
        filters: {
          link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the portfolios of one link:

      client.
      InvestmentsPortfolios.list(link="89c91f42-df34-4c5d-a4f1-6e1e40438af4")


      ```

      ```ruby Ruby

      # Filtering results so that you get the portfolios of one link:

      client. investments_portfolio.list(params: {
        link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
      })

      ```
    name: Investment Portfolios
  - description: >-
      Use the Incomes endpoint to gather insights on an account's income sources
      for the past 365 days. The endpoint is particularly useful when you want
      to verify a person's income.


      <div style="background-color:#f4f6f8; border-left: 6px solid
      #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:
      25px">
          <strong>Info: </strong> The incomes resource is <b>only</b> available for Checking and Savings
      accounts associated with banking links.
       </div>


       ### **üî¶ Filterable fields**

      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field        | Available Filters                 |

      | ------------ | --------------------------------- |

      | `account`    | `=`, `in`                         |

      | `created_at` | `gt`, `gte`, `lt`, `lte`, `range` |

      | `id`         | `=`, `in`                         |


      ```curl cURL

      # Filtering results to have incomes from one link:

      https://sandbox.belvo.com/api/incomes/?link=link-id


      # Filtering results to have incomes from one link and from two of their
      accounts:

      https://sandbox.belvo.com/api/incomes/?link=link-id&account__in=account-id1,account-id2

      ```

      ```javascript Node

      // Filtering results to have incomes from one link:

      client.incomes.list({
        filters: {
          link: "link-id"
        }
      })


      // Filtering results to have incomes from one link and from two of their
      accounts:


      client.incomes.list({
        filters: {
          link: "link-id",
          account__in: "account-id1,account-id2"
        }
      })

      ```

      ```python Python

      # Filtering results to have incomes from one link:

      client.Incomes.list(link="link-id")


      # Filtering results to have incomes from one link and from two of their
      accounts:

      client.Incomes.list(link="link-id", account__in="account-id1,account-id2")

      ```

      ```ruby Ruby

      # Filtering results to have incomes from one link:

      client.incomes.list(params: {
        link: "link-id"
      })


      # Filtering results to have incomes from one link and from two of their
      accounts:

      client.incomes.list(params: {
        link: "link-id",
        account__in: "account-id1,account-id2"
      })

      ```
    name: Incomes
  - description: >-
      Belvo's Recurring Expenses API allows you to identify a user's regular
      payments for subscription services, such as Netflix or gym memberships, as
      well as utility payments, such as electricity or phone bills. We return
      information for up to 365 days.


      <div style="background-color:#f4f6f8; border-left: 6px solid
      #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:
      25px">
          <strong>Info: </strong> The recurring expenses resource is <b>only</b> available for Checking and Savings accounts associated with banking links.
       </div>

       ### **üî¶ Filterable fields**

      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field     | Available Filters |

      | --------- | ----------------- |

      | `account` | `=`, `in`         |

      | `id`      | `=`, `in`         |

      | `link`    | `=`, `in`         |


      ```curl cURL

      # Filtering results so that you get the recurring expenses of one account:

      https://sandbox.belvo.com/api/recurring-expenses/?account=89c91f42-df34-4c5d-a4f1-6e1e40438af4


      ```

      ```javascript Node

      // Filtering results so that you get the recurring expenses of one
      account:

      client. recurringExpenses.list({
        filters: {
          account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the recurring expenses of one account:

      client.
      RecurringExpenses.list(account="89c91f42-df34-4c5d-a4f1-6e1e40438af4")


      ```

      ```ruby Ruby

      # Filtering results so that you get the recurring expenses of one account:

      client. recurring_expenses.list(params: {
        account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
      })

      ```
    name: Recurring Expenses
  - description: >-
      Belvo's Risk Insights endpoint exposes a set of features that can be used
      to improve your company's credit risk and opportunity decisions. This set
      of features can be used as building blocks to create or iterate on your
      credit score using transactional banking data to improve the predictive
      power of your models. You can use these components as you require and make
      the most sense for your specific use case. 


      We take up to 90 days of transactional data from the user's checking,
      savings, loans, and credit card accounts to calculate the risk insights.


      If you need to know the currency of the account, do a GET Details to the
      Accounts endpoint (using the account ID you receive from in the accounts
      array of the response).


      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field  | Available Filters |

      | ------ | ----------------- |

      | `id`   | `=`, `in`         |

      | `link` | `=`, `in`         |


      ```curl cURL

      # Filtering results so that you get the risk insights of one link:

      https://sandbox.belvo.com/api/risk-insights/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4


      ```

      ```javascript Node

      // Filtering results so that you get the risk insights of one link:

      client. riskInsights.list({
        filters: {
          account: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the risk insights of one link:

      client. RiskInsights.list(link="89c91f42-df34-4c5d-a4f1-6e1e40438af4")


      ```

      ```ruby Ruby

      # Filtering results so that you get the risk insights of one link:

      client. risk_insights.list(params: {
        link: "89c91f42-df34-4c5d-a4f1-6e1e40438af4"
      })

      ```
    name: Risk Insights
  - description: >-
      An **invoice** is the representation of an electronic invoice, that can be
      received or sent, by a business or an individual and has been uploaded to
      the fiscal institution's website. Multiple INFLOW (invoice received) and
      OUTFLOW (invoice sent) invoices can be retrieved inside each link coming
      from a fiscal institution.


      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field                    | Available Filters                      |

      | ------------------------ | -------------------------------------- |

      | `created_at `            | `gt`, `gte`, `lt`, `lte`, `range`      |

      | `id`                     | `=`, `in`                              |

      | `invoice_date`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `invoice_identification` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `link`                   | `=`, `in`                              |

      | `status`                 | `=`, `in`                              |

      | `total_amount`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |

      | `type`                   | `=`, `in`                              |


      ```curl cURL

      # Filtering results so that you get Tax Returns from one link:

      https://sandbox.belvo.com/api/invoices/?link=link-id


      # Filtering results so that you get Tax Returns from two links 

      # and are of type normal and their status is vigente:

      https://sandbox.belvo.com/api/invoices/?link__in=link-id1,link-id2&informacion_general__tipo_declaracion=Normal&status=vigente

      ```

      ```javascript Node

      //  Filtering results so that you get the Tax Returns from one link:

      client.invoices.list({
        filters: {
          link: "link-id"
        }
      })


      //  Filtering results so that you get the Tax Returns from two links

      // and are of type normal and their status is vigente:

      client.invoices.list({
        filters: {
          link__in: "link-id-1, link-id-2",
          informacion_general__tipo_declaracion: "Normal",
          status: "vigente"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the Tax Return from one link:

      client.invoices.list(link="link-id")


      # Filtering results so that you get the Tax Returns from two links

      # # and are of type normal and their status is vigente:

      client.invoices.list(link__in="link-id1,link-id2",
      informacion_general__tipo_declaracion="Normal", status="vigente")

      ```

      ```ruby Ruby

      # Filtering results so that you get the Tax Return from one link:

      client.invoices.list(params: {
        link: "link-id"
      })



      # Filtering results so that you get the Tax Returns from two links

      # and are of type normal and their status is vigente:

      client.invoices.list(params: {
        link__in: "link-id1, link-id1",
        informacion_general__tipo_declaracion: "Normal",
        status: "vigente"
      })

      ```
    name: Invoices
  - description: >-
      With our receivable transactions resource, you can gain access to every
      transaction processed by the end user (business) conducted through a POS
      terminal. For each transaction, we return the:


      - gross and net amounts

      - type of card used

      - fees applied to the transaction

      - and more!
    name: Receivable Transactions
  - description: "# Employment Records\n\nOur employment records\_resource lets you get a comprehensive view of your user‚Äôs current social security contributions and employment history.\n\nWith Belvo's employment records resource, you can access information about your user's current social security contributions and employment history. For the each user, we return the:\n\n- personal data\n- work history\n- historical and current daily base salary\n- and more!\n\nAt the moment, the employment records resource is available for:\n\n- üá≤üáΩ\_Mexico (IMSS)"
    name: Employment Records
  - description: >-
      Our Tax declarations endpoint lets you retrieve the electronic
      representation of the tax declaration document emitted by a country's tax
      authority.


      At the moment, the Tax Declaration resource is available for:


      - üá®üá¥ Colombia (DIAN)
    name: Tax declarations
  - description: >-
      A **tax return** is the representation of the tax return document sent
      every year by a person or a business to the tax authority in the country.


      The tax return data structure will be different depending on if it is
      related to a person or a business (you will find examples for both in the
      endpoints below).


      ### **üî¶ Filterable fields**


      | Field                                   | Available
      Filters                      |

      | --------------------------------------- |
      -------------------------------------- |

      | `created_at `                           | `gt`, `gte`, `lt`, `lte`,
      `range`      |

      | `id`                                    | `=`,
      `in`                              |

      | `ejercicio`                             | `=`, `gt`, `gte`, `lt`, `lte`,
      `range` |

      | `tipo_declaracion`                      | `=`,
      `in`                              |

      | `link`                                  | `=`,
      `in`                              |


      ```curl cURL

      # Filtering results so that you get Tax Returns from one link:

      https://api.belvo.com/api/tax-returns/?link=link-id


      # Filtering results so that you get Tax Returns from two links and are of
      type normal:

      https://api.belvo.com/api/tax-returns/?link__in=link-id1,link-id2&tipo_declaracion=Normal,

      ```

      ```javascript Node

      //  Filtering results so that you get the Tax Returns from one link:

      client.taxReturns.list({
        filters: {
          link: "link-id"
        }
      })


      //  Filtering results so that you get the Tax Returns from two links and
      are of type normal:

      client.taxReturns.list({
        filters: {
          link__in: "link-id-1, link-id-2",
          tipo_declaracion: "Normal"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the Tax Return from one link:

      client.TaxReturns.list(link="link-id")


      # Filtering results so that you get the Tax Returns from two links and are
      of type normal:

      client.TaxReturns.list(link__in="link-id1,link-id2", tipo_declaracion:
      "Normal")

      ```

      ```ruby Ruby

      # Filtering results so that you get the Tax Return from one link:

      client.tax_returns.list(params: {
        link: "link-id"
      })



      # Filtering results so that you get the Tax Returns from two links and are
      of type normal:

      client.tax_returns.list(params: {
        link__in: "link-id1, link-id1",
        tipo_declaracion: "Normal"
      })

      ```
    name: Tax returns
  - description: >-
      Our **Tax status** endpoint lets you retrieve information about a person's
      or business's tax situation, according to the country's tax authority. 


      - For SAT (Mexico), this information is extracted from the _Constancia de
      situaci√≥n fiscal_ document.

      - For DIAN (Colombia), this information is extracted from the _Registro
      √önico Tributario_ document.




      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field         | Available Filters                 |

      | ------------- | --------------------------------- |

      | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

      | `id`          | `=`, `in`                         |

      | `link`        | `=`, `in`                         |


      ```curl cURL

      # Filtering results so that you get institutions from just one link:

      https://api.belvo.com/api/institutions/?link=link

      ```

      ```javascript Node

      //  Filtering results so that you get institutions from just one link:

      client.taxstatus.list({
        filters: {
          link: "link_id"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get institutions from just one link:

      client.TaxStatus.list(link="link")

      ```

      ```ruby Ruby

      # Filtering results so that you get institutions from just one link:

      client.tax_status.list(params: {
        link: "link"
      })

      ```
    name: Tax status
  - description: >-
      A **tax retention** is the amount of money that the payer must deduct from
      the total amount of a purchase invoice, according to the fiscal
      institution‚Äôs regulations.


      With Belvo‚Äôs Tax Retentions resource, you can quickly and easily consult
      information regarding a user‚Äôs tax retentions over a given period or for a
      specific invoice. This is particularly useful when you want to aid your
      user in their tax returns as for each invoice you receive the:


      - invoice amount

      - amount that is exempt from taxation

      - total amount that is taxed

      - breakdown of all the taxes applied to the invoice



      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field         | Available Filters                 |

      | ------------- | --------------------------------- |

      | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

      | `link`        | `=`, `in`                         |


      ```curl cURL

      # Filtering results so that you get Tax Retentions from one link:

      https://sandbox.belvo.com/api/tax-retentions/?link=link-id


      # Filtering results so that you get Tax Retentions from two links 

      https://api.belvo.com/api/tax-retentions/?link=link-id1,link-id2

      ```

      ```javascript Node

      //  Filtering results so that you get the Tax Retentions from one link:

      client.taxRetentions.list({
        filters: {
          link: "link-id"
        }
      })


      //  Filtering results so that you get the Tax Retentions from two links:

      client.taxRetentions.list({
        filters: {
          link__in: "link-id-1, link-id-2"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the Tax Retentions from one link:

      client.TaxRetentions.list(link="link-id")


      # Filtering results so that you get the Tax Retentions from two links:

      client.TaxRetentions.list(link__in="link-id1,link-id2")

      ```

      ```ruby Ruby

      # Filtering results so that you get the Tax Retentions from one link:

      client.tax_retentions.list(params: {
        link: "link-id"
      })



      # Filtering results so that you get the Tax Retentions from two link:

      client.tax_retentions.list(params: {
        link__in: "link-id1, link-id1"
      })

      ```
    name: Tax retentions
  - description: >-
      A **tax compliance status** indicates about whether a person or business
      is complying with their tax obligations at the moment of the request. The
      information is extracted from SAT's _Opinion de cumplimiento de
      Obligaciones Fiscales_ document.


      ### **üî¶ Filterable fields**


      Please see the table below for an alphabetized list of fields that you can
      filter your responses by. For more information on how to use filters, see
      our [Filtering
      responses](https://developers.belvo.com/docs/searching-and-filtering)
      article.


      | Field         | Available Filters                 |

      | ------------- | --------------------------------- |

      | `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |

      | `id`          | `=`, `in`                         |

      | `link`        | `=`, `in`                         |


      ```curl cURL

      # Filtering results so that you get Tax Compliance Status from one link:

      https://api.belvo.com/api/tax-compliance-status/?link=link-id


      # Filtering results so that you get Tax Compliance Status from one link:

      https://api.belvo.com/api/tax-compliance-status/?link=link-id1,link-id2

      ```

      ```javascript Node

      //  Filtering results so that you get the Tax Compliance Status from one
      link:

      client.taxComplianceStatus.list({
        filters: {
          link: "link-id"
        }
      })


      //  Filtering results so that you get the Tax Compliance Status from two
      links:

      client.taxComplianceStatus.list({
        filters: {
          link__in: "link-id-1, link-id-2"
        }
      })


      ```

      ```python Python

      # Filtering results so that you get the Tax Compliance Status from one
      link:

      client.TaxComplianceStatus.list(link="link-id")


      # Filtering results so that you get the Tax Compliance Status from two
      links:

      client.TaxComplianceStatus.list(link__in="link-id1,link-id2")

      ```

      ```ruby Ruby

      # Filtering results so that you get the Tax Compliance Status from one
      link:

      client.tax_compliance_status.list(params: {
        link: "link-id"
      })



      # Filtering results so that you get the Tax Compliance Status from two
      link:

      client.tax_compliance_status.list(params: {
        link__in: "link-id1, link-id1"
      })

      ```
    name: Tax compliance status
  - description: >

      A **payment intent** is a single point of access to create payments using
      any payment method offered by Belvo.


      A payment intent captures all payment information (such as the amount to
      be charged, the description of the payment, the provider, and so on) and
      guides your customers through the payment flow.
    name: Payment Intents
  - description: >
      A **customer** is the payer that's going to push funds into your bank
      account. You need to create a customer in order to receive inflow payments
      to your organization's bank account.
    name: Customers
  - description: >
      To receive inflow payments to your organization's bank account, you must
      register the bank accounts (individual and business) using Belvo's
      Payments API.


      - **Individual** bank accounts must be created for each payer (your
      customer).

      - **Business** bank accounts need to be created for the beneficiary of the
      payment (your organization).
    name: Bank Accounts
  - description: |
      This is a Payment link.
    name: Payment Links
  - description: >-
      An **institution** is an entity that Belvo can access information from. It
      can be a:


      - bank institution, such as Banamex retail banking or HSBC business
      banking.

      - fiscal institution, such as the Servicio de Administraci√≥n Tributaria
      (SAT) in Mexico.


      ![](https://files.readme.io/69a4676-Banking__Tax.png)


      You can see a complete list of institutions by either consulting our
      [Institutions article](https://developers.belvo.com/docs/institution) or
      making a List request to this endpoint.
    name: Institutions
  - description: >
      # Get your Payments API keys


      In order to use Belvo's Payments API, you need to first request your
      secret keys (see the code example below):



      ```curl

      POST https://api.belvo.com/payments/secret-keys/

      Authorization: Basic username:password

      ```


      Where:


      - `username` is the username you use to log in to the Belvo dashboard (in
      plain text).

      - `password` is the password you use to log in to the Belvo dashboard (in
      plain text).



      If you have entered your credentials correctly, you will receive a **201
      Response** with your secret keys:



      ```json

      {
          "id": "Your Belvo secretID",
          "password": "Your Belvo secretPassword"
      }


      ```
    name: Secret Keys
  - description: >
      A **payment institution** is an entity that Belvo can access information
      from. You can see a complete list of institutions available for payments
      by making a List request to this endpoint.
    name: Payment Institutions
  - description: >
      Each time you receive an inflow payment from your customer, a
      **transaction** is created in the Belvo database.


      You can use the Payment Transactions resource in order to get useful
      information about a transaction as well as the specific charge associated
      with it.
    name: Payment Transactions
  - description: >-
      Our Categorization resource provides you with categorized information for
      a transaction. You‚Äôll need to send a POST Categorize Transactions request
      with raw transactional information (such as amount, description, and
      holder information) to which Belvo:

      - assigns a standardized category to each transaction

      - provides additional information about the merchant involved in the
      transaction (name, logo, website URL)
                                  
    name: Categorization
  - description: >-
      Verify your users' income and forecast their future income potential with
      Belvo. Your only need to send trough a your raw transaction data and Belvo
      returns:


      - insights into your user‚Äôs multiple sources of income

      - a stability score that reflects the consistency and regularity of your
      user‚Äôs income history

      - a confidence level for future income
    name: Income Verification
  - description: >
      Use our Banking API product to access account, balance, owner, bank
      statement, as well as transaction data from banking institutions.<br>



      ![](https://files.readme.io/894213c-Banking_and_Gig.png "Banking and
      Gig.png")



      | API Endpoint                |
      Description                                                              
      | Supported institutions |

      | --------------------------- |
      -------------------------------------------------------------------------
      | ---------------------- |

      | `api/accounts/`             | Get information about your customer's bank
      accounts.                      | Banking        |

      | `api/balances/`             | Get the balance at the end of each day for
      your customer's bank accounts. | Banking                |

      | `api/owners/`               | Get the details of an account
      owner.                                      | Banking        |

      | `api/transactions/`         | Get a list of bank transactions with
      metadata.                            | Banking        |

      | `investments/portfolios/`   | Get information about your customer's
      investment portfolios.              | Banking                |
    name: Banking API introduction
  - description: >-
      Belvo's Enrichment API are a set of endpoints that return additional
      insights on your user's banking data. 


      - **Incomes**: Use this endpoint to verify your user's income.

      - **Recurring Expenses**: Use this endpoint to identify the recurrent
      expenses (such as Netflix subscriptions) that your user pays.

      - **Risk Insights**: Use this endpoint to retrieve key data points to feed
      into your risk evaluation models.
    name: Enrichment API introduction
  - description: >-
      Our Enrich Your Own Data (EYOD) product provides you with enriched
      transaction information and easy-to-use insights about your users
      incomesfrom various sources, including open finance data or your own
      dataset.




      | API Endpoint                 |
      Description                                                                                                                          
      |

      | ---------------------------- |
      -------------------------------------------------------------------------------------------------------------------------------------
      |

      | `api/categorization/`              | Enrich transactions with category,
      subcategory, and merchant information. |

      | `api/enrich/incomes`              | Enrich transaction data from any
      source and gather insights on your user's income sources and asses their
      future income potential. |
    name: EYOD API introduction
  - description: >-
      Use our **Fiscal API** product to access invoices, tax compliance
      statuses, tax returns, tax retentions, and tax statuses from the fiscal
      authority in a given country.


      <img src="https://files.readme.io/97c76a8-Fiscal_endpoints_horizontal.png"
      alt="fiscal-endpoints" width="750">


      | API Endpoint                 |
      Description                                                                                                                          
      |

      | ---------------------------- |
      -------------------------------------------------------------------------------------------------------------------------------------
      |

      | `api/invoices/`              | Get all the information about the
      invoices sent and received by a person or a business that have been
      certified by the tax authority. |

      | `api/tax-compliance-status/` | Get information about whether a person or
      business is complying to their tax
      obligations.                                             |

      | `api/tax-compliance-status/` | Get tax declaration information for your
      users. At the moment only available for üá®üá¥ DIAN
      Colombia.                                  |

      | `api/tax-returns/`           | Get all the information about the tax
      returns sent every year to the tax authority by a person or a
      business.                         |

      | `api/tax-retentions/`        | Get information about tax retention
      invoices sent and received by a business or a
      person.                                             |

      | `api/tax-status/`            | Get all the information about the tax
      situation of a person or a
      business.                                                            |


      <div style="background-color:#f4f6f8; border-left: 6px solid
      #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:
      25px">

      <strong>Note: </strong> You can only access this information with
      <b>fiscal</b> links.

      </div>
    name: Fiscal API introduction
  - description: >
      # Introduction


      This is Belvo's Payment Initiation API - the easiest way to make payments
      in Latin America. Our solutions are designed to minimize the friction
      between your app and your customers, making payments effortless and
      secure. You can make payments in:


      # üáßüá∑ Brazil (OFPI)


      Belvo's Open Finance Payment Initiation (OFPI) in Brazil allows you to
      collect payments from your customers while optimizing their payment
      experience.


      - Check out our [OFPI
      guides](https://developers.belvo.com/docs/ofpi-prerequisites) and start
      collecting payments in Brazil.

      # üá®üá¥ Colombia (PSE)


      Belvo's Payment Initiation API makes use of Colombia's Pagos Seguros en
      L√≠nea (PSE) system to make payments securely while also building upon PSE
      to optimize your user's experience.


      - Check out our [PSE
      guides](https://developers.belvo.com/docs/pse-prerequisites) and start
      collecting payments in Colombia.
    name: Payment Initiation introduction
paths:
  /api/links:
    get:
      tags:
        - Links
      summary: List all links
      operationId: Links_list
      description: >-
        Get a paginated list of all the existing links in your Belvo account. By
        default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >-
            Return links only with this access mode. Can be either `single` or
            `recurrent`.
          name: access_mode
          in: query
          schema:
            type: string
            example: single
        - description: >-
            Return links that were last updated in Belvo's database on this date
            (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-05-01'
        - description: >-
            Return links that were last updated in Belvo's database after this
            date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return links that were last updated in Belvo's database after or on
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return links that were last updated in Belvo's database before this
            date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return links that were last updated in Belvo's database before or on
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return links that were last updated in Belvo's database between two
            dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return links that were not created by these Belvo users.
          name: created_by__not_in
          in: query
          schema:
            type: string
            example: >-
              578947e2-3c9a-4401-bbad-59b2f2d2b91b,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e
        - description: Return links with this external ID.
          name: external_id
          in: query
          schema:
            type: string
            example: InternalUser4000
        - description: Return links with these external IDs.
          name: external_id__in
          in: query
          schema:
            type: string
            example: InternalUser4000,InternalUser4001
        - description: Return information only for this `link.id`.
          name: id
          in: query
          schema:
            type: string
            example: 73694155-b871-41ec-94e3-37d17ff62b5d
        - description: Return information only for these `link.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
        - description: >-
            Return links created for this institution (use the Belvo-designated
            name, such as `erebor_mx_retail`).
          name: institution
          in: query
          schema:
            type: string
            example: erebor_mx_retail
        - description: >-
            Return links created for these institutions (use the
            Belvo-designated name, such as `erebor_mx_retail` and
            `gringotts_co_retail`).
          name: institution__in
          in: query
          schema:
            type: string
            example: erebor_mx_retail,gringotts_co_retail
        - description: Return links with this specific institution user ID.
          name: institution_user_id
          in: query
          schema:
            type: string
            example: ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=
        - description: Return links with these institution user IDs.
          name: institution_user_id__in
          in: query
          schema:
            type: string
            example: >-
              ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=,YwuTM0uEEh1BbVgDZBcNpa_-Tm3l2q8ZkZNrlhp-pNA=
        - description: >-
            Return links with this refresh rate. Choose between `6h`, `12h`,
            `24h`, `7d`, or `30d`.
          name: refresh_rate
          in: query
          schema:
            type: string
            example: 24h
        - description: >-
            Return links with this status. Choose between `valid`, `invalid`,
            `unconfirmed`, or `token_required`.
          name: status
          in: query
          schema:
            type: string
            example: invalid
        - description: >-
            Return links with these statuses. Choose between `valid`, `invalid`,
            `unconfirmed`, or `token_required`.
          name: status__in
          in: query
          schema:
            type: string
            example: invalid,unconfirmed
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseLink'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/links/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List links
              for link in client.Links.list():
                  pprint(link)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.links.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.links.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Links
      summary: Register a new link
      operationId: Links_register
      description: >
        Register a new link with your Belvo account.


        <div style="background-color:#f4f6f8; border-left: 6px solid
        #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px">

        <strong>Note: </strong> We recommend using our <a
        href="https://developers.belvo.com/docs/connect-widget"
        target="_blank">Connect Widget</a> to handle link creation and link
        status updates.

        </div>
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinksRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksRegisterResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksRegister401Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksRegister428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksRegister500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/links/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "institution": "",
                  "username": "",
                  "password": ""
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Register a link
              link = client.Links.create(
                  institution="erebor_mx_retail",
                  username="johndoe",
                  password="supersecret"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.links.register(
                institution: 'erebor_mx_retail',
                username: 'johndoe',
                password: 'supersecret'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.links.register('erebor_mx_retail', 'johndoe', 'supersecret')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Links
      summary: Complete a links request
      operationId: Links_completeRequest
      description: >-
        Used to resume a Link register session that was paused because an MFA
        token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBodyWithoutSaveData'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksCompleteRequestResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksCompleteRequest401Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksCompleteRequest500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PATCH \
                https://sandbox.belvo.com/api/links/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Resume a link
              link = client.Links.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.links.resume(
                session_id: 'your-session-id',
                token: 'otp-token',
                link: 'link-id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.links.resume('yourSessionId', 'yourOTPToken', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/links/{id}:
    get:
      tags:
        - Links
      summary: Get a link's details
      operationId: Links_getDetails
      description: Get the details of a specific link.
      parameters:
        - description: The `link.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/links/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get a link
              link = client.Links.get(id="link_id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.links.detail id: 'link-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.links.detail('linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Links
      summary: Change a link's access mode
      operationId: Links_changeAccessMode
      description: >-
        Change a link's access mode from `single` to `recurrent` or from
        `recurrent` to single.

        ‚ÑπÔ∏è **Note**: When you change a link from `single`` to `recurrent`, they
        will only be updated the next day at the scheduled interval.
      parameters:
        - description: The `link.id` you want to change the `access_mode` for.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            example: e4bb1afb-4a4f-4dd6-8be0-e615d233185b
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeAccessMode'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksChangeAccessModeResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksChangeAccessMode401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksChangeAccessMode404Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksChangeAccessMode428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksChangeAccessMode500Response'
    put:
      tags:
        - Links
      summary: Update a link's credentials
      operationId: Links_update
      description: >
        Update the credentials of a specific link. If the successfully updated
        link is a recurrent one, we automatically trigger an update of the link.
        If we find fresh data, you'll [receive historical
        update](https://developers.belvo.com/docs/webhooks) webhooks.

        <div style="background-color:#f4f6f8; border-left: 6px solid
        #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px"> <strong>Note: </strong> We recommend using our <a
        href="https://developers.belvo.com/docs/connect-widget"
        target="_blank">Connect Widget</a> to handle updating
        <code>invalid</code> or <code>token_required</code> links. </div>
      parameters:
        - description: The `link.id` you want to update.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinksPutRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksUpdateResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksUpdate401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksUpdate404Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksUpdate428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksUpdate500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PUT https://sandbox.belvo.com/api/links/{id} \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "password": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Update a link
              link = client.Links.put(link="link_id", password="password")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.links.update(link: 'link-id', password: 'new-password')
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.links.update('linkID', 'newSuperSecret')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Links
      summary: Delete a link
      operationId: Links_destroy
      description: >-
        Delete a specific link and all associated accounts, transactions, and
        owners from your Belvo account.

        # Deleting links in batches

        To delete links in bulk, we recommend looping through the list of links
        you want to delete and making the delete request.

          > üöß **Rate limiting and IP blocking**
          > 
          > An important technical note for performing operations in batches is to take into consideration our rate-limiting: up to 80 requests every 30 seconds. If you exceed this limit, you run the risk of Belvo blocking your IP from making further requests.
          > 
          > For more information, or if your IP address has been blocked, please contact our [support team](https://support.belvo.com/hc/en-us/requests/new).
      parameters:
        - description: The `link.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksDestroyResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinksDestroy404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/links/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              client.Links.delete("link_id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.links.delete id: 'link-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.links.delete('linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/accounts:
    get:
      tags:
        - Accounts
      summary: List all accounts
      operationId: Accounts_list
      description: >-
        Get a paginated list of all existing accounts in your Belvo account. By
        default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >-
            Return accounts that have a `balance.available` matching exactly
            this value.
          name: balance__available
          in: query
          schema:
            type: string
            example: '4000.00'
        - description: >-
            Return accounts that have a `balance.available` less than this
            value.
          name: balance__available__lt
          in: query
          schema:
            type: string
            example: '6000.00'
        - description: >-
            Return accounts that have a `balance.available` less than or equal
            to this value.
          name: balance__available__lte
          in: query
          schema:
            type: string
            example: '5999.00'
        - description: >-
            Return accounts that have a `balance.available` greater than this
            value.
          name: balance__available__gt
          in: query
          schema:
            type: string
            example: '2000.00'
        - description: >-
            Return accounts that have a `balance.available` greater than or
            equal to this value.
          name: balance__available__gte
          in: query
          schema:
            type: string
            example: '1999.00'
        - description: >-
            Return accounts that have a `balance.available` within a range of
            two values.
          name: balance__available__range
          in: query
          schema:
            type: string
            example: 3000.00,4350.00
        - description: >-
            Return accounts that have a `balance.current` matching exactly this
            value.
          name: balance__current
          in: query
          schema:
            type: string
            example: '4000.00'
        - description: Return accounts that have a `balance.current` less than this value.
          name: balance__current__lt
          in: query
          schema:
            type: string
            example: '6000.00'
        - description: >-
            Return accounts that have a `balance.available` less than or equal
            to this value.
          name: balance__current__lte
          in: query
          schema:
            type: string
            example: '5999.00'
        - description: >-
            Return accounts that have a `balance.current` greater than this
            value.
          name: balance__current__gt
          in: query
          schema:
            type: string
            example: '2000.00'
        - description: >-
            Return accounts that have a `balance.available` greater than or
            equal to this value.
          name: balance__current__gte
          in: query
          schema:
            type: string
            example: '1999.00'
        - description: >-
            Return accounts that have a `balance.available` within a range of
            two values.
          name: balance__current__range
          in: query
          schema:
            type: string
            example: 3000.00,4350.00
        - description: >-
            Return accounts only for the given category (for example,
            `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).
          name: category
          in: query
          schema:
            type: string
            example: CREDIT_ACCOUNT
        - description: >-
            Return accounts only for the given categories (for example,
            `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).
          name: category__in
          in: query
          schema:
            type: string
            example: CHECKING_ACCOUNT,SAVINGS_ACCOUNT
        - description: >-
            Return accounts that were last updated in Belvo's database after
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return accounts that were last updated in Belvo's database after or
            on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return accounts that were last updated in Belvo's database before
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return accounts that were last updated in Belvo's database before or
            on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return accounts that were last updated in Belvo's database between
            two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: >-
            Return accounts that hold finances in only this three-letter
            currency code.
          name: currency
          in: query
          schema:
            type: string
            example: COP
        - description: >-
            Return accounts that hold finances in one of these three-letter
            currency codes.
          name: currency__in
          in: query
          schema:
            type: string
            example: COP,MXN
        - description: Return information only for this `account.id`.
          name: id
          in: query
          schema:
            type: string
            example: 24ccab1d-3a86-4136-a6eb-e04bf52b356f
        - description: Return information for these `account.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
        - description: >-
            Return accounts only for this institution (use the Belvo-designated
            name, such as `erebor_mx_retail`).
          name: institution
          in: query
          schema:
            type: string
            example: erebor_mx_retail
        - description: >-
            Return accounts only for these institutions (use the
            Belvo-designated names, such as `erebor_mx_retail` and
            `gringotts_mx_retail`).
          name: institution__in
          in: query
          schema:
            type: string
            example: erebor_mx_retail,gringotts_mx_retail
        - description: Return accounts only for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
        - description: >-
            Return accounts with exactly this internal (specified by the
            institution) name.
          name: name
          in: query
          schema:
            type: string
            example: Cuenta Perfiles- M.N. - MXN-666
        - description: >-
            Return accounts partially matching this internal (specified by the
            institution) name.
          name: name__icontains
          in: query
          schema:
            type: string
            example: Perfiles
        - description: >-
            Return information only for this account number (as specified by the
            institution).
          name: number
          in: query
          schema:
            type: string
            example: '4057068115181'
        - description: >-
            Return information for these account numbers (as specified by the
            institution).
          name: number__in
          in: query
          schema:
            type: string
            example: 4057068115181,7809346821648
        - description: >-
            Return information only for this type of account ID. For example,
            CLABE accounts.
          name: public_identification_name
          in: query
          schema:
            type: string
            example: CLABE
        - description: >-
            Return information only for this account ID. For example, the
            account number for a CLABE account.
          name: public_identification_value
          in: query
          schema:
            type: string
            example: '150194683119900273'
        - description: >-
            Return information only for accounts matching this account type, as
            designated by the institution.
          name: type
          in: query
          schema:
            type: string
            example: Cuentas de efectivo
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/accounts/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List Accounts
              for account in client.Accounts.list():
                  pprint(account)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.accounts.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.accounts.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Accounts
      summary: Retrieve accounts for a link
      operationId: Accounts_retrieve
      description: |-
        Retrieve accounts from an existing link.

          > üöß Scheduled field deprecation
          > 
          > Please note that we will soon be deprecating the following fields in our `loan_data` object:
          > - `cutting_date`
          > - `cutting_day`
          > - `credit_limit`: replaced by the `principal` field.
          > - `interest_rate`: replaced by the `interest_rates` object.
          > - `last_payment_date`
          > - `last_period_balance`: replaced by the `outstanding_balance ` field.
          > - `limit_day`
          > - `limit_date`: replaced by the `payment_day ` field.
          > - `no_interest_payment`
          > - `payment_due_day`
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsRetrieveResponse'
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsRetrieve201Response'
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/accounts/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "link_id"
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve accounts
              accounts = client.Accounts.create(
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.accounts.retrieve link: 'link-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.accounts.retrieve('link-id')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Accounts
      summary: Complete an accounts request
      operationId: Accounts_completeRequest
      description: >-
        Used to resume an Account retrieve session that was paused because an
        MFA token was required by the institution.

          > üöß Scheduled field deprecation
          > 
          > Please note that we will soon be deprecating the following fields in our `loan_data` object:
          > - `cutting_date`
          > - `cutting_day`
          > - `credit_limit`: replaced by the `principal` field.
          > - `interest_rate`: replaced by the `interest_rates` object.
          > - `last_payment_date`
          > - `last_period_balance`: replaced by the `outstanding_balance ` field.
          > - `limit_day`
          > - `limit_date`: replaced by the `payment_day ` field.
          > - `no_interest_payment`
          > - `payment_due_day`
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCompleteRequestResponse'
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCompleteRequest201Response'
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingChecking'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCard'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoan'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPension'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavings'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCompleteRequest400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCompleteRequest401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCompleteRequest408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCompleteRequest500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PATCH \
                https://sandbox.belvo.com/api/accounts/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Resume accounts
              accounts = client.Accounts.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.accounts.resume(
                session: 'session_id',
                token: 'token',
                link: 'link_id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.accounts.resume('sessionId', 'token', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get an account's details
      operationId: Accounts_getDetails
      description: |-
        Get the details of a specific account.

          > üöß Scheduled field deprecation
          >
          > Please note that we will soon be deprecating the following fields in our `loan_data` object:
          > - `cutting_date`
          > - `cutting_day`
          > - `credit_limit`: replaced by the `principal` field.
          > - `interest_rate`: replaced by the `interest_rates` object.
          > - `last_payment_date`
          > - `last_period_balance`: replaced by the `outstanding_balance ` field.
          > - `limit_day`
          > - `limit_date`: replaced by the `payment_day ` field.
          > - `no_interest_payment`
          > - `payment_due_day`
      parameters:
        - description: The `account.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                AccountsBankingChecking:
                  $ref: '#/components/examples/AccountsBankingCheckingDetail'
                AccountsBankingCreditCard:
                  $ref: '#/components/examples/AccountsBankingCreditCardDetail'
                AcccountsBankingLoan:
                  $ref: '#/components/examples/AccountsBankingLoanDetail'
                AccountsBankingPension:
                  $ref: '#/components/examples/AccountsBankingPensionDetail'
                AccountsBankingSavings:
                  $ref: '#/components/examples/AccountsBankingSavingsDetail'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/accounts/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get an account
              account = client.Accounts.get(id="account-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.accounts.detail id: 'account-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.accounts.detail('accountId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Accounts
      summary: Delete an account
      operationId: Accounts_delete
      description: >-
        Delete a specific account and all associated transactions, as well as
        owners, from your Belvo account.
      parameters:
        - description: The `account.id` you want to delete
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/accounts/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete an account
              client.Accounts.delete("account-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.accounts.delete id: 'account-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.accounts.delete('accountId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/transactions:
    get:
      tags:
        - Transactions
      summary: List all transactions
      operationId: Transactions_list
      description: >-
        Get a paginated list of all existing transactions in your Belvo account.
        By default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page.


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `account.id` filter as well in
            order to improve your performance.
          name: link
          in: query
          required: true
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >
            The `account.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `account.id` filter in order to
            improve your performance.
          name: account
          in: query
          schema:
            type: string
            format: uuid
            example: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
        - description: >-
            Return transactions that have a `account.balance.available` matching
            exactly this value.
          name: account__balance__available
          in: query
          schema:
            type: string
            example: '4000.00'
        - description: >-
            Return transactions that have a `account.balance.available` less
            than this value.
          name: account__balance__available__lt
          in: query
          schema:
            type: string
            example: '6000.00'
        - description: >-
            Return transactions that have a `account.balance.available` less
            than or equal to this value.
          name: account__balance__available__lte
          in: query
          schema:
            type: string
            example: '5999.00'
        - description: >-
            Return transactions that have a `account.balance.available` within a
            range of two values.
          name: account__balance__available__range
          in: query
          schema:
            type: string
            example: 3000.00,4350.00
        - description: >-
            Return transactions that have a `account.balance.current` matching
            exactly this value.
          name: account__balance__current
          in: query
          schema:
            type: string
            example: '4000.00'
        - description: >-
            Return transactions that have a `account.balance.current` greater
            than this value.
          name: account__balance__current__gt
          in: query
          schema:
            type: string
            example: '4020.00'
        - description: >-
            Return transactions that have a `account.balance.current` greater
            than or equal to this value.
          name: account__balance__current__gte
          in: query
          schema:
            type: string
            example: '4019.00'
        - description: >-
            Return transactions that have a `account.balance.current` less than
            this value.
          name: account__balance__current__lt
          in: query
          schema:
            type: string
            example: '3000.00'
        - description: >-
            Return transactions that have a `account.balance.current` less than
            or equal to this value.
          name: account__balance__current__lte
          in: query
          schema:
            type: string
            example: '2999.00'
        - description: >-
            Return transactions that have a `account.balance.current` within a
            range of two values.
          name: account__balance__current__range
          in: query
          schema:
            type: string
            example: 2999.00,4000.00
        - description: Return transactions only for these `account.id`s.
          name: account__in
          in: query
          schema:
            type: string
            example: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
        - description: >-
            Return information only for transactions matching this account type,
            as designated by the institution.
          name: account_type
          in: query
          schema:
            type: string
            example: Cuentas de efectivo
        - description: >-
            Return information only for transactions matching these account
            types, as designated by the institution.
          name: account_type__in
          in: query
          schema:
            type: string
            example: Cuentas de efectivo,Depositos Ahorro
        - description: >-
            Return transactions that were processed by the institution on
            exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: accounting_date
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return transactions that were processed by the institution after
            this date (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: accounting_date__gt
          in: query
          schema:
            type: string
            example: '2022-05-06'
        - description: >-
            Return transactions that were processed by the institution on this
            date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: accounting_date__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return transactions that were processed by the institution before
            this date (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: accounting_date__lt
          in: query
          schema:
            type: string
            example: '2022-03-02'
        - description: >-
            Return transactions that were processed by the institution on this
            date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: accounting_date__lte
          in: query
          schema:
            type: string
            example: '2022-03-01'
        - description: >-
            Return transactions that were processed by the institution in this
            date range (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: accounting_date__range
          in: query
          schema:
            type: string
            example: 2022-03-01,2022-05-06
        - description: Return transactions matching exactly this value.
          name: amount
          in: query
          schema:
            type: string
            example: '1000.00'
        - description: Return transactions greater than this value.
          name: amount__gt
          in: query
          schema:
            type: string
            example: '520.00'
        - description: Return transactions greater than or equal to this value.
          name: amount__gte
          in: query
          schema:
            type: string
            example: '519.00'
        - description: Return transactions less than this value.
          name: amount__lt
          in: query
          schema:
            type: string
            example: '540.00'
        - description: Return transactions less than or equal to this value.
          name: amount__lte
          in: query
          schema:
            type: string
            example: '541.00'
        - description: Return transactions between these two values.
          name: amount__range
          in: query
          schema:
            type: string
            example: 519.00,541.00
        - description: >-
            Return transactions that were retrieved from the institution on this
            date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: collected_at
          in: query
          schema:
            type: string
            example: '2022-05-01'
        - description: >-
            Return transactions that were retrieved from the institution after
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: collected_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return transactions that were retrieved from the institution after
            or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: collected_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return transactions that were retrieved from the institution before
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: collected_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return transactions that were retrieved from the institution before
            or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: collected_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return transactions that were retrieved from the institution between
            two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: collected_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: >-
            Return transactions that were last updated in Belvo's database on
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-05-01'
        - description: >-
            Return transactions that were last updated in Belvo's database after
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return transactions that were last updated in Belvo's database after
            or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return transactions that were last updated in Belvo's database
            before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return transactions that were last updated in Belvo's database
            before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return transactions that were last updated in Belvo's database
            between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return transactions for one of these bill names.
          name: credit_card_data__bill_name__in
          in: query
          schema:
            type: string
            example: maio-2022,feb-2022
        - description: Return transactions in only this three-letter currency code.
          name: currency
          in: query
          schema:
            type: string
            example: COP
        - description: Return transactions in one of these three-letter currency codes.
          name: currency__in
          in: query
          schema:
            type: string
            example: COP,MXN
        - description: >-
            Returns transactions with this institution-assigned reference
            number.
          name: reference
          in: query
          schema:
            type: string
            example: '085904452810319225'
        - description: >-
            Returns transactions with these institution-assigned reference
            numbers.
          name: reference__in
          in: query
          schema:
            type: string
            example: 085904452810319225,8703
        - description: >-
            Return transactions with this status. Can be either `PENDING`,
            `PROCESSED`, or `UNCATEGORIZED`.
          name: status
          in: query
          schema:
            type: string
            example: PENDING
        - description: >-
            Return transactions with these statuses. Can be either `PENDING`,
            `PROCESSED`, or `UNCATEGORIZED`.
          name: status__in
          in: query
          schema:
            type: string
            example: PENDING,PROCESSED
        - description: >-
            Return transactions with this type. Can be either `INFLOW` or
            `OUTFLOW`.
          name: type
          in: query
          schema:
            type: string
            example: OUTFLOW
        - description: >-
            Return transactions with this types. Can be either `INFLOW` or
            `OUTFLOW`.
          name: type__in
          in: query
          schema:
            type: string
            example: INFLOW,OUTFLOW
        - description: >-
            Return transactions that occurred on exactly this date (`YYYY-MM-DD`
            or full ISO-8601 timestamp).
          name: value_date
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return transactions that occurred after this date (`YYYY-MM-DD` or
            full ISO-8601 timestamp).
          name: value_date__gt
          in: query
          schema:
            type: string
            example: '2022-05-06'
        - description: >-
            Return transactions that occurred on this date or later
            (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: value_date__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return transactions that occurred before this date (`YYYY-MM-DD` or
            full ISO-8601 timestamp).
          name: value_date__lt
          in: query
          schema:
            type: string
            example: '2022-03-02'
        - description: >-
            Return transactions that occurred on this date or earlier
            (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: value_date__lte
          in: query
          schema:
            type: string
            example: '2022-03-01'
        - description: >-
            Return transactions for this date range (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: value_date__range
          in: query
          schema:
            type: string
            example: 2022-03-01,2022-05-06
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsPaginatedResponse'
              examples:
                TransactionsCheckingPaginated:
                  $ref: '#/components/examples/TransactionsCheckingPaginated'
                TransactionsSavingsPaginated:
                  $ref: '#/components/examples/TransactionsSavingsPaginated'
                TransactionsCreditCardPaginated:
                  $ref: '#/components/examples/TransactionsCreditCardPaginated'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/transactions/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List transactions
              for transaction in client.Transactions.list():
                  pprint(transaction)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.transactions.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.transactions.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Transactions
      summary: Retrieve transactions for a link
      operationId: Transactions_retrieve
      description: >
        Retrieve transactions for one or more accounts from a specific link.

        <div style="background-color:#f4f6f8; border-left: 6px solid
        #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px"> <strong>Info: </strong> When retrieving
        transactions, it is important to understand that the available
        transaction data ranges depend on each institution. <br><br>

        If you try to access older information than what we can access, we will
        return all the data we can read within that date range. For example, if
        you request transactions for the last year and we can only access the
        last six months, we will return the information corresponding to these
        six months of data. </div>
      parameters:
        - in: header
          name: X-Belvo-Request-Mode
          schema:
            description: >
              Recommended header parameter to make your POST request to retrieve
              transactions asynchronous (thus preventing timeouts).


              When you make a asynchronous request, Belvo responds with a `202 -
              Accepted` payload, including the `request_id`. Once we have
              retrieved the transaction information, you will receive a
              `new_transactions_available` webhook with the link and request
              IDs.



              **Note**: This parameter is case sensitive (in other words, if you
              write `ASYNC`, then Belvo will default to a synchronous call).
            type: string
            enum:
              - async
            example: async
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionsRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsRetrieveResponse'
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsRetrieve201Response'
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
        '202':
          description: Accepted (when `X-Belvo-Request-Mode` is `async`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsynchronousAccepted202'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/transactions/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "",
                  "account": "",
                  "date_from": "",
                  "date_to": ""
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve transactions
              transactions = client.Transactions.create(
                "link_id",
                "2019-07-01",
                date_to="2019-07-31"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              transactions = sandbox.transactions.retrieve(
                link: 'link_id',
                date_from: '2022-01-01',
                options: {
                  account: account, //optional
                  date_to: '2022-01-24'
                }
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Transactions
      summary: Complete a transactions request
      operationId: Transactions_completeRequest
      description: >-
        Used to resume a Transaction retrieve session that was paused because an
        MFA token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsCompleteRequestResponse'
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsCompleteRequest201Response'
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsChecking'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavings'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCard'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsCompleteRequest400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsCompleteRequest401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsCompleteRequest408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsCompleteRequest500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PATCH \
                https://sandbox.belvo.com/api/transactions/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Resume transactions
              transactions = client.Transactions.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.transactions.resume(
                session: 'session-id',
                token: 'token',
                link: 'link-id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get a transaction's details
      operationId: Transactions_getDetails
      description: Get the details of a specific transaction.
      parameters:
        - description: The `transaction.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
              examples:
                TransactionsChecking:
                  $ref: '#/components/examples/TransactionsCheckingDetail'
                TransactionsSavings:
                  $ref: '#/components/examples/TransactionsSavingsDetail'
                TransactionsCreditCard:
                  $ref: '#/components/examples/TransactionsCreditCardDetail'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/transactions/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get a transaction
              transaction = client.Transactions.get(id="transaction-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.transactions.detail id: 'transaction-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.transactions.detail('transactionId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Transactions
      summary: Delete a transaction
      operationId: Transactions_delete
      description: Delete a specific transaction from your Belvo account.
      parameters:
        - description: The `transaction.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/transactions/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete a transaction
              client.Transactions.delete("transaction-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.transactions.delete id: 'transaction-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.transactions.delete('transactionId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/balances:
    get:
      tags:
        - Balances
      summary: List all balances
      operationId: Balances_list
      description: >-
        Get a paginated list of all existing balances in your Belvo account. By
        default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
            `account.id` filters in order to improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >
            The `account.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
            `account.id` filters in order to improve your performance.
          name: account
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: Return balances only for these `account.id`s.
          name: account__in
          in: query
          schema:
            type: string
            example: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
        - description: >-
            Return information only for accounts matching this account type, as
            designated by the institution.
          name: account__type
          in: query
          schema:
            type: string
            example: Cuentas de efectivo
        - description: >-
            Return information only for accounts matching these account types,
            as designated by the institution.
          name: account__type__in
          in: query
          schema:
            type: string
            example: Cuentas de efectivo,Credito
        - description: Return balances matching exactly this value.
          name: balance
          in: query
          schema:
            type: string
            example: '530.00'
        - description: Return balances less than this value.
          name: balance__lt
          in: query
          schema:
            type: string
            example: '540.00'
        - description: Return balances less than or equal to this value.
          name: balance__lte
          in: query
          schema:
            type: string
            example: '541.00'
        - description: Return balances greater than this value.
          name: balance__gt
          in: query
          schema:
            type: string
            example: '520.00'
        - description: Return balances greater than or equal to this value.
          name: balance__gte
          in: query
          schema:
            type: string
            example: '519.00'
        - description: Return balances between these two values.
          name: balance__range
          in: query
          schema:
            type: string
            example: 519.00,541.00
        - description: Return balances that are in this three-letter currency code.
          name: currency
          in: query
          schema:
            type: string
            example: COP
        - description: Return balances that are in these three-letter currency codes.
          name: currency__in
          in: query
          schema:
            type: string
            example: COP,MXN
        - description: Return information only for this `balance.id`.
          name: id
          in: query
          schema:
            type: string
            example: 73694155-b871-41ec-94e3-37d17ff62b5d
        - description: Return information only for these `balance.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
        - description: >-
            Return balances only for this institution (use the Belvo-designated
            name, such as `erebor_mx_retail`).
          name: institution
          in: query
          schema:
            type: string
            example: erebor_mx_retail
        - description: >-
            Return balances only for these institutions (use the
            Belvo-designated names, such as `erebor_mx_retail` and
            `gringotts_mx_retail`).
          name: institution__in
          in: query
          schema:
            type: string
            example: erebor_mx_retail,gringotts_mx_retail
        - description: Return balances only for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
        - description: >-
            Return balances for exactly this date (`YYYY-MM-DD` or full ISO-8601
            timestamp).
          name: value_date
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return balances for after this date (`YYYY-MM-DD` or full ISO-8601
            timestamp).
          name: value_date__gt
          in: query
          schema:
            type: string
            example: '2022-05-06'
        - description: >-
            Return balances for this date or later (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: value_date__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return balances for before this date (`YYYY-MM-DD` or full ISO-8601
            timestamp).
          name: value_date__lt
          in: query
          schema:
            type: string
            example: '2022-03-02'
        - description: >-
            Return balances for this date or earlier (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: value_date__lte
          in: query
          schema:
            type: string
            example: '2022-03-01'
        - description: >-
            Return balances for this date range (`YYYY-MM-DD` or full ISO-8601
            timestamp).
          name: value_date__range
          in: query
          schema:
            type: string
            example: 2022-03-01,2022-05-06
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesPaginatedResponse'
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExamplePaginated'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/balances/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List balances
              for balance in client.Balances.list():
                  pprint(balance)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.balances.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.balances.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Balances
      summary: Retrieve balances for a link
      operationId: Balances_retrieve
      description: >-
        Retrieve balances from one or more accounts for a specific link within a
        specified date range.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalancesRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesRetrieveResponse'
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesRetrieve201Response'
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/balances/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "",
                  "account": "",
                  "date_from": "",
                  "date_to": ""
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve balances
              balances = client.Balances.create(
                "link_id",
                "2019-07-01",
                date_to="2019-07-31"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.balances.retrieve(
                link: 'link-id',
                date_from: '2019-07-01',
                date_to: '2019-07-31'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.balances.retrieve('linkId', '2019-07-01', { 'dateTo': '2019-07-31' })
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Balances
      summary: Complete a balances request
      operationId: Balances_completeRequest
      description: >-
        Used to resume a Balance retrieve session that was paused because an MFA
        token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesCompleteRequestResponse'
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesCompleteRequest201Response'
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExample'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesCompleteRequest400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesCompleteRequest401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesCompleteRequest408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesCompleteRequest500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PATCH \
                https://sandbox.belvo.com/api/balances/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Resume balances
              balances = client.Balances.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.balances.resume(
                session: 'session-id',
                token: 'token',
                link: 'link-id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.balances.resume('sessionId', 'token', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/balances/{id}:
    get:
      tags:
        - Balances
      summary: Get a balance's details
      operationId: Balances_getDetails
      description: Get the details of a specific balance.
      parameters:
        - description: The `balance.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
              examples:
                BalancesExamplePaginated:
                  $ref: '#/components/examples/BalancesExampleDetail'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/balances/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get a balance
              balance = client.Balances.get(id="balance-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.balances.detail id: 'balance-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.balances.detail('balanceId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Balances
      summary: Delete a balance
      operationId: Balances_delete
      description: Delete a specific balance from your Belvo account.
      parameters:
        - description: The `balance.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/balance/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete a balance
              client.Balances.delete("balance-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.balances.delete id: 'balance-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.balances.delete('balanceId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/institutions:
    get:
      tags:
        - Institutions
      summary: List all institutions
      operationId: Institutions_list
      description: >-
        Get a paginated list of all the institutions currently supported by
        Belvo. By default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: Return institutions only for this two-letter country code.
          name: country_code
          in: query
          schema:
            type: string
            example: MX
        - description: Return institutions only for these two-letter country codes.
          name: country_code__in
          in: query
          schema:
            type: string
            example: CO,BR
        - description: Return institutions that partially match this display name.
          name: display_name
          in: query
          schema:
            type: string
            example: Erebor Bank
        - name: name
          in: query
          schema:
            type: string
        - description: >-
            Return institutions with one or more of these Belvo-designated
            names.
          name: name__in
          in: query
          schema:
            type: string
            example: erebor_br_retail,gotham_co_business
        - description: Return institutions that support these resources.
          name: resources__allin
          in: query
          schema:
            type: string
            example: ACCOUNTS,OWNERS,TRANSACTIONS
        - description: >-
            Return institutions with the given status. You can choose between
            `healthy` or `down`.
          name: status
          in: query
          schema:
            type: string
            example: healthy
        - description: >-
            Return institutions with one of the given statuses. You can choose
            between `healthy` or `down`.
          name: status__in
          in: query
          schema:
            type: string
            example: healthy,down
        - description: >-
            Return institutions of this type. You can choose between `bank` or
            `fiscal`.
          name: type
          in: query
          schema:
            type: string
            example: fiscal
        - description: >-
            Return institutions of one of these types. You can choose between
            `bank` or `fiscal`.
          name: type__in
          in: query
          schema:
            type: string
            example: fiscal,bank
        - description: Return institutions with this website URL.
          name: website
          in: query
          schema:
            type: string
            example: https://www.erebor.mx
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionsPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionsListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/institutions/  \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List institutions
              for institution in client.Institutions.list():
                  pprint(institution)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.institutions.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.institutions.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/institutions/{id}:
    get:
      tags:
        - Institutions
      summary: Get an institution's details
      operationId: Institutions_getDetails
      description: Get the details of a specific institution.
      parameters:
        - description: The `institution.id` you want to get detailed information about.
          name: id
          required: true
          in: path
          schema:
            type: string
            pattern: '[0-9]+'
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionsGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionsGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/institutions/{id}  \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get a institution
              institution = client.Institutions.get(id="institution_id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.institutions.detail id: 'institution-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.institutions.detail('institution_id')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/owners:
    get:
      tags:
        - Owners
      summary: List all owners
      operationId: Owners_list
      description: >-
        Get a paginated list of all existing owners in your Belvo account. We
        return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >-
            Return owners that were last updated in Belvo's database after this
            date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return owners that were last updated in Belvo's database after or on
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return owners that were last updated in Belvo's database before this
            date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return owners that were last updated in Belvo's database before or
            on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return owners that were last updated in Belvo's database between two
            dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: >-
            Return owners whose full display name partially matches your query.
            For example, `mar` will return results for Mark, Maria, Neymar,
            Remarque, and so on.
          name: display_name__icontains
          in: query
          schema:
            type: string
            example: Daniela
        - description: Returns owners whose email address match your query.
          name: email
          in: query
          schema:
            type: string
            example: lopes.d@gmail.com
        - description: Return information only for this `owner.id`.
          name: id
          in: query
          schema:
            type: string
            example: 73694155-b871-41ec-94e3-37d17ff62b5d
        - description: Return information only for these `owner.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
        - description: Return information only for this `link.id`.
          name: link
          in: query
          schema:
            type: string
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: Return balances only for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersPaginatedResponse'
              examples:
                OwnerBankingAccountPaginated:
                  $ref: '#/components/examples/OwnerBankingAccountPaginated'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/owners/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List owners
              for owner in client.Owners.list():
                  pprint(owner)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.owners.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.owners.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Owners
      summary: Retrieve owners for a link
      operationId: Owners_retrieve
      description: Retrieve owner information from a specific link.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersRetrieveResponse'
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersRetrieve201Response'
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/owners/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": ""
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve owners
              owners = client.Owners.create(
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.owners.retrieve(link: 'link-id')
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.owners.retrieve('linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Owners
      summary: Complete an owners request
      operationId: Owners_completeRequest
      description: >-
        Used to resume an Owner retrieve session that was paused because an MFA
        token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersCompleteRequestResponse'
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersCompleteRequest201Response'
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccount'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersCompleteRequest400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersCompleteRequest401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersCompleteRequest408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersCompleteRequest500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PATCH \
                https://sandbox.belvo.com/api/owners/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Resume owners
              owners = client.Owners.resume(
                session="session-id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.owners.resume(
                session: 'session-id',
                token: 'token',
                link: 'link-id',
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.owners.resume('yourSessionId', 'yourOTPToken', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/owners/{id}:
    get:
      tags:
        - Owners
      summary: Get an owner's details
      operationId: Owners_getDetails
      description: Get the details of a specific owner.
      parameters:
        - description: The `owner.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
              examples:
                OwnerBankingAccount:
                  $ref: '#/components/examples/OwnerBankingAccountDetail'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/owners/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get a owner
              owner = client.Owners.get(id="owner-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.owners.detail id: 'owner-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.owners.detail('ownerId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Owners
      summary: Delete an owner
      operationId: Owners_delete
      description: Delete a specific owner from your Belvo account.
      parameters:
        - description: The `owner.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/owners/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete a owner
              client.Owners.delete("owner-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.owners.delete id: 'owner-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.owners.delete('ownerId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/invoices:
    get:
      tags:
        - Invoices
      summary: List all invoices
      operationId: Invoices_list
      description: >-
        Get a paginated list of all existing invoices in your Belvo account. By
        default, we return 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >-
            Return invoices that were last updated in Belvo's database after
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return invoices that were last updated in Belvo's database after or
            on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return invoices that were last updated in Belvo's database before
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return invoices that were last updated in Belvo's database before or
            on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return invoices that were last updated in Belvo's database between
            two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return information only for this `invoice.id`.
          name: id
          in: query
          schema:
            type: string
            example: 73694155-b871-41ec-94e3-37d17ff62b5d
        - description: Return information only for these `invoice.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
        - description: >-
            Return invoices issued exactly on this date (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: invoice_date
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return balances issued before this date (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: invoice_date__lt
          in: query
          schema:
            type: string
            example: '2022-03-02'
        - description: >-
            Return balances issued on this date or earlier (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: invoice_date__lte
          in: query
          schema:
            type: string
            example: '2022-03-01'
        - description: >-
            Return invoices issued after this date (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: invoice_date__gt
          in: query
          schema:
            type: string
            example: '2022-05-06'
        - description: >-
            Return invoices issued on this date or later (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: invoice_date__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return invoices issued within this date range (`YYYY-MM-DD` or full
            ISO-8601 timestamp).
          name: invoice_date__range
          in: query
          schema:
            type: string
            example: 2022-03-01,2022-05-06
        - description: Return an invoice with this ID (as provided by the insitution).
          name: invoice_identification
          in: query
          schema:
            type: string
            example: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        - description: Return invoices with these IDs (as provided by the institution).
          name: invoice_identification__in
          in: query
          schema:
            type: string
            example: >-
              862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833
        - description: Return invoices only for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
        - description: >-
            Return invoices with this status. Can be either `Vigente` (valid) or
            `Cancelado` (cancelled).
          name: status
          in: query
          schema:
            type: string
            example: Vigente
        - description: >-
            Return invoices with these statuses. Can be either `Vigente` (valid)
            or `Cancelado` (cancelled).
          name: status__in
          in: query
          schema:
            type: string
            example: Vigente,Cancelado
        - description: Return invoices matching exactly this value.
          name: total_amount
          in: query
          schema:
            type: string
            example: '1000.00'
        - description: Return invoices less than this value.
          name: total_amount__lt
          in: query
          schema:
            type: string
            example: '540.00'
        - description: Return invoices less than or equal to this value.
          name: total_amount__lte
          in: query
          schema:
            type: string
            example: '541.00'
        - description: Return invoices greater than this value.
          name: total_amount__gt
          in: query
          schema:
            type: string
            example: '520.00'
        - description: Return invoices greater than or equal to this value.
          name: total_amount__gte
          in: query
          schema:
            type: string
            example: '519.00'
        - description: Return invoices between these two values.
          name: total_amount__range
          in: query
          schema:
            type: string
            example: 519.00,541.00
        - description: Return invoices of this type. Can be either `OUTFLOW` or `INFLOW`.
          name: type
          in: query
          schema:
            type: string
            example: OUTFLOW
        - description: Return invoices of these types. Can be either `OUTFLOW` or `INFLOW`.
          name: type__in
          in: query
          schema:
            type: string
            example: OUTFLOW,INFLOW
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesResponsePaginatedResponse'
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngresoPaginated'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePagoPaginated'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNominaPaginated'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgresoPaginated'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTrasladoPaginated'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/invoices/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List Invoices
              for invoice in client.Invoices.list():
                  pprint(invoice)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.invoices.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.invoices.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
                });
    post:
      tags:
        - Invoices
      summary: Retrieve invoices for a link
      operationId: Invoices_retrieve
      description: >
        Retrieve invoice information from a specific fiscal link.

        <div style="background-color:#f4f6f8; border-left: 6px solid
        #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px"> <strong>Info: </strong> You can ask for up to
        **one** year (365 days) of invoices per request. If you need invoices
        for more than one year, just make another request. </div>
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoicesRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesRetrieveResponse'
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngreso'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePago'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNomina'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgreso'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTraslado'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesRetrieve201Response'
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngreso'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePago'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNomina'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgreso'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTraslado'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesRetrieve408Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/invoices/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "",
                  "date_from": "YYYY-MM-DD",
                  "date_to": "YYYY-MM-DD",
                  "type": "OUTFLOW"
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            code: >
              # check our python-client library on github

              # https://github.com/belvo-finance/belvo-python

              from pprint import pprint

              from belvo.client import Client


              # Login to Belvo API

              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")


              # List Invoices

              for invoice in client.Invoices.create('link-id', '2019-07-01',
              '2019-07-31', 'OUTFLOW'):
                  pprint(invoice)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.invoices.retrieve(
                link: 'link-id',
                date_from: '2019-07-01',
                date_to: '2019-07-31',
                type: 'OUTFLOW'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
                });
    patch:
      tags:
        - Invoices
      summary: Complete an invoices request
      operationId: Invoices_completeRequest
      description: >-
        Used to resume an Invoice retrieve session that was paused because an
        MFA token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesCompleteRequestResponse'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesCompleteRequest201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesCompleteRequest400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesCompleteRequest401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesCompleteRequest408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesCompleteRequest500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PATCH \
                https://api.belvo.com/api/invoices/ \
                -H 'Content-Type: application/json' \
                -H 'Host: api.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            code: >
              # check our python-client library on github

              # https://github.com/belvo-finance/belvo-python

              from belvo.client import Client


              # Login to Belvo API

              client = Client("Secret Key ID", "Secret Key PASSWORD",
              "https://api.belvo.com")


              # Resume incomes

              incomes = client.Invoices.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              )

              client.invoices.resume(
                session: 'session_id',
                token: 'token',
                link: 'link_id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              );

              client.connect()
                .then(function () {
                  client.invoices.resume('sessionId', 'token', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/invoices/{id}:
    get:
      tags:
        - Invoices
      summary: Get an invoice's details
      operationId: Invoices_getDetails
      description: Get the details of a specific invoice.
      parameters:
        - description: The `invoice.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesGetDetailsResponse'
              examples:
                InvoiceIngresso:
                  $ref: '#/components/examples/InvoiceIngresoDetail'
                InvoicePago:
                  $ref: '#/components/examples/InvoicePagoDetail'
                InvoiceNomina:
                  $ref: '#/components/examples/InvoiceNominaDetail'
                InvoiceEgreso:
                  $ref: '#/components/examples/InvoiceEgresoDetail'
                InvoiceTraslado:
                  $ref: '#/components/examples/InvoiceTrasladoDetail'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesGetDetails401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/invoices/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              invoice = client.Invoices.detail('invoice-id'):
              pprint(invoice)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.invoices.detail id: 'invoice-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.invoices.detail('invoiceId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
                });
    delete:
      tags:
        - Invoices
      summary: Delete an invoice
      operationId: Invoices_delete
      description: Delete a specific invoice from your Belvo account.
      parameters:
        - description: The `invoice.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicesDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/invoices/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete Invoice
              client.Invoices.delete('invoice-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.invoices.delete id: 'invoice-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.invoices.delete('invoiceId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
                });
  /api/tax-returns:
    get:
      tags:
        - Tax returns
      summary: List all tax returns
      operationId: TaxReturns_list
      description: >-
        Get a paginated list of all existing tax returns in your Belvo account.
        By default, we return up to 100 results per page. The results will
        include a mix of both monthly and yearly tax returns.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >-
            Return tax returns that were last updated in Belvo's database after
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return tax returns that were last updated in Belvo's database after
            or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return tax returns that were last updated in Belvo's database before
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return tax returns that were last updated in Belvo's database before
            or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return tax returns that were last updated in Belvo's database
            between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return information for this `tax-return.id`.
          name: id
          in: query
          schema:
            type: string
            example: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
        - description: Return information for these `tax-return.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
        - description: Return tax returns for exactly this year (`YYYY`).
          name: ejercicio
          in: query
          schema:
            type: string
            example: '2018'
        - description: Return tax returns for before this year (`YYYY`).
          name: ejercicio__lt
          in: query
          schema:
            type: string
            example: '2020'
        - description: Return tax returns for this year and earlier (`YYYY`).
          name: ejercicio__lte
          in: query
          schema:
            type: string
            example: '2021'
        - description: Return tax returns for after this year (`YYYY`).
          name: ejercicio__gt
          in: query
          schema:
            type: string
            example: '2019'
        - description: Return tax returns for this year or later (`YYYY`).
          name: ejercicio__gte
          in: query
          schema:
            type: string
            example: '2017'
        - description: Return tax returns for this range of years (`YYYY`).
          name: ejercicio__range
          in: query
          schema:
            type: string
            example: 2015,2021
        - description: Return tax returns with this declaration type.
          name: tipo_declaracion
          in: query
          schema:
            type: string
            example: Normal
        - description: Return tax returns with these declaration types.
          name: tipo_declaracion__in
          in: query
          schema:
            type: string
            example: Normal,Commercial
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsListResponse'
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalListPaginated'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: >-
                    #/components/examples/TaxReturnPersonalListMonthlyPaginatedPFAE
                TaxReturnPersonalMonthlyPFAI:
                  $ref: >-
                    #/components/examples/TaxReturnPersonalListMonthlyPaginatedPFAI
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessListPaginated'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthlyPaginated'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsList401Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-returns/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List tax returns
              for tax_return in client.TaxReturns.list()
                pprint(tax_return)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_returns.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxReturns.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Tax returns
      summary: Retrieve tax returns for a link
      operationId: TaxReturns_retrieve
      description: Retrieve tax return information for a specific fiscal link.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxReturnsRetrieveRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsRetrieveResponse'
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalList'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAE'
                TaxReturnPersonalMonthlyPFAI:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAI'
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessList'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthly'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsRetrieve201Response'
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalList'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAE'
                TaxReturnPersonalMonthlyPFAI:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAI'
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessList'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthly'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |-
              ### Yearly Tax Returns
              curl -X POST \
                https://sandbox.belvo.com/api/tax-returns/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "",
                  "year_from": YYYY,
                  "year_to": YYYY,
                  "attach_pdf": false
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]

              ### Monthly Tax Returns
              curl -X POST \
                https://sandbox.belvo.com/api/tax-returns/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "",
                  "date_from": "2019-01-01",
                  "date_to": "2019-04-01",
                  "type": "monthly",
                  "attach_pdf": false
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |-
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Yearly Tax Returns
              tax_returns = client.TaxReturns.create(
                link="link_id",
                year_from="2019",
                year_to="2020",
                attach_pdf=True
              )

              # Monthly Tax Returns
              tax_returns = client.TaxReturns.create(
                link="link_id",
                date_from="2019-01-01",
                date_to="2019-04-01",
                attach_pdf=True,
                type_="monthly"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              # Yearly Tax Returns
              sandbox.tax_returns.retrieve(
                link: 'link-id',
                year_from: "2019",
                year_to: "2020"
              )

              # Monthly Tax Returns
              sandbox.tax_returns.retrieve(
                link: 'some-link-uuid',
                options: {
                  type: TaxReturnType::MONTHLY,
                  date_from: '2019-01-01',
                  date_to: '2019-04-01',
                }
                    )
          - language: node
            name: Belvo Node SDK
            code: |-
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              // Yearly Tax Returns
              client.connect()
                .then(function () {
                  client.taxReturns.retrieve('linkID', "2019", "2020")
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });

              // Monthly Tax Returns

              client.connect()
                .then(function () {
                  client.taxReturns.retrieve('linkID', "2019-01-01", "2019-04-01", {type: 'monthly'})
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/tax-returns/{id}:
    get:
      tags:
        - Tax returns
      summary: Get a tax return's details
      operationId: TaxReturns_getDetails
      description: Get the details of a specific tax return.
      parameters:
        - description: The `tax-return.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsGetDetailsResponse'
              examples:
                TaxReturnPersonal:
                  $ref: '#/components/examples/TaxReturnPersonalListDetail'
                TaxReturnPersonalMonthlyPFAE:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAEDetail'
                TaxReturnPersonalMonthlyPFAI:
                  $ref: '#/components/examples/TaxReturnPersonalListMonthlyPFAIDetail'
                TaxReturnBusiness:
                  $ref: '#/components/examples/TaxReturnBusinessListDetail'
                TaxReturnBusinessMonthly:
                  $ref: '#/components/examples/TaxReturnBusinessListMonthlyDetail'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsGetDetails401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-returns/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get a tax return
              tax_return = client.TaxReturns.get(id="tax-return-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_returns.detail id: 'tax-return-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxReturns.detail('taxReturnId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Tax returns
      summary: Delete a tax return
      operationId: TaxReturns_delete
      description: Delete a specific tax return from your Belvo account.
      parameters:
        - description: The ID of the tax return you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxReturnsDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/tax-returns/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete a tax return
              client.TaxReturns.delete("tax-return-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_returns.delete id: 'tax-return-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxReturns.delete('taxReturnId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/tax-status:
    get:
      tags:
        - Tax status
      summary: List all tax statuses
      operationId: TaxStatus_list
      description: >-
        Get a paginated list of all existing tax status in your Belvo account.
        By default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >-
            Return tax statuses that were last updated in Belvo's database after
            this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return tax statuses that were last updated in Belvo's database after
            or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return tax statuses that were last updated in Belvo's database
            before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return tax statuses that were last updated in Belvo's database
            before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return tax statuses that were last updated in Belvo's database
            between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return information for this `tax-status.id`.
          name: id
          in: query
          schema:
            type: string
            example: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
        - description: Return information for these `tax-status.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusPaginatedResponse'
              examples:
                TaxStatusPersonalListPaginated:
                  $ref: '#/components/examples/TaxStatusPersonalListPaginated'
                TaxStatusBusinessListPaginated:
                  $ref: '#/components/examples/TaxStatusBusinessListPaginated'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-status/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List tax status
              client.TaxStatus.list()
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_status.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxStatus.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Tax status
      summary: Retrieve tax statuses for a link
      operationId: TaxStatus_retrieve
      description: Retrieve tax status information for a specific fiscal link.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxStatusRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusRetrieveResponse'
              examples:
                TaxStatusPersonal:
                  $ref: '#/components/examples/TaxStatusPersonalList'
                TaxStatusBusiness:
                  $ref: '#/components/examples/TaxStatusBusinessList'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusRetrieve201Response'
              examples:
                TaxStatusPersonal:
                  $ref: '#/components/examples/TaxStatusPersonalList'
                TaxStatusBusiness:
                  $ref: '#/components/examples/TaxStatusBusinessList'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusRetrieve408Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/tax-status/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "link-id",
                  "attach_pdf": false
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve tax status
              client.TaxStatus.create('link-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_status.retrieve(
                link: 'link-id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxStatus.retrieve('linkID')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/tax-status/{id}:
    get:
      tags:
        - Tax status
      summary: Get a tax status's details
      operationId: TaxStatus_getDetails
      description: Get the details of a specific tax status.
      parameters:
        - description: The `tax-status.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusGetDetailsResponse'
              examples:
                TaxStatusPersonal:
                  $ref: '#/components/examples/TaxStatusPersonalList'
                TaxStatusBusiness:
                  $ref: '#/components/examples/TaxStatusBusinessList'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusGetDetails401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-status/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get tax status
              client.TaxStatus.get('tax-status-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_status.detail id: 'tax-status-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxStatus.detail('taxStatusId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Tax status
      summary: Delete a tax status
      operationId: TaxStatus_delete
      description: Delete a specific tax status from your Belvo account.
      parameters:
        - description: the `tax-status.id` that you want to delete
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxStatusDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/tax-status/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete tax status
              client.TaxStatus.delete('tax-status-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_status.delete id: 'tax-status-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxStatus.delete('taxStatusId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/tax-compliance-status:
    get:
      tags:
        - Tax compliance status
      summary: List all tax compliance statuses
      operationId: TaxComplianceStatus_list
      description: >-
        Get a paginated list of all existing Tax compliance statuses in your
        Belvo account. By default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >-
            Return tax compliance statuses that were last updated in Belvo's
            database after this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return tax compliance statuses that were last updated in Belvo's
            database after or on this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return tax compliance statuses that were last updated in Belvo's
            database before this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return tax compliance statuses that were last updated in Belvo's
            database before or on this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return tax compliance statuses that were last updated in Belvo's
            database between two dates (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return information for this `tax-compliance-status.id`.
          name: id
          in: query
          schema:
            type: string
            example: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
        - description: Return information for these `tax-compliance-status.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-compliance-status/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List Tax compliance status
              client.TaxComplianceStatus.list()
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.tax_compliance_status.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxComplianceStatus.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Tax compliance status
      summary: Retrieve tax compliance statuses for a link
      operationId: TaxComplianceStatus_retrieve
      description: >-
        Retrieve the Tax compliance status information for a specific fiscal
        link.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxComplianceStatusRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatus'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatus'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusRetrieveResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusRetrieve408Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://sandbox.belvo.com/api/tax-compliance-status/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "link-id",
                  "attach_pdf": false
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve Tax compliance status
              client.TaxComplianceStatus.create('link-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.tax_compliance_status.retrieve(
                link: 'link-id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxComplianceStatus.retrieve('linkID')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/tax-compliance-status/{id}:
    get:
      tags:
        - Tax compliance status
      summary: Get a tax compliance status's details
      operationId: TaxComplianceStatus_getDetails
      description: Get the details of a specific Tax compliance status.
      parameters:
        - description: >-
            The `tax-compliance-status.id` you want to get detailed information
            about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatus'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get Tax compliance status
              client.TaxComplianceStatus.get('tax-compliance-status-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_status.detail id: 'tax-compliance-status-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxComplianceStatus.detail('taxComplianceStatusId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Tax compliance status
      summary: Delete a tax compliance status
      operationId: TaxComplianceStatus_delete
      description: Delete a specific Tax compliance status from your Belvo account.
      parameters:
        - description: The `tax-compliance-status.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxComplianceStatusDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete Tax compliance status
              client.TaxComplianceStatus.delete('tax-compliance-status-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.tax_compliance_status.delete id: 'tax-compliance-status-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxComplianceStatus.delete('taxComplianceStatusId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/incomes:
    get:
      tags:
        - Incomes
      summary: List all incomes
      operationId: Incomes_list
      description: >-
        Get a paginated list of all incomes in your Belvo account. By default,
        we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `account.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `account.id` filter in order to
            improve your performance.
          name: account
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: Return incomes for these `account.id`s.
          name: account__in
          in: query
          schema:
            type: string
            example: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
            `account.id` filters in order to improve your performance.
          name: link
          in: query
          schema:
            type: string
            example: 73694155-b871-41ec-94e3-37d17ff62b5d
        - description: Return incomes only for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesListResponse'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://api.belvo.com/api/incomes/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            code: >
              # check our python-client library on github

              # https://github.com/belvo-finance/belvo-python

              from pprint import pprint

              from belvo.client import Client


              # Login to Belvo API

              client = Client("Secret Key ID", "Secret Key PASSWORD",
              "https://api.belvo.com")


              # List incomes

              for income in client.Incomes.list():
                  pprint(income)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              )

              client.incomes.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              );

              client.connect()
                .then(function () {
                  client.incomes.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Incomes
      summary: Retrieve incomes for a link
      operationId: Incomes_retrieve
      description: >-
        Retrieve income insights for <b>checking and savings accounts</b> from a
        specific link. You can receive insights for a period of up to 365 days,
        depending on the transaction history available for each
        [bank](https://developers.belvo.com/docs/institution).
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomesRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesRetrieveResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X POST \
                https://api.belvo.com/api/incomes/ \
                -H 'Content-Type: application/json' \
                -H 'Host: api.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": ""
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            code: >
              # check our python-client library on github

              # https://github.com/belvo-finance/belvo-python

              from belvo.client import Client


              # Login to Belvo API

              client = Client("Secret Key ID", "Secret Key PASSWORD",
              "https://api.belvo.com")


              # Retrieve incomes

              incomes = client.Incomes.create(
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              )

              client.incomes.retrieve link: 'link-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              );

              client.connect()
                .then(function () {
                  client.incomes.retrieve('link-id')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Incomes
      summary: Complete an incomes request
      operationId: Incomes_completeRequest
      description: >-
        Used to resume an Income retrieve session that was paused because an MFA
        token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesCompleteRequestResponse'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesCompleteRequest201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesCompleteRequest400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesCompleteRequest401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesCompleteRequest408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesCompleteRequest500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X PATCH \
                https://api.belvo.com/api/incomes/ \
                -H 'Content-Type: application/json' \
                -H 'Host: api.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                    "session": "",
                    "token": "",
                    "link": ""
                }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            code: >
              # check our python-client library on github

              # https://github.com/belvo-finance/belvo-python

              from belvo.client import Client


              # Login to Belvo API

              client = Client("Secret Key ID", "Secret Key PASSWORD",
              "https://api.belvo.com")


              # Resume incomes

              incomes = client.Incomes.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              )

              client.incomes.resume(
                session: 'session_id',
                token: 'token',
                link: 'link_id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              );

              client.connect()
                .then(function () {
                  client.incomes.resume('sessionId', 'token', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/incomes/{id}:
    get:
      tags:
        - Incomes
      summary: Get an income's details
      operationId: Incomes_getDetails
      description: Get the details of a specific income.
      parameters:
        - description: The `income.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesGetDetailsResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesGetDetails401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://api.belvo.com/api/incomes/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            code: >
              # check our python-client library on github

              # https://github.com/belvo-finance/belvo-python

              from belvo.client import Client


              # Login to Belvo API

              client = Client("Secret Key ID", "Secret Key PASSWORD",
              "https://api.belvo.com")


              # Get an income

              income = client.Incomes.get(id="income-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              )

              client.incomes.detail id: 'income-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              );

              client.connect()
                .then(function () {
                  client.incomes.detail('incomeId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Incomes
      summary: Delete an income
      operationId: Incomes_delete
      description: Delete a specific income from your Belvo account.
      parameters:
        - description: the `income.id` that you want to delete
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomesDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://api.belvo.com/api/incomes/{id}/ \
                -H 'Host: api.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            code: >
              # check our python-client library on github

              # https://github.com/belvo-finance/belvo-python

              from belvo.client import Client


              # Login to Belvo API

              client = Client("Secret Key ID", "Secret Key PASSWORD",
              "https://api.belvo.com")


              # Delete an income

              client.Incomes.delete("income-id")
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              )

              client.incomes.delete id: 'income-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'https://api.belvo.com'
              );

              client.connect()
                .then(function () {
                  client.incomes.delete('incomeId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/recurring-expenses:
    get:
      tags:
        - Recurring Expenses
      summary: List all recurring expenses
      operationId: RecurringExpenses_list
      description: >-
        Get a paginated list of all recurring expenses in your Belvo account. By
        default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
            `account.id` filters in order to improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >
            The `account.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
            `account.id` filters in order to improve your performance.
          name: account
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: Return recurring expenses for these `accound.id`s.
          name: account_in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e
        - description: Return information for this `recurring-expense.id`.
          name: id
          in: query
          schema:
            type: string
            example: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
        - description: Return information for these `recurring-expense.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesListResponse'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List Recurring Expenses
              for income in client.RecurringExpenses.list():
              pprint(income)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.recurring_expenses.list
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.recurringExpenses.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Recurring Expenses
      summary: Retrieve recurring expenses for a link
      operationId: RecurringExpenses_retrieve
      description: >-
        Retrieve recurring expense insights for <b>checking and savings
        accounts</b> from a specific link. You can receive insights for a period
        of up to 365 days, depending on the transaction history available for
        each [bank](https://developers.belvo.com/docs/institution).
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringExpensesRequest'
      responses:
        '200':
          description: Ok (when save_data=false)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesRetrieveResponse'
        '201':
          description: Created (when save_data=true)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesRetrieve201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesRetrieve500Response'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve Recurring Expense
              client.RecurringExpenses.create('link-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.recurring_expenses.retrieve(
                link: 'link-id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.recurringExpenses.retrieve('linkID')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Recurring Expenses
      summary: Complete a recurring expenses request
      operationId: RecurringExpenses_completeRequest
      description: >-
        Used to resume an Recurring Expenses retrieve session that was paused
        because an MFA token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when save_data=false)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesCompleteRequestResponse'
        '201':
          description: Created (when save_data=true)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringExpensesCompleteRequest201Response
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringExpensesCompleteRequest400Response
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringExpensesCompleteRequest401Response
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringExpensesCompleteRequest408Response
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringExpensesCompleteRequest428Response
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/RecurringExpensesCompleteRequest500Response
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Resume Recurring Expenses
              incomes = client.RecurringExpenses.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.recurring_expenses.resume(
                session: 'session_id',
                token: 'token',
                link: 'link_id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.recurringExpenses.resume('sessionId', 'token', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/recurring-expenses/{id}:
    get:
      tags:
        - Recurring Expenses
      summary: Get a recurring expense's details
      operationId: RecurringExpenses_getDetails
      description: Get the details of a specific recurring expense.
      parameters:
        - description: >-
            The `recurring-expenses.id` you want to get detailed information
            about.
          name: id
          in: path
          required: true
          schema:
            type: string
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesGetDetailsResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesGetDetails401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesGetDetails404Response'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get Recurring Expense
              client.RecurringExpenses.get('recurring-expenses.id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.recurring_expenses.detail id: 'recurring-expenses.id'
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.recurringExpenses.detail('recurring-expenses.id')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Recurring Expenses
      summary: Delete a recurring expense
      operationId: RecurringExpenses_delete
      description: Delete a specific recurring expense from your Belvo account.
      parameters:
        - description: The `recurring-expenses.id` that you want to delete
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringExpensesDelete404Response'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete Tax compliance status
              client.RecurringExpenses.delete('recurring-expenses.id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.recurring_expenses.delete id: 'recurring-expenses.id'
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.recurringExpenses.delete('recurring-expenses.id')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /investments/portfolios:
    get:
      tags:
        - Investment Portfolios
      summary: List all portfolios
      operationId: InvestmentPortfolios_list
      description: >-
        Get a paginated list of all the existing portfolios (and their
        instruments) in your Belvo account. By default, we return up to 100
        results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - name: created_at__gt
          in: query
          schema:
            type: string
        - name: created_at__gte
          in: query
          schema:
            type: string
        - name: created_at__lt
          in: query
          schema:
            type: string
        - name: created_at__lte
          in: query
          schema:
            type: string
        - name: created_at__range
          in: query
          schema:
            type: string
        - name: link__in
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfoliosPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosListResponse'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List Investment Portfolios
              for portfolio in client.InvestmentsPortfolios.list():
              pprint(portfolio)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.investments_portfolio.list
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.investmentsPortfolios.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Investment Portfolios
      summary: Retrieve portfolios for a link
      operationId: InvestmentPortfolios_retrieve
      description: Retrieve all portfolios for an existing link.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosRetrieveResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosRetrieve401Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosRetrieve500Response'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve Investment Portfolios
              client.InvestmentsPortfolios.create('link-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.investments_portfolio.retrieve(
                link: 'link-id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.investmentsPortfolios.retrieve('linkID')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    patch:
      tags:
        - Investment Portfolios
      summary: Complete a portfolios request
      operationId: InvestmentPortfolios_completeRequest
      description: >-
        Used to resume a portfolio retrieve session that was paused because an
        MFA token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBodyWithoutSaveData'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/InvestmentPortfoliosCompleteRequestResponse
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/InvestmentPortfoliosCompleteRequest401Response
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/InvestmentPortfoliosCompleteRequest428Response
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/InvestmentPortfoliosCompleteRequest500Response
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Resume Investment Portfolios
              investments_portfolios = client.InvestmentsPortfolios.resume(
                session="session_id",
                token="token",
                link="link_id"
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.investments_portfolio.resume(
                session: 'session_id',
                token: 'token',
                link: 'link_id'
              )
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.investmentsPortfolios.resume('sessionId', 'token', 'linkId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /investments/portfolios/{id}:
    get:
      tags:
        - Investment Portfolios
      summary: Get a portfolio's details
      operationId: InvestmentPortfolios_getDetails
      description: Get the details of a specific portfolio.
      parameters:
        - description: The `portfolio.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentsPortfolio'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosGetDetails404Response'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get Investment Portfolio
              client.InvestmentsPortfolios.get('investments-portfolios.id')
          - language: ruby
            name: Belvo Ruby SDK
            code: >
              # For more information about our SDKs go to:

              # https://developers.belvo.com/docs/belvo-sdks


              require 'belvo'


              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )


              sandbox.investments_portfolio.detail id:
              'investments-portfolios.id'
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.investmentsPortfolios.detail('investments-portfolios.id')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Investment Portfolios
      summary: Delete a portfolio
      operationId: InvestmentPortfolios_delete
      description: >-
        Delete a specific investment portfolio and all associated instruments,
        transactions, and owners from your Belvo account.
      parameters:
        - description: The `portfolio.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestmentPortfoliosDelete404Response'
      x-readme:
        code-samples:
          - language: python
            name: Belvo Python SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete Investment Portfolio
              client.InvestmentsPortfolios.delete('investment-portfolio.id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # For more information about our SDKs go to:
              # https://developers.belvo.com/docs/belvo-sdks

              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.investments_portfolio.delete id: 'investment-portfolio.id'
          - language: node
            name: Belvo Node SDK
            code: |
              // For more information about our SDKs go to:
              // https://developers.belvo.com/docs/belvo-sdks

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.investmentsPortfolios.delete('investment-portfolio.id')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /receivables/transactions:
    get:
      tags:
        - Receivable Transactions
      summary: List all receivable transactions
      operationId: ReceivableTransactions_list
      description: >-
        Get a paginated list of all the existing receivable transactions in your
        Belvo account. We return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
            `account.id` filters in order to improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >
            The `account.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding either the `link.id` or the
            `account.id` filters in order to improve your performance.
          name: account
          in: query
          schema:
            type: string
            format: uuid
            example: d979df3a-5d0f-4cc9-9bd4-b75c28b45963
        - description: Return receivable transactions only for these `account.id`s.
          name: account__in
          in: query
          schema:
            type: string
            example: >-
              24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509
        - description: >-
            Return receivable transactions that were last updated in Belvo's
            database after this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return receivable transactions that were last updated in Belvo's
            database after or on this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return receivable transactions that were last updated in Belvo's
            database before this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return receivable transactions that were last updated in Belvo's
            database before or on this date (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return receivable transactions that were last updated in Belvo's
            database between two dates (`YYYY-MM-DD` or full `ISO-8601`
            timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
        - description: >-
            Return receivable transactions for exactly this date (`YYYY-MM-DD`
            or full ISO-8601 timestamp).
          name: value_date
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return receivable transactions for after this date (`YYYY-MM-DD` or
            full ISO-8601 timestamp).
          name: value_date__gt
          in: query
          schema:
            type: string
            example: '2022-05-06'
        - description: >-
            Return receivable transactions for this date or later (`YYYY-MM-DD`
            or full ISO-8601 timestamp).
          name: value_date__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return receivable transactions for before this date (`YYYY-MM-DD` or
            full ISO-8601 timestamp).
          name: value_date__lt
          in: query
          schema:
            type: string
            example: '2022-03-02'
        - description: >-
            Return receivable transactions for this date or earlier
            (`YYYY-MM-DD` or full ISO-8601 timestamp).
          name: value_date__lte
          in: query
          schema:
            type: string
            example: '2022-03-01'
        - description: >-
            Return receivable transactions for this date range (`YYYY-MM-DD` or
            full ISO-8601 timestamp).
          name: value_date__range
          in: query
          schema:
            type: string
            example: 2022-03-01,2022-05-06
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransactionsPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsListResponse'
    post:
      tags:
        - Receivable Transactions
      summary: Retrieve receivable transactions for a link
      operationId: ReceivableTransactions_retrieve
      description: Retrieve all receivable transactions for an existing link.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceivableTransactionRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransaction'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransaction'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsRetrieveResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsRetrieve401Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsRetrieve500Response'
  /receivables/transactions/{id}:
    get:
      tags:
        - Receivable Transactions
      summary: Get a receivable transaction's details
      operationId: ReceivableTransactions_getDetails
      description: Get the details of a specific receivable transaction.
      parameters:
        - description: The `transaction.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivablesTransaction'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsGetDetailsResponse'
    delete:
      tags:
        - Receivable Transactions
      summary: Delete a receivable transaction
      operationId: ReceivableTransactions_delete
      description: Delete a specific receivable transaction from your Belvo account.
      parameters:
        - description: The `transaction.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableTransactionsDelete404Response'
  /api/risk-insights:
    get:
      tags:
        - Risk Insights
      summary: List all risk insights
      operationId: RiskInsights_list
      description: >-
        Get a paginated list of all risk insight analyses in your Belvo account.
        By default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: Return information for this `risk-insight.id`.
          name: id
          in: query
          schema:
            type: string
            example: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
        - description: Return information for these `risk-insight.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsListResponse'
      x-code-samples:
        - lang: cURL
          source: |
            curl https://sandbox.belvo.com/api/risk-insights/ \
            -u [Secret Key ID]:[Secret Key PASSWORD]
        - lang: python
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from pprint import pprint
            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # List Risk insights
            for risk_insight in client.RiskInsights.list():
            pprint(income)
        - lang: ruby
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.risk_insights.list
        - lang: javascript
          source: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.riskInsights.list()
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
    post:
      tags:
        - Risk Insights
      summary: Retrieve risk insights for a link
      operationId: RiskInsights_retrieve
      description: >-
        Request the risk insights for a given link ID.


        If you need to know the currency of the account, just do a GET Details
        to the accounts endpoint (using the ID you receive from the accounts
        response).
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandardRequest'
      responses:
        '200':
          description: Ok (when save_data=false)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsRetrieveResponse'
        '201':
          description: Created (when save_data=true)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsRetrieve201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsRetrieve500Response'
      x-code-samples:
        - lang: cURL
          source: |
            curl -X POST \
              https://sandbox.belvo.com/api/risk-insights/ \
              -H 'Content-Type: application/json' \
              -H 'Host: sandbox.belvo.com' \
              -H 'cache-control: no-cache' \
              -d '{
                "link": "link_id"
            }' \
              -u [Secret Key ID]:[Secret Key PASSWORD]
        - lang: python
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Retrieve Risk insights
            client.RiskInsights.create('link-id')
        - lang: ruby
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            client.risk_insights.retrieve(
              link: 'link-id'
            )
        - lang: javascript
          source: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.riskInsights.retrieve('linkID')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
    patch:
      tags:
        - Risk Insights
      summary: Complete a risk insights request
      operationId: RiskInsights_completeRequest
      description: >-
        Used to resume an Risk insights retrieve session that was paused because
        an MFA token was required by the institution.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchBody'
      responses:
        '200':
          description: Ok (when save_data=false)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsCompleteRequestResponse'
        '201':
          description: Created (when save_data=true)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsCompleteRequest201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsCompleteRequest400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsCompleteRequest401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsCompleteRequest408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsCompleteRequest428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsCompleteRequest500Response'
      x-code-samples:
        - lang: cURL
          source: |
            curl -X PATCH \
            https://sandbox.belvo.com/api/risk-insights/ \
            -H 'Content-Type: application/json' \
            -H 'Host: sandbox.belvo.com' \
            -H 'cache-control: no-cache' \
            -d '{
                "session": "",
                "token": "",
                "link": ""
            }' \
            -u [Secret Key ID]:[Secret Key PASSWORD]
        - lang: python
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Resume Risk insights
            risk_insights = client.RiskInsights.resume(
              session="session_id",
              token="token",
              link="link_id"
            )
        - lang: ruby
          source: |
            # For more information about our SDKs go to:
                # https://developers.belvo.com/docs/belvo-sdks

                require 'belvo'

                client = Belvo::Client.new(
                  'Secret Key ID',
                  'Secret Key PASSWORD',
                  'sandbox'
                )

                client.risk_insights.resume(
                  session: 'session_id',
                  token: 'token',
                  link: 'link_id'
                )
        - lang: javascript
          source: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.riskInsights.resume('sessionId', 'token', 'linkId')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
  /api/risk-insights/{id}:
    get:
      tags:
        - Risk Insights
      summary: Get a risk insight's details
      operationId: RiskInsights_getDetails
      description: Get the details of a specific risk insight.
      parameters:
        - description: The `risk-insights.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsGetDetailsResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsGetDetails401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsGetDetails404Response'
      x-code-samples:
        - lang: cURL
          source: |
            curl https://sandbox.belvo.com/api/risk-insights/{id} \
            -u [Secret Key ID]:[Secret Key PASSWORD]
        - lang: python
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Get Risk insight
            client.RiskInsights.get('risk-insights.id')
        - lang: ruby
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.risk_insights.detail id: 'risk-insights.id'
        - lang: javascript
          source: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.riskInsights.detail('risk-insights.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
    delete:
      tags:
        - Risk Insights
      summary: Delete a risk insight
      operationId: RiskInsights_delete
      description: Delete a specific risk insight from your Belvo account.
      parameters:
        - description: The `risk-insights.id` that you want to delete
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskInsightsDelete404Response'
      x-code-samples:
        - lang: cURL
          source: |
            curl -X DELETE \
            https://sandbox.belvo.com/api/risk-insights/{id}/ \
            -H 'Host: sandbox.belvo.com' \
            -u [Secret Key ID]:[Secret Key PASSWORD]
        - lang: python
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            from belvo.client import Client

            # Login to Belvo API
            client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

            # Delete Risk insight
            client.RiskInsights.delete('risk-insights.id')
        - lang: ruby
          source: |
            # For more information about our SDKs go to:
            # https://developers.belvo.com/docs/belvo-sdks

            require 'belvo'

            sandbox = Belvo::Client.new(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            )

            sandbox.risk_insights.delete id: 'risk-insights.id'
        - lang: javascript
          source: |
            // For more information about our SDKs go to:
            // https://developers.belvo.com/docs/belvo-sdks

            var belvo = require('belvo').default;

            var client = new belvo(
              'Secret Key ID',
              'Secret Key PASSWORD',
              'sandbox'
            );

            client.connect()
              .then(function () {
                client.riskInsights.delete('risk-insights.id')
                  .then(function (res) {
                    console.log(res);
                  })
                  .catch(function (error) {
                    console.log(error);
                  });
            });
  /api/tax-retentions:
    get:
      tags:
        - Tax retentions
      summary: List all tax retentions
      operationId: TaxRetentions_list
      description: >-
        Get a paginated list of all existing tax retentions in your Belvo
        account. We return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: >-
            Return tax retentions that were last updated in Belvo's database
            after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return tax retentions that were last updated in Belvo's database
            after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return tax retentions that were last updated in Belvo's database
            before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return tax retentions that were last updated in Belvo's database
            before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return tax retentions that were last updated in Belvo's database
            between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsListResponse'
    post:
      tags:
        - Tax retentions
      summary: Retrieve tax retentions for a link
      operationId: TaxRetentions_retrieve
      description: >-
        Retrieve tax retention information from a specific link. The maximum
        number of tax retentions that can be returned for a period is 500.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxRetentionsRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsRetrieveResponse'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsRetrieve201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsRetrieve408Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsRetrieve500Response'
  /api/tax-retentions/{id}:
    get:
      tags:
        - Tax retentions
      summary: Get a tax retention's details
      operationId: TaxRetentions_getDetails
      description: Get the details of a specific tax retention.
      parameters:
        - description: The `tax-retention.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentions'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsGetDetails404Response'
    delete:
      tags:
        - Tax retentions
      summary: Delete a tax retention
      operationId: TaxRetentions_delete
      description: Delete a specific tax retention from your Belvo account.
      parameters:
        - description: The `tax-retention.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxRetentionsDelete404Response'
  /api/tax-declarations:
    get:
      tags:
        - Tax declarations
      summary: List all tax declarations
      operationId: TaxDeclarations_list
      description: >-
        Get a paginated list of all existing tax declarations in your Belvo
        account. By default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
        - description: >
            The `link.id` you want to filter by.


            ‚ÑπÔ∏è We highly recommend adding the `link.id` filter in order to
            improve your performance.
          name: link
          in: query
          schema:
            type: string
            format: uuid
            example: 8848bd0c-9c7e-4f53-a732-ec896b11d4c4
        - description: Return information for these `link.id`s.
          name: link__in
          in: query
          schema:
            type: string
            example: >-
              8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65
        - description: >-
            Return tax declarations that were last updated in Belvo's database
            after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-05-05'
        - description: >-
            Return tax declarations that were last updated in Belvo's database
            after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-05-04'
        - description: >-
            Return tax declarations that were last updated in Belvo's database
            before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-04-01'
        - description: >-
            Return tax declarations that were last updated in Belvo's database
            before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-03-30'
        - description: >-
            Return tax declarations that were last updated in Belvo's database
            between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-03-03,2022-05-04
        - description: Return information for this `tax-declaration.id`.
          name: id
          in: query
          schema:
            type: string
            example: eb42c21c-2d9e-4dc1-89b8-9401d4beca73
        - description: Return information for these `tax-declaration.id`s.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c
        - description: Return tax declarations for this year (`YYYY`).
          name: year
          in: query
          schema:
            type: string
            example: '2021'
        - description: Return tax declarations for after this year (`YYYY`).
          name: year__gt
          in: query
          schema:
            type: string
            example: '2020'
        - description: Return tax declarations for this year or after (`YYYY`).
          name: year__gte
          in: query
          schema:
            type: string
            example: '2019'
        - description: Return tax declarations for before this year (`YYYY`).
          name: year__lt
          in: query
          schema:
            type: string
            example: '2018'
        - description: Return tax declarations for this year or earlier (`YYYY`).
          name: year__lte
          in: query
          schema:
            type: string
            example: '2017'
        - description: Return tax declarations between these two years (`YYYY`).
          name: year__range
          in: query
          schema:
            type: string
            example: 2017,2021
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsListResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsList401Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-declarations/ \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from pprint import pprint
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # List tax declarations
              for tax_declaration in client.TaxDeclarations.list()
                pprint(tax_declaration)
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_declarations.list
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxDeclarations.list()
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    post:
      tags:
        - Tax declarations
      summary: Retrieve tax declarations for a link
      operationId: TaxDeclarations_retrieve
      description: Retrieve tax declaration information for a specific fiscal link.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxDeclarationsRequest'
      responses:
        '200':
          description: Ok (when `save_data=false`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsRetrieveResponse'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsRetrieve201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutError'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsRetrieve500Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |-
              ### Retrieve Tax Declarations
              curl -X POST \
                https://sandbox.belvo.com/api/tax-declarations/ \
                -H 'Content-Type: application/json' \
                -H 'Host: sandbox.belvo.com' \
                -H 'cache-control: no-cache' \
                -d '{
                  "link": "",
                  "year_from": YYYY,
                  "year_to": YYYY,
                  "attach_pdf": false
              }' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |-
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Retrieve Tax Declarations
              tax_declarations = client.TaxDeclarations.create(
                link="link_id",
                year_from="2019",
                year_to="2020",
                attach_pdf=True
              )
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              sandbox = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              # Retrieve Tax Declarations
              sandbox.tax_declarations.retrieve(
                link: 'link-id',
                year_from: "2019",
                year_to: "2020"
              )
          - language: node
            name: Belvo Node SDK
            code: |-
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              // Retrieve Tax Declarations
              client.connect()
                .then(function () {
                  client.taxDeclarations.retrieve('linkID', "2019", "2020")
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/tax-declarations/{id}:
    get:
      tags:
        - Tax declarations
      summary: Get a tax declaration's details
      operationId: TaxDeclarations_getDetails
      description: Get the details of a specific Tax declaration.
      parameters:
        - description: The `tax-declaration.id` you want to get detailed information about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsGetDetailsResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsGetDetails401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsGetDetails404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Get Tax declaration
              client.TaxDeclaration.get('tax-declaration-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              sandbox.tax_declaration.detail id: 'tax-declaration-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxDeclaration.detail('taxDeclarationId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
    delete:
      tags:
        - Tax declarations
      summary: Delete a tax declration
      operationId: TaxDeclarations_delete
      description: Delete a specific Tax declaration from your Belvo account.
      parameters:
        - description: The `tax-declration.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxDeclarationsDelete404Response'
      x-readme:
        code-samples:
          - language: cURL
            code: |
              curl -X DELETE \
                https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \
                -H 'Host: sandbox.belvo.com' \
                -u [Secret Key ID]:[Secret Key PASSWORD]
          - language: python
            name: Belvo Python SDK
            code: |
              # check our python-client library on github
              # https://github.com/belvo-finance/belvo-python
              from belvo.client import Client

              # Login to Belvo API
              client = Client("Secret Key ID", "Secret Key PASSWORD", "sandbox")

              # Delete Tax declaration
              client.TaxDeclaration.delete('tax-declaration-id')
          - language: ruby
            name: Belvo Ruby SDK
            code: |
              # check our Ruby gem on github
              # https://github.com/belvo-finance/belvo-ruby
              require 'belvo'

              client = Belvo::Client.new(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              )

              client.tax_declarations.delete id: 'tax-declaration-id'
          - language: node
            name: Belvo Node SDK
            code: |
              // check our node package on github
              // https://github.com/belvo-finance/belvo-js

              var belvo = require('belvo').default;

              var client = new belvo(
                'Secret Key ID',
                'Secret Key PASSWORD',
                'sandbox'
              );

              client.connect()
                .then(function () {
                  client.taxDeclaration.delete('taxDeclarationId')
                    .then(function (res) {
                      console.log(res);
                    })
                    .catch(function (error) {
                      console.log(error);
                    });
              });
  /api/employment-records:
    get:
      tags:
        - Employment Records
      summary: List all employment records
      operationId: EmploymentRecords_list
      description: >-
        Get a paginated list of all existing employment records in your Belvo
        account. By default, we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          required: false
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page. 


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 1000. If you enter a value greater than 1000, our API
            will default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 1000
            example: 100
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsPaginatedResponse'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsListResponse'
    post:
      tags:
        - Employment Records
      summary: Retrieve employment record details
      operationId: EmploymentRecords_retrieve
      description: |
        Retrieve employment record details for an individual.
      parameters:
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmploymentRecordRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsRetrieveResponse'
        '201':
          description: Created (when `save_data=true`)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsRetrieve201Response'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsRetrieve400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsRetrieve401Response'
        '408':
          description: Request Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsRetrieve408Response'
        '428':
          description: MFA Token Required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsRetrieve428Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsRetrieve500Response'
  /api/employment-records/{id}:
    get:
      tags:
        - Employment Records
      summary: Get an employment record's details
      operationId: EmploymentRecords_getDetails
      description: Get the details of a specific employment record.
      parameters:
        - description: >-
            The `employment-record.id` you want to get detailed information
            about.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - description: >-
            Omit certain fields from being returned in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: omit
          required: false
          in: query
          schema:
            type: string
            example: link,balance
        - description: >-
            Return only the specified fields in the response. For more
            information, see our [Filtering
            responses](https://developers.belvo.com/docs/searching-and-filtering)
            DevPortal article.
          name: fields
          required: false
          in: query
          schema:
            type: string
            example: link,balance,account
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecord'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsGetDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsGetDetails404Response'
    delete:
      tags:
        - Employment Records
      summary: Delete an employment record
      operationId: EmploymentRecords_delete
      description: Delete a specific employment record from your Belvo account.
      parameters:
        - description: The `employment-record.id` that you want to delete.
          name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsDeleteResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmploymentRecordsDelete404Response'
  /api/enrich/incomes:
    post:
      tags:
        - Income Verification
      summary: Verify incomes
      operationId: IncomeVerification_verify
      description: >-
        Send through your raw data and receive enriched information for each of
        your user's income streams.


        <div style="background-color:#f4f6f8; border-left: 6px solid
        #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px">

        <strong>Note: </strong> Belvo can process up to 10,000 unique
        transactions per request.

        </div>
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EyodIncomeVerificationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeVerificationVerifyResponse'
              examples:
                EnrichedIncome:
                  $ref: '#/components/examples/IncomeVerificationEyod'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeVerificationVerify400Response'
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeVerificationVerify401Response'
        '403':
          description: Access to Belvo API denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeVerificationVerify403Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeVerificationVerify500Response'
  /api/categorization:
    post:
      tags:
        - Categorization
      summary: Categorize transactions
      operationId: Categorization_categorizeTransactions
      description: >-
        Send through your raw transaction data and receive enriched information
        for each of your transactions.


        <div style="background-color:#f4f6f8; border-left: 6px solid
        #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px;
        margin-right: 25px">

        <strong>Note: </strong> Belvo can process up to 10,000 unique
        transactions per request.

        </div>
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorizationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categorization'
              examples:
                CategorizeTransactions:
                  $ref: '#/components/examples/CategorizationExample'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CategorizationCategorizeTransactionsResponse
        '401':
          description: Authentication to Belvo API failed
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CategorizationCategorizeTransactions401Response
        '403':
          description: Access to Belvo API denied
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CategorizationCategorizeTransactions403Response
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/CategorizationCategorizeTransactions500Response
  /payments/secret-keys:
    post:
      tags:
        - Secret Keys
      summary: Request API keys
      operationId: SecretKeys_create
      description: >
        Request API keys to use with Belvo's Payments API.


        You will need to send through the username and password (in plain text)
        you use to login to the Belvo dashboard in the Authorization header.


        For example:

          ```curl
          POST https://api.belvo.com/payments/secret-keys/
          Authorization: Basic username:password
          ```
      parameters: []
      responses:
        '201':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeysCreateResponse'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeysCreate400Response'
        '408':
          description: Request Timeout Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeysCreate408Response'
    get:
      tags:
        - Secret Keys
      summary: List all secret keys
      operationId: SecretKeys_list
      description: >-
        Get a paginated list of all existing secret keys in your Belvo account.
        We return up to 100 results per page.


          **Note**: We only return the ID of the secret keys.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeysPaginatedResponse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretKeysListResponse'
  /payments/institutions:
    get:
      tags:
        - Payment Institutions
      summary: List all payment institutions
      operationId: PaymentInstitutions_list
      description: List all available payment institutions.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: Return institutions only for this country.
          name: country
          in: query
          schema:
            type: string
            example: COL
        - description: Return institutions only for one of these countries.
          name: country__in
          in: query
          schema:
            type: string
            example: COL,BRA
        - description: Return results only for this date (in `YYYY-MM-DD` format).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only after this date (in `YYYY-MM-DD` format).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and after (in `YYYY-MM-DD`
            format).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only before this date (in `YYYY-MM-DD` format).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and before (in `YYYY-MM-DD`
            format).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results between this date range (in `YYYY-MM-DD` format).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-09-15,2022-09-20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsInstitutionsPaginatedResponse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInstitutionsListResponse'
  /payments/institutions/{id}:
    get:
      tags:
        - Payment Institutions
      summary: Get details about a payment institution
      operationId: PaymentInstitutions_getDetails
      description: Get the details about a specific payment institution
      parameters:
        - description: >-
            The payment `institution.id` you want to get detailed information
            about.
          name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
            example: a3b92311-1888-449f-acaa-49ae28d68fcd
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentInstitution'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInstitutionsGetDetailsResponse'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInstitutionsGetDetails404Response'
  /payments/customers:
    post:
      tags:
        - Customers
      summary: Create a new customer
      operationId: Customers_create
      description: Create a new customer to send or request funds.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomersCreateRequest'
            examples:
              OfpiPixIndividual:
                $ref: '#/components/examples/CreateCustomerOfpiIndividual'
              OfpiPixBusiness:
                $ref: '#/components/examples/CreateCustomerOfpiBusiness'
              PseIndividual:
                $ref: '#/components/examples/CreateCustomerPseIndividual'
      responses:
        '201':
          description: OK (Created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersCreateResponse'
              examples:
                OfpiPixIndividual:
                  $ref: '#/components/examples/ResponseCustomerOfpiIndividual'
                OfpiPixBusiness:
                  $ref: '#/components/examples/ResponseCustomerOfpiBusiness'
                PseIndividual:
                  $ref: '#/components/examples/ResponseCustomerPseIndividual'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersCreate400Response'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersCreate401Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersCreate500Response'
    get:
      tags:
        - Customers
      summary: List all customers
      operationId: Customers_list
      description: List all customers associated with your Belvo account.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >-
            One or more `customer.id`s (comma separated) that you want to get
            results for.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: Return results only for this date (in `YYYY-MM-DD` format).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only after this date (in `YYYY-MM-DD` format).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and after (in `YYYY-MM-DD`
            format).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only before this date (in `YYYY-MM-DD` format).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and before (in `YYYY-MM-DD`
            format).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results between this date range (in `YYYY-MM-DD` format).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-09-15,2022-09-20
        - description: >-
            Return results only for this customer type (either `INDIVIDUAL` or
            `BUSINESS`).
          name: customer__type
          in: query
          schema:
            type: string
            example: INDIVIDUAL
        - description: >-
            Return results for one or more customers that match either the name
            or email you searched for. 


            **Note:** This filter supports both full and partial search queries,
            with a minimum of three characters required. For example, searching
            for `car` may match the following values:

              - `Carlos Vives`
              - `Carmen Dom√≠nguez` 
              - `carlos.vives@musicacolombia.co`
          name: search
          in: query
          schema:
            type: string
            example: car
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPaginatedResponse'
              examples:
                OfpiPixIndividual:
                  $ref: >-
                    #/components/examples/ResponseCustomerOfpiIndividualPaginated
                OfpiPixBusiness:
                  $ref: '#/components/examples/ResponseCustomerOfpiBusinessPaginated'
                PseIndividual:
                  $ref: '#/components/examples/ResponseCustomerPseIndividualPaginated'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersListResponse'
  /payments/customers/{id}:
    get:
      tags:
        - Customers
      summary: Get details about a customer
      operationId: Customers_getDetails
      description: Get the details about a specific customer
      parameters:
        - description: The `customer.id` you want to get detailed information about.
          name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
            example: a3b92311-1888-449f-acaa-49ae28d68fcd
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersGetDetailsResponse'
              examples:
                OfpiPixIndividual:
                  $ref: '#/components/examples/ResponseCustomerOfpiIndividual'
                OfpiPixBusiness:
                  $ref: '#/components/examples/ResponseCustomerOfpiBusiness'
                PseIndividual:
                  $ref: '#/components/examples/ResponseCustomerPseIndividual'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersGetDetails401Response'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersGetDetails404Response'
  /payments/bank-accounts:
    post:
      tags:
        - Bank Accounts
      summary: Create a new bank account
      operationId: BankAccounts_create
      description: Create a new bank account from which to send or request funds.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccountsCreateRequest'
            examples:
              OfpiPixInfo:
                $ref: '#/components/examples/CreateBankAccountOrganizationPixInfo'
              OfpiPixKey:
                $ref: '#/components/examples/CreateBankAccountOrganizationPixKey'
              PseInfo:
                $ref: '#/components/examples/CreateBankAccountOrganizationPse'
      responses:
        '201':
          description: OK (Created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsCreateResponse'
              examples:
                OfpiPixInfo:
                  $ref: '#/components/examples/ResponseBankAccountOrganizationPixInfo'
                OfpiPixKey:
                  $ref: '#/components/examples/ResponseBankAccountOrganizationPixKey'
                PseInfo:
                  $ref: '#/components/examples/ResponseBankAccountOrganizationPse'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsCreate400Response'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsCreate401Response'
        '408':
          description: Request Timeout Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsCreate408Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsCreate500Response'
    get:
      tags:
        - Bank Accounts
      summary: List all bank accounts
      operationId: BankAccounts_list
      description: List all bank accounts associated with your Belvo account.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >-
            One or more `bank-account.id`s (comma separated) that you want to
            get results for.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: Return results only for this date (in `YYYY-MM-DD` format).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only after this date (in `YYYY-MM-DD` format).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and after (in `YYYY-MM-DD`
            format).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only before this date (in `YYYY-MM-DD` format).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and before (in `YYYY-MM-DD`
            format).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results between this date range (in `YYYY-MM-DD` format).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-09-15,2022-09-20
        - description: Return results that exactly match a value.
          name: number
          in: query
          schema:
            type: string
            example: '1231564526'
        - description: Return results for listed numbers.
          name: number__in
          in: query
          schema:
            type: string
            example: 1231564526,15648325
        - description: The `customer.id` you want to get results for.
          name: customer
          in: query
          schema:
            type: string
            example: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
        - description: The `institution.id` you want to get results for.
          name: institution
          in: query
          schema:
            type: string
            example: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
        - description: Return results for a matched value type.
          name: holder__type
          in: query
          schema:
            type: string
            example: INDIVIDUAL
        - description: Return results for listed holder types.
          name: holder__type__in
          in: query
          schema:
            type: string
            example: INDIVIDUAL,BUSINESS
        - description: Return results only for this value.
          name: providers
          in: query
          schema:
            type: string
            example: payments_way
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountPaginatedResponse'
              examples:
                OfpiPixInfo:
                  $ref: >-
                    #/components/examples/ResponseBankAccountOrganizationPixInfoPaginated
                OfpiPixKey:
                  $ref: >-
                    #/components/examples/ResponseBankAccountOrganizationPixKeyPaginated
                PseInfo:
                  $ref: >-
                    #/components/examples/ResponseBankAccountOrganizationPsePaginated
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsListResponse'
  /payments/bank-accounts/{id}:
    get:
      tags:
        - Bank Accounts
      summary: Get details about a bank account
      operationId: BankAccounts_getDetails
      description: Get the details about a specific bank account
      parameters:
        - description: The `bank-account.id` you want to get detailed information about.
          name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
            example: a3b92311-1888-449f-acaa-49ae28d68fcd
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsGetDetailsResponse'
              examples:
                OfpiPixInfo:
                  $ref: '#/components/examples/ResponseBankAccountOrganizationPixInfo'
                OfpiPixKey:
                  $ref: '#/components/examples/ResponseBankAccountOrganizationPixKey'
                PseInfo:
                  $ref: '#/components/examples/ResponseBankAccountOrganizationPse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsGetDetails401Response'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsGetDetails404Response'
  /payments/payment-links:
    post:
      tags:
        - Payment Links
      summary: Create a payment link
      operationId: PaymentLinks_create
      description: Create a new payment link to start a hosted-widget payment.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentLinksCreateRequest'
      responses:
        '201':
          description: OK (Created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksCreateResponse'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksCreate400Response'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksCreate401Response'
        '408':
          description: Request Timeout Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksCreate408Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksCreate500Response'
    get:
      tags:
        - Payment Links
      summary: List all payment links
      operationId: PaymentLinks_list
      description: >-
        List all payment links associated with your Belvo account. By default,
        we return up to 100 results per page.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >
            Indicates how many results to return per page. By default we return
            100 results per page.


            ‚ÑπÔ∏è The minimum number of results returned per page is 1 and the
            maximum is 100. If you enter a value greater than 100, our API will
            default to the maximum value (1000).
          name: page_size
          required: false
          in: query
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 100
            example: 100
        - description: Return results only for this date (in `YYYY-MM-DD` format).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only after this date (in `YYYY-MM-DD` format).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and after (in `YYYY-MM-DD`
            format).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only before this date (in `YYYY-MM-DD` format).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and before (in `YYYY-MM-DD`
            format).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results between this date range (in `YYYY-MM-DD` format).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-09-15,2022-09-20
        - description: >-
            Return payment links with this status. Can be either `ACTIVE` or
            `INACTIVE`.
          name: status
          in: query
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
            example: ACTIVE
        - description: |-
            Return results in a specified time order. Can be either:

              - `created_at` returns payment links from newest to oldest (in ascending order).
              - `-created_at` returns payment links from oldest to newest (in descending order).
          name: ordering
          in: query
          schema:
            type: string
            enum:
              - created_at
              - '-created_at'
            example: '-created_at'
        - description: >-
            Return results for one or more payment links that match the
            description you searched for. 


            **Note:** This filter supports both full and partial search queries,
            with a minimum of three characters required. For example, searching
            for `trai` may match the following values:

              - `Awesome training sneakers` 
              - `Training equipment`
          name: search
          in: query
          schema:
            type: string
            example: trai
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinkPaginatedResponse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksListResponse'
  /payments/payment-links/{access_token}:
    get:
      tags:
        - Payment Links
      summary: Get details about a payment link
      operationId: PaymentLinks_getDetails
      description: Get the details about a payment link.
      parameters:
        - description: >-
            The `access_token` of the payment link you want to get detailed
            information about. 


            **Note:** You can retrieve the `access_token` for a payment link by
            making a [GET List all payment
            links](https://developers.belvo.com/reference/listpaymentlinks)
            request.
          name: access_token
          required: true
          in: path
          schema:
            type: string
            example: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
      responses:
        '200':
          description: OK (Created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksGetDetailsResponse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksGetDetails401Response'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksGetDetails404Response'
  /payments/payment-intents:
    post:
      tags:
        - Payment Intents
      summary: Create a new payment intent
      operationId: PaymentIntents_create
      description: Create a payment intent.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentIntentsCreateRequest'
      responses:
        '201':
          description: OK (Created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsCreateResponse'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsCreate400Response'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsCreate401Response'
        '408':
          description: Request Timeout Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsCreate408Response'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsCreate500Response'
    get:
      tags:
        - Payment Intents
      summary: List all payment intents
      operationId: PaymentIntents_list
      description: List all payment intents associated with your Belvo account.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >-
            One or more `payment-intent.id`s (comma separated) that you want to
            get results for.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: Return results only for this date (in `YYYY-MM-DD` format).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only after this date (in `YYYY-MM-DD` format).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and after (in `YYYY-MM-DD`
            format).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only before this date (in `YYYY-MM-DD` format).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and before (in `YYYY-MM-DD`
            format).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results between this date range (in `YYYY-MM-DD` format).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-09-15,2022-09-20
        - description: Return results only for this value.
          name: provider
          in: query
          schema:
            type: string
            example: payments_way
        - description: Return results only for this value.
          name: payment_method_type
          in: query
          schema:
            type: string
            example: pse
        - description: The `customer.id` you want to get results for.
          name: customer
          in: query
          schema:
            type: string
            example: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
        - description: >-
            One or more `customer.id`s (comma separated) that you want to get
            results for.
          name: customer__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: Return results only for this value.
          name: amount
          in: query
          schema:
            type: string
            example: 1000
        - description: Return results only for more than this amount.
          name: amount__gt
          in: query
          schema:
            type: string
            example: 1000
        - description: Return results only for and more than this amount.
          name: amount__gte
          in: query
          schema:
            type: string
            example: 1000
        - description: Return results only for less than this amount.
          name: amount__lt
          in: query
          schema:
            type: string
            example: 1000
        - description: Return results only for this amount or less.
          name: amount__lte
          in: query
          schema:
            type: string
            example: 1000
        - description: Return results only for this value.
          name: status
          in: query
          schema:
            type: string
            example: SUCCEEDED
        - description: Return results for listed status.
          name: status__in
          in: query
          schema:
            type: string
            example: PROCESSING,SUCCEEDED
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentPaginatedResponse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsListResponse'
  /payments/payment-intents/{id}:
    patch:
      tags:
        - Payment Intents
      summary: Complete a payment intent
      operationId: PaymentIntents_complete
      description: >-
        Complete a new payment intent.


        During the payment intent flow, you'll need to prompt your customer to
        provide additional information about their institution, bank account,
        and login credentials. This is done by sending PATCH calls with the
        information that Belvo asked you display in each `next_step` object. If
        you need more information on how to complete a payment intent, check our
        PSE payment initiation guides for  üá®üá¥ Colombia.
      parameters:
        - description: The `payment-intent.id` you want to get detailed information about.
          name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
            example: a3b92311-1888-449f-acaa-49ae28d68fcd
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchPaymentIntentPse'
      responses:
        '200':
          description: OK (Created)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsCompleteResponse'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsComplete400Response'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsComplete404Response'
    get:
      tags:
        - Payment Intents
      summary: Get details about a payment intent.
      operationId: PaymentIntents_getDetails
      description: Get the details about a specific payment intent.
      parameters:
        - description: The `payment-intent.id` you want to get detailed information about.
          name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
            example: a3b92311-1888-449f-acaa-49ae28d68fcd
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsGetDetailsResponse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsGetDetails401Response'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentIntentsGetDetails404Response'
  /payments/transactions:
    get:
      tags:
        - Payment Transactions
      summary: List all payment transactions
      operationId: PaymentTransactions_list
      description: List all payment transactions associated with your Belvo account.
      parameters:
        - description: A page number within the paginated result set.
          name: page
          in: query
          schema:
            type: integer
            format: int32
            example: 1
        - description: >-
            One or more payment `transaction.id`s (comma separated) that you
            want to get results for.
          name: id__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: Return results only for this date (in `YYYY-MM-DD` format).
          name: created_at
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only after this date (in `YYYY-MM-DD` format).
          name: created_at__gt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and after (in `YYYY-MM-DD`
            format).
          name: created_at__gte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results only before this date (in `YYYY-MM-DD` format).
          name: created_at__lt
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: >-
            Return results only for this date and before (in `YYYY-MM-DD`
            format).
          name: created_at__lte
          in: query
          schema:
            type: string
            example: '2022-09-15'
        - description: Return results between this date range (in `YYYY-MM-DD` format).
          name: created_at__range
          in: query
          schema:
            type: string
            example: 2022-09-15,2022-09-20
        - description: The `charge.id` you want to get results for.
          name: charge
          in: query
          schema:
            type: string
            example: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
        - description: >-
            One or more `charge.id`s (comma separated) that you want to get
            results for.
          name: charge__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: The `beneficiary.id` you want to get results for.
          name: beneficiary
          in: query
          schema:
            type: string
            example: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
        - description: >-
            One or more `beneficiary.id`s (comma separated) that you want to get
            results for.
          name: beneficiary__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: The payer's `bank-account.id` you want to get results for.
          name: payer
          in: query
          schema:
            type: string
            example: 24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d
        - description: >-
            One or more payer `bank-account.id`s (comma separated) that you want
            to get results for.
          name: payer__in
          in: query
          schema:
            type: string
            example: >-
              24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264
        - description: Return results for a matched value type.
          name: transaction__type
          in: query
          schema:
            type: string
            example: INFLOW
        - description: Return results for a matched value type.
          name: currency
          in: query
          schema:
            type: string
            example: COP
        - description: Return results for a matched value type.
          name: description
          in: query
          schema:
            type: string
            example: Training shoes
        - description: Return results only for this value.
          name: amount
          in: query
          schema:
            type: string
            example: '1000.00'
        - description: Return results only for more than this amount.
          name: amount__gt
          in: query
          schema:
            type: string
            example: '1000.00'
        - description: Return results only for and more than this amount.
          name: amount__gte
          in: query
          schema:
            type: string
            example: '1000.00'
        - description: Return results only for less than this amount.
          name: amount__lt
          in: query
          schema:
            type: string
            example: '1000.00'
        - description: Return results only for this amount or less.
          name: amount__lte
          in: query
          schema:
            type: string
            example: '1000.00'
        - description: Return results between this amount range
          name: amount__range
          in: query
          schema:
            type: string
            example: 1000.00,2000.00
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsTransactionsPaginatedResponse'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionsListResponse'
  /payments/transactions/{id}:
    get:
      tags:
        - Payment Transactions
      summary: Get details about a payment transaction
      operationId: PaymentTransactions_getDetails
      description: Get the details about a specific payment transaction.
      parameters:
        - description: The `transaction.id` you want to get detailed information about.
          name: id
          required: true
          in: path
          schema:
            type: string
            format: uuid
            example: a3b92311-1888-449f-acaa-49ae28d68fcd
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paymentTransaction'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionsGetDetailsResponse'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransactionsGetDetails404Response'
components:
  securitySchemes:
    basicAuth:
      description: >-
        Belvo employs **basic authentication** using your secret keys. Just use
        your secretId as the `username` and secretPassword as the `password`.
        For example:


        ```text Authentication example

        curl \
            -u =BASE64-SECRET_ID=:=BASE64-SECRET_PASSWORD=
            https://sandbox.belvo.com/api/
        ```


        For information on how to get your API keys, check out our [Get Started
        in 5
        Minutes](https://developers.belvo.com/docs/get-started-in-5-minutes)
        DevPortal article.
      type: http
      scheme: basic
  schemas:
    EnumLinkAccessModeResponse:
      description: >
        The link type.

        For more information, see our
        [Links](https://developers.belvo.com/docs/links-and-institutions#links)
        article.

        We return one of the following enum values:
          - `single`
          - `recurrent`
          - `null`
      type: string
      nullable: true
      enum:
        - single
        - recurrent
        - null
      example: recurrent
    EnumLinkStatus:
      description: >
        The current status of the link. For more information, see our
        [Link](https://developers.belvo.com/docs/links-and-institutions#links)
        article in the devportal.

        We return one of the following values:
          - `valid`
          - `invalid`
          - `unconfirmed`
          - `token_required`
      type: string
      enum:
        - valid
        - invalid
        - unconfirmed
        - token_required
      example: valid
    EnumLinkRefreshRate:
      description: >
        The update refresh rate for the recurrent link. For more information,
        check out our [recurrent link
        documentation](https://developers.belvo.com/docs/links-and-institutions#recurrent-links)
        in our DevPortal.

        We return one of the following enum values:
          - `6h`
          - `12h`
          - `24h`
          - `7d` (default)
          - `30d` (once a month)
          - `null` (for single links)
      type: string
      nullable: true
      default: 7d
      enum:
        - 6h
        - 12h
        - 24h
        - 7d
        - 30d
        - null
      example: 7d
    Link:
      type: object
      properties:
        id:
          description: Belvo's unique ID for the current Link.
          type: string
          format: uuid
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        institution:
          description: |
            Belvo's name for the institution.
          type: string
          example: erebor_mx_retail
        access_mode:
          $ref: '#/components/schemas/EnumLinkAccessModeResponse'
        last_accessed_at:
          description: >-
            The ISO-8601 timestamp of Belvo's most recent successful access to
            the institution for the given link.
          type: string
          nullable: true
          format: date-time
          example: '2019-09-27T13:02:03.584Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        external_id:
          description: >-
            The `external_id` you provided as an additional identifier for the
            link. For more information, see our [Link creation
            article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).
          type: string
          minLength: 3
          nullable: true
          example: 56ab5706-6e00-48a4-91c9-ca55968678d9
        institution_user_id:
          description: >-
            <div style="background-color:#f4f6f8; border-left: 6px solid
            #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px;
            margin-right: 25px"> <strong>Info:</strong> Only applicable for
            links created <b>after 08-02-2022</b>. </div>


            A unique 44-character string that can be used to identify a user at
            a given institution.


            üìö Check out our [Avoiding duplicated
            links](https://developers.belvo.com/docs/link-creation-best-practices#avoiding-duplicated-links)
            DevPortal article for more information and tips on how to use it.
          type: string
          pattern: '[A-Za-z0-9\-=_]{44}'
          example: sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c=
        status:
          $ref: '#/components/schemas/EnumLinkStatus'
        created_by:
          description: The unique ID for the user that created this link.
          type: string
          format: uuid
          example: bcef7f35-67f2-4b19-b009-cb38795faf09
        refresh_rate:
          $ref: '#/components/schemas/EnumLinkRefreshRate'
    PaginatedResponseLink:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    UnauthorizedError:
      title: Unauthorized Error
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: object
      properties:
        code:
          description: >-
            A unique error code (`authentication_failed`) that allows you to
            classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#401-authentication_failed"
            target="_blank">401 authentication_failed errors</a>.
          type: string
          example: authentication_failed
        message:
          description: |-
            A short description of the error. 

            For `authentication_failed` errors, the description is:

              - `Invalid Secret Keys`.
          type: string
          example: Invalid Secret Keys
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    EnumLinkAccessModeRequest:
      description: >
        The type of link to create.


        - Use `single` to do ad hoc one-time POST requests for accounts, owners,
        and transactions.

        - Use `recurrent` to have Belvo access information on a recurrent basis
        so you always have fresh account, owner, balance, and transaction data.


        For more information, see our
        [Links](https://developers.belvo.com/docs/links-and-institutions#links)
        article.
      type: string
      enum:
        - single
        - recurrent
      default: recurrent
    LinksRequest:
      type: object
      required:
        - institution
        - username
      properties:
        institution:
          description: The Belvo name for the institution.
          type: string
          pattern: '[a-z]+_[a-z]{2}_[a-z]+'
          example: erebor_mx_retail
        username:
          description: The end-user's username (or ID) used to log in to the institution.
          type: string
          example: username
        password:
          description: >
            The end-user's password used to log in to the institution.


            ‚ÑπÔ∏è **Note**: You must send through a password for all institutions
            except for IMSS (`imss_mx_employment`).
          type: string
          example: password
        external_id:
          description: >-
            An additional identifier for the link, provided by you, to store in
            the Belvo database. **Cannot** include any Personal Identifiable
            Information (PII). **Must** be at least three characters long.


            If we identify that the identifier contains PII, we will force a
            `null` value. For more information, see our [Link creation
            article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).
          type: string
          minLength: 3
          example: 56ab5706-6e00-48a4-91c9-ca55968678d9
        username2:
          description: >
            The end-user's second username (or email address) used to log in to
            the institution.


            ‚ÑπÔ∏è This is only required by some institutions. To know which
            institutions require a second username, get the
            [details](https://developers.belvo.com/reference/detailinstitution)
            for the institution and check the `form_fields` array in the
            response.
          type: string
          example: secondusername
        username3:
          description: >
            The end-user's third username used to log in to the institution.


            ‚ÑπÔ∏è This is only required by some institutions. To know which
            institutions require a third username, get the
            [details](https://developers.belvo.com/reference/detailinstitution)
            for the institution and check the `form_fields` array in the
            response.
          type: string
          example: thirdusername
        password2:
          description: >
            The end-user's second password used to log in to the institution.


            ‚ÑπÔ∏è This is only required by some institutions. To know which
            institutions require a second password, get the
            [details](https://developers.belvo.com/reference/detailinstitution)
            for the institution and check the `form_fields` array in the
            response.
          type: string
          example: pin
        token:
          description: >
            The MFA token required by the bank to log in.


            We do not recommend sending the authentication token in the same
            request as registering the user. See our [Handling multi-factor
            authentication](https://developers.belvo.com/docs/handling-2-factor-authentication)
            article for more information and best practices.
          type: string
          example: 1234ab
        access_mode:
          $ref: '#/components/schemas/EnumLinkAccessModeRequest'
        fetch_historical:
          description: >
            Indicates whether or not to retrieve historical information for the
            link or not. For links where `access_mode=single`, the default is
            `false`. For links where `access_mode=recurrent` this is hardcoded
            to `true`.
          type: boolean
          example: true
        credentials_storage:
          description: >
            Indicates whether or not to store credentials (and the duration for
            which to store the credentials). By default, this is set to `store`.
            For links where `access_mode=recurrent`, this must be set to
            `store`.


            Choose either:
              - `store` to store credentials
              - `nostore` to not store credentials
              - `30d` to store credentials only for 30 days
          type: string
          example: store
        username_type:
          description: >
            Type of document to be used as a username.


            Some banking institutions accept different documents to be used as
            the `username` to login. For example, the *C√©dula de Ciudadan√≠a*,
            *C√©dula de Extranjer√≠a*, *Pasaporte'*, and so on.


            For banks that require a document to log in, you **must** provide
            the `username_type` parameter to specify which document is used when
            creating the link.


            ‚ÑπÔ∏è To know which institutions require the `username_type` parameter,
            get the
            [details](https://developers.belvo.com/reference/detailinstitution)
            for the institution and check the `form_fields` array in the
            response.


            For a list of standards codes, see the table below.


            | Code | Description |

            |-----------|-------|

            | `001` | C√©dula de Ciudadan√≠a |

            | `002` | C√©dula de Extranjer√≠a |

            | `003` | Pasaporte |

            | `004` | Tarjeta de Identidad |

            | `005` | Registro Civil |

            | `006` | N√∫mero Identificaci√≥n Personal |

            | `020` | NIT |

            | `021` | NIT Persona Natural |

            | `022` | NIT Persona Extranjera |

            | `023` | NIT Persona Jur√≠dica |

            | `024` | NIT Menores |

            | `025` | NIT Desasociado |

            | `030` | Trj. Seguro Social Extranjero |

            | `031` | Sociedad Extranjera sin NIT en Colombia |

            | `032` | Fideicomiso |

            | `033` | RIF Venezuela |

            | `034` | CIF |

            | `035` | N√∫mero de Identidad |

            | `036` | RTN |

            | `037` | C√©dula de Identidad |

            | `038` | DIMEX |

            | `039` | CED |

            | `040` | PAS |

            | `041` | Documento √önico de Identidad |

            | `042` | NIT Salvadore√±o |

            | `100` | Ag√™ncia e conta |

            | `101` | C√≥digo do operador |

            | `102` | Cart√£o de cr√©dito |

            | `103` | CPF |
          type: string
          example: '001'
        certificate:
          description: >
            For certain fiscal institutions, it is possible to log in using a
            certificate and a private key, which enables a faster connection to
            the institution.


            Belvo supports a base64 encoded `certificate`. If the `certificate`
            parameter is used, you *must* also provide the `private_key`
            parameter.
          type: string
          example: 1234567890abcd=
        private_key:
          description: >
            For certain fiscal institutions, it is possible to log in using a
            certificate and a private key, which enables a faster connection to
            the institution.


            Belvo supports a base64 encoded `private_key`. If the `private_key`
            parameter is used, you *must* also provide the `certificate`
            parameter.
          type: string
          example: 1234567890abcd=
    TooManySessionsError:
      title: Too Many Sessions
      description: |-
        This error occurs when:

          - a user is attempting to log in to their institution via Belvo while also already being logged in to their institution on a web browser or mobile app.
          - you make a request for information while Belvo is scraping data from the institution for that user.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`too_many_sessions`) that allows you to
            classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-too_many_sessions"
            target="_blank">400 too_many_sessions errors</a>.
          type: string
          example: too_many_sessions
        message:
          description: |-
            A short description of the error. 

            For `too_many_sessions` errors, the description is:
              
              - `Impossible to login, a session is already opened with the institution for these credentials`.
          type: string
          example: >-
            Impossible to login, a session is already opened with the
            institution for these credentials
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    SessionExpiredError:
      title: Session Expired
      description: >-
        This error occurs when you try to resume a request session that has
        already expired. This is usually because the user took too long to
        provide their authentication token.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`session_expired`) that allows you to classify
            and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-session_expired"
            target="_blank">400 session_expired errors</a>.
          type: string
          example: session_expired
        message:
          description: |-
            A short description of the error. 

            For `session_expired` errors, the description is:
              
              - `The session you are trying to resume has expired, please start again from register/retrieve endpoint`.
          type: string
          example: >-
            The session you are trying to resume has expired, please start again
            from register/retrieve endpoint
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    ValidationError:
      title: Validation Error
      description: >-
        This error occurs when you try to resume a request session that has
        already expired. This is usually because the user took too long to
        provide their authentication token.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`null`, `does_not_exist`, `required`) that
            allows you to classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle:
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-blank" target="_blank">400 blank errors</a>
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-null" target="_blank">400 null errors</a>
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-does_not_exist" target="_blank">400 does_not_exist errors</a>
              - <a href="https://developers.belvo.com/docs/belvo-api-errors#400-required" target="_blank">400 required errors</a>
          type: string
          example: required
        message:
          description: |-
            A short description of the error. 

            For `session_expired` errors, the description can be (among others):
              
              - `This field is required.`
              - `Object with name=narnia does not exist.`
              - `This field may not be null.`
              - `This field may not be blank.`
          type: string
          example: This field is required.
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
        field:
          description: Name of the field where the error was encountered.
          type: string
          nullable: true
          example: link
    InstitutionDownError:
      title: Institution Down
      description: >-
        This error occurs when the institution's website that you're trying to
        access is down due to maintenance or other issues, which means Belvo is
        unable to create new links or retrieve new data.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`institution_down`) that allows you to classify
            and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_down"
            target="_blank">400 institution_down errors</a>.
          type: string
          example: institution_down
        message:
          description: |-
            A short description of the error. 

            For `institution_down` errors, the description is:
              
              - `The financial institution is down, try again later`.
          type: string
          example: The financial institution is down, try again later
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    InstitutionUnavailableError:
      title: Institution Unavailable
      description: >-
        This error occurs when the institution's website that you're trying to
        access is down due to maintenance or other issues, which means Belvo is
        unable to create new links or retrieve new data.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`institution_unavailable`) that allows you to
            classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_unavailable"
            target="_blank">400 institution_unavailable errors</a>.
          type: string
          example: institution_unavailable
        message:
          description: |-
            A short description of the error.

            For `institution_unavailable` errors, the description is:
              
              - `The financial institution is unavailable`.
          type: string
          example: The financial institution is unavailable
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    InstitutionInactiveError:
      title: Institution Inactive
      description: >-
        This error occurs when we (Belvo) have deactivated the institution in
        our API.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`institution_inactive`) that allows you to
            classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-institution_inactive"
            target="_blank">400 institution_inactive errors</a>.
          type: string
          example: institution_inactive
        message:
          description: |-
            A short description of the error. 

            For `institution_inactive` errors, the description is:
              
              - `The institution has been temporarily deactivated`.
          type: string
          example: The institution has been temporarily deactivated
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    UnsupportedOperationError:
      title: Unsupported Operation
      description: >-
        This error occurs when you try to access some data operation that Belvo
        does not support for an institution. For example, trying to access the
        Balances resource for fiscal institutions.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`unsupported_operation`) that allows you to
            classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-unsupported_operation"
            target="_blank">400 unsupported_operation errors</a>.
          type: string
          example: unsupported_operation
        message:
          description: |-
            A short description of the error. 

            For `unsupported_operation` errors, the description is:
              
              - `The resource you are trying to access is not supported by this institution`.
          type: string
          example: >-
            The resource you are trying to access is not supported by this
            institution
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    InvalidLinkError:
      title: Invalid Link
      description: >-
        This error occurs when you try to access an account but the user
        credentials are no longer valid, prompting an error from the
        institution.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`invalid_link`) that allows you to classify and
            handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_link"
            target="_blank">400 invalid_link errors</a>.
          type: string
          example: invalid_link
        message:
          description: |-
            A short description of the error. 

            For `invalid_link` errors, the description is:
              
              - `The link has been invalidated. You may need to update link credentials`.
          type: string
          example: >-
            The link has been invalidated. You may need to update link
            credentials
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    UnconfirmedLinkError:
      title: Unconfirmed Link
      description: >-
        This error occurs when you try to access a link that was paused
        previously (and as such is not active now).

        A Link's status is set to `unconfirmed_link` when your user has not
        completed the Link creation process successfully (for example, they
        might not provide a valid MFA token).
      type: object
      properties:
        code:
          description: >-
            A unique error code (`unconfirmed_link`) that allows you to classify
            and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-unconfirmed_link"
            target="_blank">400 unconfirmed_link errors</a>.
          type: string
          example: unconfirmed_link
        message:
          description: |-
            A short description of the error. 

            For `unconfirmed_link` errors, the description is:
              
              - `The link creation has not been completed yet`.
          type: string
          example: The link creation has not been completed yet
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    TokenRequiredResponseTokenGenerationData:
      description: Details on how to generate the token.
      type: object
      properties:
        instructions:
          description: Instructions for token generation.
          type: string
          example: Use this code to generate the token
        type:
          description: Type of the data to generate the token (QR code, numeric challenge).
          type: string
          example: numeric
        value:
          description: Value to use to generate the token.
          type: string
          example: '12345'
        expects_user_input:
          description: >-
            Indicates whether the user needs to provide input in order to
            complete the authentication.

            When set to `false`, your user may need to:

            - confirm the login on another device - scan a QR code

            You will still need to make a PATCH call to complete the request.
          type: boolean
          example: true
          default: true
    TokenRequiredResponse:
      description: MFA Token Required
      type: object
      properties:
        code:
          description: >-
            A unique error code (`token_required`) that allows you to classify
            and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#428-token_required"
            target="_blank">428 token_required errors</a>.
          type: string
          example: token_required
        message:
          description: |-
            A short description of the error. 

            For `token_required` errors, the description is:
              
              - `A MFA token is required by the institution to login`.
          type: string
          example: A MFA token is required by the institution to login
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 8c7b283c6efa449c9c028a16b5c249fa
        session:
          description: >-
            A 32-character unique ID of the login session (matching a regex
            pattern of: `[a-f0-9]{32}`).
          type: string
          pattern: '[a-f0-9]{32}'
          example: 2675b703b9d4451f8d4861a3eee54449
        expiry:
          description: Session duration time in seconds.
          type: integer
          format: int32
          example: 9600
        link:
          description: >-
            Unique identifier created by Belvo, used to reference the current
            Link.
          type: string
          format: uuid
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        token_generation_data:
          $ref: '#/components/schemas/TokenRequiredResponseTokenGenerationData'
    UnexpectedError:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`unexpected_error`) that allows you to classify
            and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#500-unexpected_error"
            target="_blank">500 unexpected_error errors</a>.
          type: string
          example: unexpected_error
        message:
          description: |-
            A short description of the error. 

            For `unexpected_error` errors, the description is:
              
              - `Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution`.
          type: string
          example: >-
            Belvo is unable to process the request due to an internal system
            issue or to an unsupported response from an institution
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    PatchBodyWithoutSaveData:
      description: A JSON object containing a session UUID and a MFA token
      type: object
      required:
        - session
        - link
      properties:
        session:
          description: >-
            The session you want to resume. You need to use the `session` value
            that is provided in the 428 Token Required response that you receive
            after you make your POST request.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 6e7b283c6efa449c9c028a16b5c249fa
        token:
          description: >-
            The MFA token generated by the institution and required to continue
            a session.
          type: string
          example: 1234ab
        link:
          description: >-
            The `link.id` you want to resume. Must be the same `link.id` as the
            one you receive in the 428 Token Required response that contains the
            `session` ID.
          type: string
          format: uuid
          example: 683005d6-f45c-4adb-b289-f1a12f50f80c
    NotFoundError:
      title: Not Found
      type: object
      properties:
        code:
          description: >-
            A unique error code (`not_found`) that allows you to classify and
            handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#404-not_found"
            target="_blank">404 not_found errors</a>.
          type: string
          example: not_found
        message:
          description: |-
            A short description of the error. 

            For `not_found` errors, the description is:
              
              - `Not found`
          type: string
          example: Not found
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    LinksPutRequest:
      type: object
      required:
        - institution
        - username
        - password
      properties:
        password:
          description: The end-user's password used to log in to the institution.
          type: string
          example: password
        password2:
          description: >
            The end-user's second password used to log in to the institution.


            ‚ÑπÔ∏è This is only required by some institutions. To know which
            institutions require a second password, get the
            [details](https://developers.belvo.com/reference/detailinstitution)
            for the institution and check the `form_fields` array in the
            response.
          type: string
          example: pin
        token:
          description: |
            The MFA token required by the bank to log in.
          type: string
          example: 1234ab
        username_type:
          description: |
            Type of document to be used as a username.

              Some banking institutions accept different documents to be used as the `username` to login. For example, the *C√©dula de Ciudadan√≠a*, *C√©dula de Extranjer√≠a*, *Pasaporte'*, and so on.

              For banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.

              ‚ÑπÔ∏è To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.

              For a list of standards codes, see the table below.

            | Code | Description |
            |-----------|-------|
            | `001` | C√©dula de Ciudadan√≠a |
            | `002` | C√©dula de Extranjer√≠a |
            | `003` | Pasaporte |
            | `004` | Tarjeta de Identidad |
            | `005` | Registro Civil |
            | `006` | N√∫mero Identificaci√≥n Personal |
            | `020` | NIT |
            | `021` | NIT Persona Natural |
            | `022` | NIT Persona Extranjera |
            | `023` | NIT Persona Jur√≠dica |
            | `024` | NIT Menores |
            | `025` | NIT Desasociado |
            | `030` | Trj. Seguro Social Extranjero |
            | `031` | Sociedad Extranjera sin NIT en Colombia |
            | `032` | Fideicomiso |
            | `033` | RIF Venezuela |
            | `034` | CIF |
            | `035` | N√∫mero de Identidad |
            | `036` | RTN |
            | `037` | C√©dula de Identidad |
            | `038` | DIMEX |
            | `039` | CED |
            | `040` | PAS |
            | `041` | Documento √önico de Identidad |
            | `042` | NIT Salvadore√±o |
            | `100` | Ag√™ncia e conta |
            | `101` | C√≥digo do operador |
            | `102` | Cart√£o de cr√©dito |
            | `103` | CPF |
          type: string
          example: '001'
        certificate:
          description: >
            For certain fiscal institutions, it is possible to log in using a
            certificate and a private key, which enables a faster connection to
            the institution.


            Belvo supports a base64 encoded `certificate`. If the `certificate`
            parameter is used, you *must* also provide the `private_key`
            parameter.
          type: string
          example: 1234567890abcd=
        private_key:
          description: >
            For certain fiscal institutions, it is possible to log in using a
            certificate and a private key, which enables a faster connection to
            the institution.


            Belvo supports a base64 encoded `private_key`. If the `private_key`
            parameter is used, you *must* also provide the `certificate`
            parameter.
          type: string
          example: 1234567890abcd=
    ChangeAccessMode:
      type: object
      required:
        - access_mode
      properties:
        access_mode:
          $ref: '#/components/schemas/EnumLinkAccessModeRequest'
    InvalidAccessMode:
      title: Invalid Access Mode
      description: >-
        This error occurs when you try to update a link from single to
        recurrent, but there are no login credentials stored for the user.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`invalid_access_mode_switch`) that allows you
            to classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_access_mode_switch"
            target="_blank">400 invalid_access_mode_switch errors</a>.
          type: string
          example: invalid_link
        message:
          description: |-
            A short description of the error. 

            For `invalid_access_mode_switch` errors, the description is:
              
              - `This link doesn't have stored credentials hence it can't be switched to recurrent mode"`.
          type: string
          example: >-
            This link doesn't have stored credentials hence it can't be switched
            to recurrent mode"
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    EnumInstitutionType:
      description: |
        The type of institution. We return one of the following values:

          - `bank`
          - `fiscal`
          - `employment`
      type: string
      enum:
        - bank
        - fiscal
        - employment
    InstitutionAccount:
      description: Details regarding the institution.
      type: object
      properties:
        name:
          description: >-
            The name of the institution, as designated by Belvo.

            Please see our
            [Institutions](https://developers.belvo.com/docs/institution)
            DevPortal article for a detailed list of institution names.
          type: string
          example: erebor_mx_retail
        type:
          $ref: '#/components/schemas/EnumInstitutionType'
    EnumAccountCategory:
      description: |
        The type of account.
        We return one of the following enum values:
          - `CHECKING_ACCOUNT`
          - `CREDIT_CARD`
          - `INVESTMENT_ACCOUNT`
          - `LOAN_ACCOUNT`
          - `PENSION_FUND_ACCOUNT`
          - `RECEIVABLES_ACCOUNT`
          - `SAVINGS_ACCOUNT`
          - `UNCATEGORIZED`
          - `null`
      type: string
      nullable: true
      enum:
        - CHECKING_ACCOUNT
        - CREDIT_CARD
        - INVESTMENT_ACCOUNT
        - LOAN_ACCOUNT
        - PENSION_FUND_ACCOUNT
        - RECEIVABLES_ACCOUNT
        - SAVINGS_ACCOUNT
        - UNCATEGORIZED
        - null
      example: CHECKING_ACCOUNT
    AccountsBalance:
      description: |
        Details regarding the current and available balances for the account.
      type: object
      required:
        - current
      properties:
        current:
          description: >-
            The current balance is calculated differently according to the type
            of account.


            - **üí∞ Checking and saving accounts**:


            The user's account balance at the `collected_at` timestamp.

            - **üí≥ Credit cards**:


            The amount the user has spent in the current card billing period
            (see `credit_data.cutting_date` for information on when the current
            billing period finishes).

            - **üè° Loan accounts**:


            The amount remaining to pay on the users's loan (same as
            `loan_data.outstanding_balance`).
          type: number
          format: float
          nullable: true
          example: 5874.13
        available:
          description: >-
            The balance that the account owner can use.

            - **üí∞ Checking and saving accounts**:


            The available balance may be different to the `current` balance due
            to pending transactions.

            - **üí≥ Credit cards**:


            The credit amount the user still has available for the current
            period. The amount is calculated as `credit_data.credit_limit` minus
            `balance.current`.

            - **üè° Loan accounts**:


            The present value required to pay off the loan, as provided by the
            institution.


            **Note:** If the institution does not provide this value, we return
            `null`.
          type: number
          format: float
          nullable: true
          example: 5621.12
    AccountsCreditData:
      description: The credit options associated with this account.
      type: object
      required:
        - credit_limit
        - cutting_date
        - next_payment_date
        - minimum_payment
        - no_interest_payment
        - interest_rate
        - collected_at
      nullable: true
      properties:
        credit_limit:
          description: The maximum amount of credit the owner can receive.
          type: number
          format: float
          nullable: true
          example: 192000
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
          format: date-time
        cutting_date:
          description: The closing date of the credit period.
          type: string
          nullable: true
          example: '2019-12-11'
        next_payment_date:
          description: The due date for the next payment (`YYYY-MM-DD`).
          type: string
          example: '2019-12-13'
          nullable: true
        minimum_payment:
          description: The minimum amount to be paid on the `next_payment_date`.
          type: number
          format: float
          nullable: true
          example: 2400.3
        no_interest_payment:
          description: The minimum amount required to pay to avoid generating interest.
          type: number
          format: float
          nullable: true
          example: 2690.83
        interest_rate:
          description: The annualized interest rate of the credit.
          type: number
          format: float
          nullable: true
          example: 4
        end_date:
          description: |
            *This field has been deprecated.*
          type: string
          deprecated: true
          nullable: true
          example: null
        monthly_payment:
          description: |
            *This field has been deprecated.*

            *The recurrent monthly payment, if applicable.*
          type: number
          deprecated: true
          nullable: true
          example: null
        last_payment_date:
          description: |
            *This field has been deprecated.*


            *The date when the last credit payment was made.*
          type: string
          deprecated: true
          nullable: true
          example: null
    EnumLoanDataInterestRateType:
      description: >
        The period that the interest is applied to the loan. We return one of
        the following values:

          - `MONTHLY`
          - `YEARLY`
      type: string
      nullable: true
      enum:
        - MONTHLY
        - YEARLY
      example: MONTHLY
    AccountsLoanDataInterestRate:
      description: Breakdown of the interest applied to the loan.
      type: object
      required:
        - name
        - type
        - value
      properties:
        name:
          description: The name of the type of interest rate applied to the loan.
          type: string
          nullable: true
          example: jurosEfetivo
        type:
          $ref: '#/components/schemas/EnumLoanDataInterestRateType'
        value:
          description: The interest rate (in percent or currency value).
          type: number
          format: float
          nullable: true
          example: 7.85
    EnumLoanDataFeeType:
      description: |
        The type of fee. We return one of the following values:

          - `OPERATION_FEE`
          - `INSURANCE_FEE`
          - `OTHERS`
      type: string
      enum:
        - OPERATION_FEE
        - INSURANCE_FEE
        - OTHERS
      example: OPERATION_FEE
    AccountsLoanDataFees:
      description: Breakdown of the fees applied to the loan.
      type: object
      nullable: true
      required:
        - type
        - value
      properties:
        type:
          $ref: '#/components/schemas/EnumLoanDataFeeType'
        value:
          description: |
            The total value of the fee. Same currency of the Loan.
          type: number
          format: float
          example: 5.6
    AccountsLoanData:
      description: The loan options associated with this account.
      type: object
      nullable: true
      required:
        - principal
        - monthly_payment
        - outstanding_balance
        - interest_rates
        - collected_at
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        contract_amount:
          description: >-
            The initial total loan amount, calculated by the institution, when
            the contract was signed. This amount includes the principal +
            interest + taxes + fees.
          type: number
          format: float
          nullable: true
          example: 202000
        principal:
          description: Total amount of the loan (the amount the user receives).
          type: number
          format: float
          nullable: true
          example: 192000
        loan_type:
          description: The type of the loan, according to the institution.
          type: string
          nullable: true
          example: Consignado
        payment_day:
          description: >-
            The day of the month by which the owner needs to pay the loan
            (`YYYY-MM-DD`).
          type: string
          nullable: true
          example: '27'
        outstanding_principal:
          description: >
            Outstanding loan amount, that is, how much remains to pay on the
            principal (not including interest).
          type: number
          format: float
          nullable: true
          example: 142023
        outstanding_balance:
          description: The amount remaining to pay in total, including interest.
          type: number
          format: float
          nullable: true
          example: 182000
        monthly_payment:
          description: The recurrent monthly payment, if applicable.
          type: number
          format: float
          nullable: true
          example: 1000
        interest_rates:
          description: Breakdown of the interest applied to the loan.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AccountsLoanDataInterestRate'
        fees:
          description: Breakdown of the fees applied to the loan.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AccountsLoanDataFees'
        number_of_installments_total:
          description: The total number of installments required to pay the loan.
          type: integer
          format: int32
          nullable: true
          example: 60
        number_of_installments_outstanding:
          description: The number of installments left to pay.
          type: integer
          format: int32
          nullable: true
          example: 48
        contract_start_date:
          description: The date when the loan contract was signed (`YYYY-MM-DD`).
          type: string
          format: date
          nullable: true
          example: '2020-03-01'
        contract_end_date:
          description: The date when the loan is expected to be completed.
          type: string
          format: date
          example: '2027-10-01'
        contract_number:
          description: The contract number of the loan, as given by the institution.
          type: string
          nullable: true
          example: 890ASLDJF87SD00
        credit_limit:
          description: |
            This field has been deprecated.

            Please see `principal` instead.
          type: number
          nullable: true
          deprecated: true
          example: null
        last_period_balance:
          description: |
            This field has been deprecated.

            Please see `outstanding_balance` instead.
          type: number
          deprecated: true
          nullable: true
          example: null
        interest_rate:
          description: |
            This field has been deprecated.

            Please see the `interest_rates` object instead.
          type: number
          nullable: true
          deprecated: true
          example: null
        limit_day:
          description: |
            This field has been deprecated.

            Please see `payment_day` instead.
          type: string
          deprecated: true
          nullable: true
          example: null
        cutting_day:
          description: |
            This field has been deprecated.

            The closing day of the month for the loan.
          type: string
          deprecated: true
          nullable: true
          example: null
        cutting_date:
          description: |
            This field has been deprecated.

            The closing date of the loan period.
          type: string
          deprecated: true
          nullable: true
          example: null
        last_payment_date:
          description: |
            This field has been deprecated.

            The date when the last loan payment was made.
          type: string
          deprecated: true
          nullable: true
          example: null
        no_interest_payment:
          description: |
            This field has been deprecated.

            The minimum amount required to pay to avoid generating interest.
          type: number
          deprecated: true
          nullable: true
          example: null
    AccountsFundsDataPublicIdentifications:
      type: object
      required:
        - name
        - value
      properties:
        name:
          description: The type of identification number for the fund.
          type: string
          example: CNPJ
        value:
          description: The fund's identification number.
          type: string
          nullable: true
          example: 05.954.445/0221-68
    AccountsFundsData:
      type: object
      properties:
        name:
          description: The pension fund name.
          type: string
          nullable: true
          example: FIX X
        type:
          description: Type of pension fund.
          type: string
          nullable: true
          example: CNPJ
        public_identifications:
          description: The fund's public IDs.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AccountsFundsDataPublicIdentifications'
        balance:
          description: The amount in the fund.
          type: number
          format: float
          nullable: true
          example: 88427.94
        percentage:
          description: >-
            How much this fund, as a percentage, contributes to the pension
            account's total.
          type: number
          format: float
          nullable: true
          example: 100
    AccountsReceivablesData:
      description: Additional details regarding the receivables account, if applicable.
      type: object
      required:
        - current
        - available
        - anticipated
        - collected_at
      nullable: true
      properties:
        current:
          description: The total sum of all receivables (`available` + `anticipated`)
          type: number
          format: float
          nullable: true
          example: 2193.83
        available:
          description: >-
            The amount that the owner of the account will receive according to
            an established date.
          type: number
          format: float
          nullable: true
          example: 800.37
        anticipated:
          description: >-
            The amount that the owner of the account received earlier than
            contracted.
          type: number
          format: float
          nullable: true
          example: 1393.46
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
    Account:
      description: >
        Details regarding the account.


        **Note**: For our recurring expenses resource, this account relates to
        the account that was analyzed to generate the recurring expenses report.
      type: object
      nullable: true
      required:
        - name
        - number
        - type
        - category
        - public_identification_name
        - public_identification_value
        - currency
        - balance
        - balance_type
        - credit_data
        - loan_data
        - collected_at
        - last_accessed_at
      properties:
        id:
          description: >-
            The unique identifier created by Belvo used to reference the current
            account.
          type: string
          format: uuid
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
        link:
          description: The `link.id` the account belongs to.
          type: string
          nullable: true
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        institution:
          $ref: '#/components/schemas/InstitutionAccount'
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2019-09-27T13:01:41.941Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        category:
          $ref: '#/components/schemas/EnumAccountCategory'
        balance_type:
          description: >
            Indicates whether this account is either an `ASSET` or a
            `LIABILITY`. You can consider the balance of an `ASSET` as being
            positive, while the balance of a `LIABILITY` as negative.
          type: string
          nullable: true
          example: ASSET
        type:
          description: The account type, as designated by the institution.
          type: string
          nullable: true
          example: Cuentas de efectivo
        name:
          description: The account name, as given by the institution.
          type: string
          nullable: true
          example: Cuenta Perfiles- M.N. - MXN-666
        number:
          description: The account number, as designated by the institution.
          type: string
          nullable: true
          example: '4057068115181'
        balance:
          $ref: '#/components/schemas/AccountsBalance'
        currency:
          description: |-
            The currency of the account. For example:
            - üáßüá∑ BRL (Brazilian Real)
            - üá®üá¥ COP (Colombian Peso)
            - üá≤üáΩ MXN (Mexican Peso)

             Please note that other currencies other than in the list above may be returned.
          type: string
          nullable: true
          example: MXN
        public_identification_name:
          description: >
            The public name for the type of identification. For example:
            `"CLABE"`.


            ‚ÑπÔ∏è For üáßüá∑ Brazilian savings and checking accounts, this field will
            be `AGENCY/ACCOUNT`.
          type: string
          nullable: true
          example: CLABE
        public_identification_value:
          description: >
            The value for the `public_identification_name`.


            ‚ÑπÔ∏è For üáßüá∑ Brazilian savings and checking accounts, this field will
            be the agency and bank account number, separated by a slash.

            For example: `0444/45722-0`.
          type: string
          nullable: true
          example: '150194683119900273'
        last_accessed_at:
          description: >-
            The ISO-8601 timestamp of Belvo's most recent successful access to
            the institution for the given link.
          type: string
          format: date-time
          nullable: true
          example: '2021-03-09T10:28:40.000Z'
        credit_data:
          $ref: '#/components/schemas/AccountsCreditData'
        loan_data:
          $ref: '#/components/schemas/AccountsLoanData'
        funds_data:
          description: One or more funds that contribute to the the pension account.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/AccountsFundsData'
        receivables_data:
          $ref: '#/components/schemas/AccountsReceivablesData'
        bank_product_id:
          description: |
            *This field has been deprecated.*

            *The institution's product ID for the account type.*
          deprecated: true
          type: string
          nullable: true
          example: null
        internal_identification:
          description: |
            *This field has been deprecated.*

            *The institution's internal identification for the account.*
          deprecated: true
          type: string
          nullable: true
          example: null
    AccountsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: An array of Account objects.
          type: array
          items:
            $ref: '#/components/schemas/Account'
    StandardRequest:
      type: object
      required:
        - link
      properties:
        link:
          description: The `link.id` that you want to get information for.
          type: string
          format: uuid
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        token:
          description: The OTP token generated by the bank.
          type: string
          example: 1234ab
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
    RequestTimeoutError:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`request_timeout`) that allows you to classify
            and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#408-request_timeout"
            target="_blank">408 request_timeout errors</a>.
          type: string
          example: request_timeout
        message:
          description: |-
            A short description of the error. 

            For `request_timeout` errors, the description is:
              
              - `The request timed out, you can retry asking for less data by changing your query parameters`.
          type: string
          example: >-
            The request timed out, you can retry asking for less data by
            changing your query parameters
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    PatchBody:
      description: A JSON object containing a session UUID and a MFA token
      type: object
      required:
        - session
        - link
      properties:
        session:
          description: >-
            The session you want to resume. You need to use the `session` value
            that is provided in the 428 Token Required response that you receive
            after you make your POST request.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 6e7b283c6efa449c9c028a16b5c249fa
        token:
          description: >-
            The MFA token generated by the institution and required to continue
            a session.
          type: string
          example: 1234ab
        link:
          description: >-
            The `link.id` you want to resume. Must be the same `link.id` as the
            one you receive in the 428 Token Required response that contains the
            `session` ID.
          type: string
          format: uuid
          example: 683005d6-f45c-4adb-b289-f1a12f50f80c
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
          example: true
    TransactionMerchantData:
      description: >
        Additional data regarding the merchant involved in the transaction.

        We only return merchant information for new transactions made from
        *checking* or *credit card* accounts.

        > **Get merchant information**
         We retrieve the merchant information for a transaction as part of our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) product, turning raw data into actionable insights. To enable this product, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.
      type: object
      nullable: true
      properties:
        logo:
          description: The URL to the merchant's logo.
          type: string
          nullable: true
          example: https://logo.clearbit.com/asesor-contable.es
        website:
          description: The URL to the merchant's website.
          type: string
          nullable: true
          example: https://merchants-r-us.com
        merchant_name:
          description: The name of the merchant.
          type: string
          example: Merchants R Us Global
    EnumTransactionCategory:
      description: >
        The name of the category to which this transaction belongs.


        > **Get transaction categorization**

        With [Transaction
        categorization](https://developers.belvo.com/docs/banking#categorizing-transactions),
        we clean and categorize transactions for you, turning raw data into
        actionable insights. To enable this feature, just [reach
        out](https://belvo.com/contact/?utm_source=documentation) to us, and
        we'll get right to it.


        We return one of the following enum values:

          - `Bills & Utilities`
          - `Credits & Loans`
          - `Deposits`
          - `Fees & Charges`
          - `Food & Groceries`
          - `Home & Life`
          - `Income & Payments`
          - `Insurance`
          - `Investments & Savings`
          - `Online Platforms & Leisure`
          - `Personal Shopping`
          - `Taxes`
          - `Transfers`
          - `Transport & Travel`
          - `Unknown`*
          - `Withdrawal & ATM`
          - `null`


          \* For clients not using our Transaction Categorization product, we return `null` instead.
      type: string
      nullable: true
      enum:
        - Bills & Utilities
        - Credits & Loans
        - Deposits
        - Fees & Charges
        - Food & Groceries
        - Home & Life
        - Income & Payments
        - Insurance
        - Investments & Savings
        - Online Platforms & Leisure
        - Personal Shopping
        - Taxes
        - Transfers
        - Transport & Travel
        - Unknown
        - Withdrawal & ATM
        - null
      example: Income & Payments
    EnumTransactionSubcategory:
      description: |-
        The transactions subcategory.

          > **Get transaction categorization**
          For clients not using our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we return `null` instead. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.


        We return one of the following enum values:

          - `Electricity & Energy`
          - `Rent`
          - `Telecommunications`
          - `Water`
          - `Auto`
          - `Credit Card`
          - `Instalment`
          - `Interest & Charges`
          - `Mortgage`
          - `Pay Advance`
          - `Personal`
          - `Adjustments`
          - `Bank Fees`
          - `Chargeback`
          - `Refund`
          - `Blocked Balances`
          - `Alimony`
          - `Alcohol & Tobacco`
          - `Bakery & Coffee`
          - `Bars & Nightclubs`
          - `Convenience Store`
          - `Delivery`
          - `Groceries`
          - `Restaurants`
          - `Education`
          - `Gyms & Fitness`
          - `Hair & Beauty`
          - `Health`
          - `Home Decor & Appliances`
          - `Laundry & Dry Cleaning`
          - `Pharmacies`
          - `Professional Services`
          - `Veterinary Services`
          - `Freelance`
          - `Interest`
          - `Retirement`
          - `Salary`
          - `Government`
          - `Home Insurance`
          - `Auto Insurance`
          - `Health & Life Insurance`
          - `Savings`
          - `Fixed income`
          - `Equity`
          - `Investment Funds`
          - `Derivatives`
          - `Cryptocurrencies`
          - `Apps, Software and Cloud Services`
          - `Events, Parks and Museums`
          - `Gambling`
          - `Gaming`
          - `Lottery`
          - `Movie & Audio`
          - `Books & News`
          - `Clothing & Accessories`
          - `Department Store`
          - `Electronics`
          - `E-commerce`
          - `Gifts`
          - `Office Supplies`
          - `Pet Supplies`
          - `Auto Tax & Fees`
          - `Donation`
          - `Government Fees`
          - `Income Tax`
          - `Real Estate Tax & Fees`
          - `Tax Return`
          - `Accommodation`
          - `Auto Expenses`
          - `Auto Rental`
          - `Flights`
          - `Gas`
          - `Mileage Programs`
          - `Parking & Tolls`
          - `Public Transit`
          - `Taxis & Rideshares`
          - `Other`
          - `null`
      type: string
      nullable: true
      enum:
        - Electricity & Energy
        - Rent
        - Telecommunications
        - Water
        - Auto
        - Credit Card
        - Instalment
        - Interest & Charges
        - Mortgage
        - Pay Advance
        - Personal
        - Adjustments
        - Bank Fees
        - Chargeback
        - Refund
        - Blocked Balances
        - Alimony
        - Alcohol & Tobacco
        - Bakery & Coffee
        - Bars & Nightclubs
        - Convenience Store
        - Delivery
        - Groceries
        - Restaurants
        - Education
        - Gyms & Fitness
        - Hair & Beauty
        - Health
        - Home Decor & Appliances
        - Laundry & Dry Cleaning
        - Pharmacies
        - Professional Services
        - Veterinary Services
        - Freelance
        - Interest
        - Retirement
        - Salary
        - Government
        - Home Insurance
        - Auto Insurance
        - Health & Life Insurance
        - Savings
        - Fixed income
        - Equity
        - Investment Funds
        - Derivatives
        - Cryptocurrencies
        - Apps, Software and Cloud Services
        - Events, Parks and Museums
        - Gambling
        - Gaming
        - Lottery
        - Movie & Audio
        - Books & News
        - Clothing & Accessories
        - Department Store
        - Electronics
        - E-commerce
        - Gifts
        - Office Supplies
        - Pet Supplies
        - Auto Tax & Fees
        - Donation
        - Government Fees
        - Income Tax
        - Real Estate Tax & Fees
        - Tax Return
        - Accommodation
        - Auto Expenses
        - Auto Rental
        - Flights
        - Gas
        - Mileage Programs
        - Parking & Tolls
        - Public Transit
        - Taxis & Rideshares
        - Other
        - null
      example: Freelance
    EnumTransactionType:
      description: >
        The direction of the transaction:

        - `INFLOW` indicates money coming into the account.

        - `OUTFLOW` indicates money going out of the account.

        - `null` when no information was present regarding the direction of the
        transaction.
      type: string
      nullable: true
      enum:
        - OUTFLOW
        - INFLOW
        - null
      example: INFLOW
    EnumTransactionStatus:
      description: |
        The status of the transaction. We return one of the following values:

          - `PENDING`
          - `PROCESSED`
          - `UNCATEGORIZED`
          - `null`
          
      type: string
      enum:
        - PENDING
        - PROCESSED
        - UNCATEGORIZED
        - null
      nullable: true
      example: PROCESSED
    EnumTransactionBillStatus:
      description: |-
        The status of the bill that the transaction appears on. Can be one of:

          - `PAID`: The bill has been paid in full.
          - `CLOSED`: The bill has been closed by the institution.
          - `OPEN`: The bill is currently open. (Note: This is the main bill that Belvo retrieves balance data from).
          - `FUTURE`: The bill is pending.
          - `null`: No bill status was identified.
          
        ‚ÑπÔ∏è Note: Some banks consider CLOSED as PAID. 
      type: string
      nullable: true
      enum:
        - PAID
        - CLOSED
        - OPEN
        - FUTURE
        - null
      example: PAID
    TransactionCreditCardData:
      description: >-
        Additional data provided by the institution for credit card
        transactions.
      type: object
      nullable: true
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
          format: date-time
        bill_name:
          description: >
            The title of the monthly credit card bill the transaction belongs
            to. The format of the returned value is institution specific,
            however, some common examples are:


            - diciembre-2021

            - dec-2021

            - dec-21
          type: string
          nullable: true
          example: apr-2020
        bill_status:
          $ref: '#/components/schemas/EnumTransactionBillStatus'
        bill_amount:
          description: The aggregate bill amount, as of `collected_at`.
          type: number
          format: float
          nullable: true
          example: 300
        previous_bill_total:
          description: The total amount of the previous month's bill, if available.
          type: string
          nullable: true
          example: '9614.30'
    Transaction:
      type: object
      required:
        - value_date
        - accounting_date
        - amount
        - currency
        - description
        - reference
        - observations
        - balance
        - status
        - account
        - type
        - collected_at
        - category
        - merchant
      properties:
        description:
          description: >-
            The description of transaction provided by the institution. Usually
            this is the text that the end user sees in the online platform.
          type: string
          nullable: true
          example: SEVEN BUDDHAS RFC:XXXXXXXXXX
        id:
          description: Belvo's unique ID for the transaction.
          type: string
          format: uuid
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        internal_identification:
          description: |
            The institution's internal identification for the transaction.
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9-]{0,99}$
          example: TXpRMU9UQTROMWhZV2xSU1FUazJSMDl
        account:
          $ref: '#/components/schemas/Account'
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-11-28T10:27:44.813Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        value_date:
          description: The date when the transaction occurred, in `YYYY-MM-DD` format.
          nullable: true
          type: string
          format: date
          pattern: ^(\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$
          example: '2019-10-23'
        accounting_date:
          description: >-
            The ISO timestamp when the transaction was processed and accounted
            for by the institution.
          type: string
          format: date-time
          nullable: true
          example: '2019-10-23T13:01:41.941Z'
        amount:
          description: >
            The transaction amount.

            ‚ÑπÔ∏è The amount displayed is always positive as we indicate the
            direction of the transaction in the `type` parameter.
          type: number
          nullable: true
          format: float
          pattern: ^\d{1,15}\.\d{2,4}$
          example: 2145.45
        balance:
          description: The balance at the end of the transaction.
          type: number
          format: float
          nullable: true
          example: 16907.96
        currency:
          description: |
            The three-letter currency code (ISO-4217).
          type: string
          nullable: true
          maxLength: 3
          pattern: ^[A-Z]{3}$
          example: BRL
        observations:
          description: >-
            Additional observations provided by the institution on the
            transaction.
          type: string
          nullable: true
          example: OPTIONAL OBSERVATIONS
        merchant:
          $ref: '#/components/schemas/TransactionMerchantData'
        category:
          $ref: '#/components/schemas/EnumTransactionCategory'
        subcategory:
          $ref: '#/components/schemas/EnumTransactionSubcategory'
        reference:
          description: The reference number of the transaction, provided by the bank.
          type: string
          nullable: true
          maxLength: 128
          example: '8703'
        type:
          $ref: '#/components/schemas/EnumTransactionType'
        status:
          $ref: '#/components/schemas/EnumTransactionStatus'
        credit_card_data:
          $ref: '#/components/schemas/TransactionCreditCardData'
    TransactionsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of transaction objects.
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    TransactionsRequest:
      type: object
      required:
        - link
        - date_from
        - date_to
      properties:
        link:
          description: The `link.id` that you want to get information for.
          type: string
          format: uuid
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        account:
          description: If provided, we return transactions only from this account.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        date_from:
          description: >-
            The date from which you want to start getting transactions for, in
            `YYYY-MM-DD` format.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-08-05'
        date_to:
          description: >-
            The date you want to stop getting transactions for, in `YYYY-MM-DD`
            format.


            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-10-05'
        token:
          description: The OTP token generated by the bank.
          type: string
          example: 1234ab
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
    AsynchronousAccepted202:
      type: object
      properties:
        request_id:
          description: >-
            The unique ID for this request. We recommend you store this value to
            later identify which webhook event relates to an asynchronous
            request.
          type: string
          example: b5d0106ac9cc43d5b36199fe831f6bbe
    Balance:
      type: object
      properties:
        id:
          description: Belvo's unique ID for the balance request.
          type: string
          format: uuid
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        account:
          $ref: '#/components/schemas/Account'
        value_date:
          description: The date when the `balance` was available, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2019-10-23'
        balance:
          description: The funds available in the account by the end of the `value_date`.
          type: number
          format: float
          example: 50000
        current_balance:
          description: >
            *This field has been deprecated. Please use the `balance` field
            instead.*
          deprecated: true
          type: number
          nullable: true
          example: null
        statement:
          description: |
            *This field has been deprecated.*

            *The ID of the banking statement used to extract the `balance`.*
          deprecated: true
          type: string
          nullable: true
          example: null
        collected_at:
          description: |
            This field has been deprecated.

            The ISO-8601 timestamp when the data point was collected.
          type: string
          deprecated: true
          nullable: true
          format: date-time
          example: null
    BalancesPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of balance objects.
          type: array
          items:
            $ref: '#/components/schemas/Balance'
    BalancesRequest:
      type: object
      required:
        - link
        - date_from
        - date_to
      properties:
        link:
          description: The `link.id` that you want to get information for.
          type: string
          format: uuid
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        account:
          description: If provided, only balances matching this `account.id` are returned.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        date_from:
          description: >-
            Date from which you want to start receiving balances, in
            `YYYY-MM-DD` format.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2021-01-18'
        date_to:
          description: >-
            Date that you want to stop receiving balances, in `YYYY-MM-DD`
            format.


            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2021-02-15'
        token:
          description: The OTP token generated by the bank.
          type: string
          example: 1234ab
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
    InstitutionsFormFieldValues:
      type: object
      properties:
        code:
          description: The code of the document.
          type: string
          example: '001'
        label:
          description: |
            The label for the field. For example:
            - C√©dula de Ciudadan√≠a
            - C√©dula de Extranjer√≠a
            - Pasaporte
          type: string
          example: C√©dula de Ciudadan√≠a
        validation:
          description: The type of input validation used for the field.
          type: string
          example: ^.{1,}$
        validation_message:
          description: >-
            The message displayed when an invalid input is provided in the form
            field.
          type: string
          example: Invalid document number
        placeholder:
          description: The placeholder text in the form field.
          type: string
          example: DEF4444908M22
    InstitutionsFormField:
      type: object
      properties:
        name:
          description: The username, password, or username type field.
          type: string
          example: username
        type:
          description: The input type for the form field. For example, string.
          type: string
          example: text
        label:
          description: |
            The label of the form field. For example:
            - Client number
            - Key Bancanet
            - Document
          type: string
          example: Client number
        validation:
          description: The type of input validation used for the field.
          type: string
          example: ^.{1,}$
        placeholder:
          description: The placeholder text in the form field.
          type: string
          example: ABC333333A33
        validation_message:
          description: >-
            The message displayed when an invalid input is provided in the form
            field.
          type: string
          example: Invalid client number
        values:
          description: >-
            If the form field is for documents, the institution may require
            additional input regarding the document type.
          type: array
          items:
            $ref: '#/components/schemas/InstitutionsFormFieldValues'
    InstitutionsFeature:
      type: object
      properties:
        description:
          description: The description of the feature.
          type: string
          example: The institution may require a token during link creation or login
        name:
          description: The name of the feature.
          type: string
          example: token_required
    EnumInstitutionIntegrationType:
      description: >
        The type of technology used to access the institution. We return one of
        the following values:


        - `credentials`: Uses Belvo's scraping technology, combined with user
        credentials, to perform requests.

        - `openbanking`: Uses the bank's openbanking API to perform requests.
      type: string
      enum:
        - credentials
        - openbanking
      example: credentials
    EnumInstitutionStatus:
      description: >
        Indicates whether Belvo's integration with the institution is currently
        active (`healthy`) or undergoing maintenance (`down`).
      type: string
      enum:
        - healthy
        - down
      example: healthy
    Institution:
      type: object
      properties:
        id:
          description: The ID of the institution as designated by Belvo.
          type: integer
          format: int32
          example: 1003
        name:
          description: >-
            The name of the institution, as designated by Belvo.

            Please see our
            [Institutions](https://developers.belvo.com/docs/institution)
            DevPortal article for a detailed list of institution names.
          type: string
          example: erebor_mx_retail
        type:
          $ref: '#/components/schemas/EnumInstitutionType'
        website:
          description: The URL of the institution's website.
          type: string
          nullable: true
          example: https://www.erebor.com/
        display_name:
          description: The customer-facing name of the institution.
          type: string
          example: Erebor Mexico
        country_codes:
          description: |
            The country codes where the institution is available, for example:
            - üáßüá∑ BR (Brazil)
            - üá®üá¥ CO (Colombia)
            - üá≤üáΩ MX (Mexico)  
          type: array
          items:
            type: string
            example: MX
        primary_color:
          description: The primary color on the institution's website.
          type: string
          example: '#056dae'
        logo:
          description: The URL of the institution's logo.
          type: string
          nullable: true
          example: https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png
        icon_logo:
          description: The URL of the institution's icon logo.
          type: string
          nullable: true
          example: https://statics.belvo.io/widget/images/institutions/erebor.svg
        text_logo:
          description: The URL of the institution's text logo.
          type: string
          nullable: true
          example: https://statics.belvo.io/widget/images/institutions/erebor.svg
        form_fields:
          type: array
          items:
            $ref: '#/components/schemas/InstitutionsFormField'
        features:
          description: >
            The features that the institution supports. If the institution has
            no special features, then Belvo returns an empty array.


            Here is a list of the available features:

            - `token_required` indicates that the institution may require a
            token during link creation or when making any other requests.
          type: array
          items:
            $ref: '#/components/schemas/InstitutionsFeature'
        resources:
          description: >
            A list of Belvo resources that you can use with the institution.
            This list includes one or more of the following resources:

              - `ACCOUNTS`
              - `BALANCES`
              - `INCOMES`
              - `INVESTMENTS_PORTFOLIOS` *This field has been deprecated.*
              - `INVESTMENTS_TRANSACTIONS` *This field has been deprecated.*
              - `INVOICES`
              - `OWNERS`
              - `RECURRING_EXPENSES`
              - `RISK_INSIGHTS`
              - `TRANSACTIONS`
              - `TAX_COMPLIANCE_STATUS`
              - `TAX_STATUS`
              - `TAX_RETURNS`
          type: array
          items:
            description: A Belvo resource that the institution supports.
            type: string
            example: ACCOUNTS
          example:
            - ACCOUNTS
            - BALANCES
            - INCOMES
            - OWNERS
            - RECURRING_EXPENSES
            - RISK_INSIGHTS
            - TRANSACTIONS
        integration_type:
          $ref: '#/components/schemas/EnumInstitutionIntegrationType'
        status:
          $ref: '#/components/schemas/EnumInstitutionStatus'
    InstitutionsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of institution objects.
          type: array
          items:
            $ref: '#/components/schemas/Institution'
    OwnerDocumentId:
      description: >-
        Information regarding the identification document the owner provided to
        the bank.
      type: object
      required:
        - document_type
        - document_number
      nullable: true
      properties:
        document_type:
          description: >
            The type of document the owner provided to the institution to open
            the account. Common document types are:


            üáßüá∑ Brazil

            - `CPF` (*Cadastro de Pessoas F√≠sicas*)

            - `CNPJ`(*Cadastro Nacional de Pessoas Jur√≠dicas*)


            üá®üá¥ Colombia

            - `CC`(*C√©dula de Ciudadan√≠a*)

            - `NIT` (*N√∫mero de Identificaci√≥n Tributaria*)


            üá≤üáΩ Mexico

            - `CURP` (*Clave √önica de Registro de Poblaci√≥n*)

            - `NISS` (*N√∫mero de Seguridad Social*)
          type: string
          nullable: true
          example: CPF
        document_number:
          description: The document's identification number.
          type: string
          nullable: true
          example: 235578435-S
    Owner:
      type: object
      required:
        - internal_identification
        - display_name
        - email
        - phone_number
        - address
        - collected_at
      properties:
        id:
          description: Belvo's unique identifier used to reference the current owner.
          type: string
          format: uuid
          example: c749315b-eec2-435d-a458-06912878564f
        link:
          description: Belvo's unique ID for the current Link.
          type: string
          format: uuid
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        internal_identification:
          description: The institution's internal identifier for the owner.
          type: string
          nullable: true
          example: 7e5838e4
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        display_name:
          description: The full name of the owner, as provided by the bank.
          type: string
          nullable: true
          maxLength: 128
          example: John Doe
        email:
          description: The account owner's registered email address.
          type: string
          nullable: true
          format: email
          maxLength: 256
          example: johndoe@belvo.com
        phone_number:
          description: The account owner's registered phone number.
          type: string
          nullable: true
          example: +52-XXX-XXX-XXXX
        address:
          description: The accounts owners registered address.
          type: string
          nullable: true
          example: Carrer de la Llacuna, 162, 08018 Barcelona
        document_id:
          $ref: '#/components/schemas/OwnerDocumentId'
        last_name:
          description: |
            *This field has been deprecated.*

            *The last name of the account owner.*
          deprecated: true
          nullable: true
          type: string
          example: null
        second_last_name:
          description: |
            *This field has been deprecated.*

            *The second last name of the account owner.*
          deprecated: true
          nullable: true
          type: string
          example: null
    OwnersPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of owner objects.
          type: array
          items:
            $ref: '#/components/schemas/Owner'
    EnumInvoiceSatInvoiceType:
      description: |
        The fiscal institution's classification of the invoice.

        For Mexico's SAT, we return one of the following values:

          - `Egreso`
          - `Ingreso`
          - `N√≥mina`
          - `Pago`
          - `Traslado`
      type: string
      nullable: true
      enum:
        - Egreso
        - Ingreso
        - N√≥mina
        - Pago
        - Traslado
      example: Ingreso
    EnumInvoiceType:
      description: >
        The direction of the invoice (from the perspective of the Link owner).

        - `OUTFLOW` indicates a sent invoice. - `INFLOW` indicates a received
        invoice.
      type: string
      nullable: true
      enum:
        - OUTFLOW
        - INFLOW
        - null
      example: INFLOW
    EnumInvoiceSatPaymentMethod:
      description: >
        The payment method code used for this invoice, as defined by the legal
        entity of the country.


        - üá≤üáΩ Mexico [SAT catalog reference
        article](https://developers.belvo.com/docs/sat-catalogs#payment-method).
        For Mexico, we return `PUE`, `PIP`, `PPD`, or `null`.
      type: string
      nullable: true
      enum:
        - PUE
        - PIP
        - PPD
        - null
      example: PUE
    InvoiceDetailRetainedTaxSat:
      type: object
      required:
        - tax
        - tax_percentage
        - retained_tax_amount
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        tax_type:
          description: >
            **Note**: This field is not applicable for SAT Mexico and will
            return `null`.
          type: string
          nullable: true
          example: null
        tax:
          description: The type of retained tax (for example, ISR, IVA or IEPS).
          type: string
          nullable: true
          example: ISR
        tax_percentage:
          description: The percentage of tax retained.
          type: number
          format: float
          nullable: true
          example: 10
        retained_tax_amount:
          description: The amount of retained tax.
          type: number
          format: float
          nullable: true
          example: 209.79
    InvoiceDetailSat:
      type: object
      required:
        - description
        - product_identification
        - quantity
        - unit_amount
        - unit_description
        - unit_code
        - pre_tax_amount
        - tax_percentage
        - tax_amount
        - total_amount
      properties:
        description:
          description: >-
            The description of the invoice item (an invoice can have one or more
            items).
          type: string
          nullable: true
          example: December 2019 accounting fees
        product_identification:
          description: >
            The identification code of the product or the service, as defined by
            the legal entity in the country.

            - üá≤üáΩ [Mexico](http://200.57.3.89/Pys/catPyS.aspx)
          type: string
          nullable: true
          example: '84101600'
        quantity:
          description: The quantity of this invoice item.
          type: integer
          format: int32
          nullable: true
          example: 10
        unit_code:
          description: >
            The unit of measure, as defined by the legal entity in the country. 

            - üá≤üáΩ Mexico [SAT catalog
            reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
          type: string
          nullable: true
          example: E48
        unit_description:
          description: >
            The description of the item, as defined by the legal entity in the
            country.

            - üá≤üáΩ Mexico [SAT catalog
            reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)
          type: string
          nullable: true
          example: Unidad de servicio
        unit_amount:
          description: The price of one a singular item.
          type: number
          format: float
          nullable: true
          example: 200
        tax_type:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        pre_tax_amount:
          description: >-
            The total price for this item before tax is applied (`quantity` x
            `unit_amount`).
          type: number
          format: float
          nullable: true
          example: 400
        tax_percentage:
          description: The tax percentage to apply.
          type: number
          format: float
          nullable: true
          example: 16
        tax_amount:
          description: >-
            The amount of tax for this invoice item (`pre_tax_amount` x
            `tax_percentage`).
          type: number
          format: float
          nullable: true
          example: 64
        total_amount:
          description: >-
            The total price for this invoice item (`pre_tax_amount` +
            `tax_amount`).
          type: number
          format: float
          nullable: true
          example: 464
        retained_taxes:
          description: The retained tax on the invoice item.
          type: array
          items:
            $ref: '#/components/schemas/InvoiceDetailRetainedTaxSat'
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
    InvoicesPaymentsRelatedDocumentsSat:
      description: List of all the related deferred invoices affected by the payment.
      type: object
      required:
        - invoice_identification
        - currency
        - payment_method
        - previous_balance
        - amount_paid
        - outstanding_balance
      properties:
        invoice_identification:
          description: |
            The fiscal institution's unique ID for the related deferred invoice.
          type: string
          nullable: true
          example: 7EE015F3-6311-11EA-B02A-00155D014007
        currency:
          description: |
            The currency of the related invoice. For example:
                
            - üáßüá∑ BRL (Brazilian Real)
            - üá®üá¥ COP (Colombian Peso)
            - üá≤üáΩ MXN (Mexican Peso)
              
              Please note that other currencies other than in the list above may be returned.
          type: string
          nullable: true
          example: MXN
        payment_method:
          description: |
            The payment method of the related invoice.
          type: string
          nullable: true
          example: PPD
        partiality_number:
          description: |
            The payment installment number.
          type: integer
          format: int32
          example: 1
        previous_balance:
          description: |
            The invoice amount before the payment.
          type: number
          format: float
          nullable: true
          example: 18877.84
        amount_paid:
          description: |
            The amount paid in this installment.
          type: number
          format: float
          nullable: true
          example: 8000
        outstanding_balance:
          description: |
            The amount remaining to be paid.
          type: number
          format: float
          nullable: true
          example: 10877.84
    InvoicesPaymentsSat:
      type: object
      required:
        - date
        - payment_type
        - currency
        - exchange_rate
        - amount
        - operation_number
        - beneficiary_account_number
        - payer_rfc
        - payer_account_number
        - payer_bank_name
        - related_documents
      properties:
        date:
          description: |
            ISO-8601 timestamp when the payment was made.
          type: string
          format: date-time
          nullable: true
          example: '2020-03-17T12:00:00.000Z'
        payment_type:
          description: >
            Payment type code used for this invoice, as defined by the country's
            legal entity.


            - üá≤üáΩ Mexico [SAT catalog reference
            article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
          type: string
          nullable: true
          example: '03'
        currency:
          description: >
            The currency of the payment. For example:


            - üáßüá∑ BRL (Brazilian Real)

            - üá®üá¥ COP (Colombian Peso)

            - üá≤üáΩ MXN (Mexican Peso)


            Please note that other currencies other than in the list above may
            be returned.
          type: string
          nullable: true
          example: BRL
        exchange_rate:
          description: >
            The `currency` to MXN currency exchange rate when the payment was
            made.
          type: string
          nullable: true
          example: '3.75'
        amount:
          description: |
            The invoice amount, in the currency of the original invoice.
          type: number
          format: float
          nullable: true
          example: 8000.5
        operation_number:
          description: |
            The fiscal institution's internal identifier for the operation.
          type: string
          nullable: true
          example: '831840'
        beneficiary_rfc:
          description: |
            The fiscal ID of the payment beneficiary.
          type: string
          nullable: true
          example: BNM840515VB1
        beneficiary_account_number:
          description: |
            The bank account number of the payment beneficiary.
          type: string
          nullable: true
          example: '12343453245633'
        payer_rfc:
          description: |
            The fiscal ID of the payment issuer.
          type: string
          nullable: true
          example: BKJM840515VB1
        payer_account_number:
          description: |
            The bank account number of the payment issuer.
          type: string
          nullable: true
          example: '13343663245699'
        payer_bank_name:
          description: |
            The banking institution that was used by the payment issuer.
          type: string
          nullable: true
          example: CITI BANAMEX
        related_documents:
          description: |
            A list of all the related deferred invoices affected by the payment.
          type: array
          items:
            $ref: '#/components/schemas/InvoicesPaymentsRelatedDocumentsSat'
    InvoicesPayrollSat:
      description: >
        Details regarding the payroll payment. Only applicable for payroll
        invoices.
      type: object
      nullable: true
      required:
        - version
        - type
        - payment_date
        - date_from
        - date_to
        - days
        - amount
      properties:
        version:
          description: |
            The version of the payroll object.
          type: string
          example: '1.2'
        days:
          description: |
            The number of days covered by the payment.
          type: integer
          format: int32
          nullable: true
          example: 30
        type:
          description: >
            The payroll type, as defined by the legal entity of the country.


            - üá≤üáΩ Mexico [SAT catalog reference
            article](https://developers.belvo.com/docs/sat-catalogs#payroll-type)
          type: string
          nullable: true
          example: O
        amount:
          description: |
            The total amount of the payroll payment.
          type: number
          format: float
          example: 20400.1
        date_from:
          description: |
            The start date of the payment period.
          type: string
          format: date
          nullable: true
          example: '2018-07-01'
        date_to:
          description: |
            The end date of the payment period.
          type: string
          format: date
          nullable: true
          example: '2018-07-31'
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        payment_date:
          description: |
            The payment date.
          type: string
          format: date
    InvoiceWarningsSat:
      description: >
        Object containing information about any warnings related to this
        invoice.
      type: object
      required:
        - code
        - message
      nullable: true
      properties:
        code:
          description: |
            The warning code.
          type: string
          nullable: true
          example: sat_xml_limit_reached
        message:
          description: |
            The description of the warning.
          type: string
          nullable: true
          example: >-
            The daily limit for XML downloads set by SAT was reached so this
            invoice might be missing data. Please check
            https://tinyurl.com/yydzhy5d for more information on this error.
    InvoiceWithIdSat:
      title: üá≤üáΩ SAT Mexico
      type: object
      required:
        - type
        - invoice_identification
        - invoice_date
        - invoice_type
        - subtotal_amount
        - tax_amount
        - discount_amount
        - total_amount
        - currency
        - exchange_rate
        - status
        - sender_name
        - sender_id
        - receiver_name
        - receiver_id
        - certification_authority
        - certification_date
        - cancelation_status
        - cancelation_update_date
        - payment_type
        - payment_type_description
        - invoice_details
        - payroll
        - payments
        - collected_at
      properties:
        version:
          description: |
            The CFDI version of the invoice.
          type: string
          nullable: true
          example: '3.3'
        id:
          description: Belvo's unique identifier used to reference the current invoice.
          type: string
          format: uuid
          example: c749315b-eec2-435d-a458-06912878564f
        link:
          description: The `link.id` the invoice belongs to.
          type: string
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        invoice_identification:
          description: The fiscal institution's unique ID for the invoice.
          type: string
          nullable: true
          example: A1A1A1A1-2B2B-3C33-D44D-555555E55EE
        invoice_date:
          description: The date of the invoice.
          type: string
          format: date
          nullable: true
          example: '2019-12-01'
        status:
          description: >-
            The status of the invoice. Can be either *Vigente* (valid) or
            *Cancelado* (cancelled).
          type: string
          nullable: true
          example: Vigente
        invoice_type:
          $ref: '#/components/schemas/EnumInvoiceSatInvoiceType'
        type:
          $ref: '#/components/schemas/EnumInvoiceType'
        sender_id:
          description: The fiscal ID of the invoice sender
          type: string
          nullable: true
          example: AAA111111AA11
        sender_name:
          description: The name of the invoice sender.
          type: string
          nullable: true
          example: ACME CORP
        sender_tax_fraud_status:
          description: >-
            Indicates whether or not the sender is on SAT's tax fraud list for
            having submitted incorrect data, having outstanding payments, or
            having conducted business that is in violation of the fiscal
            institution's regulations.<br><br>

            SAT updates the tax fraud list every three months. <br><br>

            For more information regarding the reason's a taxpayer can be put on
            the tax fraud list, please see [Article
            69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html)
            and [Article
            69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html)
            of Mexico's C√≥digo Fiscal de la Federaci√≥n. <br><br>

            Possible statuses are:

            - `INVESTIGATING` <br> The fiscal institution has identified
            irregularities and open an investigation regarding the taxpayer.
            <br> - `DISMISSED` <br> The fiscal institution has investigated the
            taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The
            fiscal institution has confirmed that the taxpayer is guilty. <br> -
            `OVERTURNED` <br> The fiscal institution has reassessed a previously
            confirmed taxpayer and, based on new evidence, has taken the
            taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br>
            The receiver or sender is not found in the list (in other words,
            they are complying with the fiscal institution's regulations).
          type: string
          nullable: true
          example: NO_TAX_FRAUD_STATUS
        receiver_id:
          description: The fiscal ID of the invoice receiver.
          type: string
          nullable: true
          example: BBB222222BB22
        receiver_name:
          description: The name of the invoice receiver.
          type: string
          nullable: true
          example: BELVO CORP
        receiver_tax_fraud_status:
          description: >-
            Indicates whether or not the receiver is on SAT's tax fraud list for
            having submitted incorrect data, having outstanding payments, or
            having conducted business that is in violation of the fiscal
            institution's regulations.<br><br>

            SAT updates the tax fraud list every three months. <br><br>

            For more information regarding the reason's a taxpayer can be put on
            the tax fraud list, please see [Article
            69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html)
            and [Article
            69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html)
            of Mexico's C√≥digo Fiscal de la Federaci√≥n. <br><br>

            Possible statuses are:

            - `INVESTIGATING` <br> The fiscal institution has identified
            irregularities and open an investigation regarding the taxpayer.
            <br> - `DISMISSED` <br> The fiscal institution has investigated the
            taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The
            fiscal institution has confirmed that the taxpayer is guilty. <br> -
            `OVERTURNED` <br> The fiscal institution has reassessed a previously
            confirmed taxpayer and, based on new evidence, has taken the
            taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br>
            The receiver or sender is not found in the list (in other words,
            they are complying with the fiscal institution's regulations).
          type: string
          nullable: true
          example: NO_TAX_FRAUD_STATUS
        cancelation_status:
          description: >-
            If the invoice is cancelled, this field indicates the status of the
            cancellation.
          type: string
          nullable: true
        cancelation_update_date:
          description: |
            The date of the invoice cancelation.
          type: string
          format: date
          example: '2019-12-02'
          nullable: true
        certification_date:
          description: |
            The date of the fiscal certification.
          type: string
          format: date
          nullable: true
          example: '2019-12-01'
        certification_authority:
          description: |
            The fiscal ID of the certification provider.
          type: string
          nullable: true
          example: CCC333333CC33
        payment_type:
          description: >
            The payment type code used for this invoice, as defined by the
            country legal entity.


            - üá≤üáΩ Mexico [SAT catalog reference
            article](https://developers.belvo.com/docs/sat-catalogs#payment-type)
          type: string
          nullable: true
          example: '99'
        payment_type_description:
          description: |
            *This field has been deprecated.*
          deprecated: true
          nullable: true
          type: string
          example: null
        payment_method:
          $ref: '#/components/schemas/EnumInvoiceSatPaymentMethod'
        payment_method_description:
          description: |
            *This field has been deprecated.*

            *The description of the payment method used for this invoice.*
          deprecated: true
          nullable: true
          type: string
          example: null
        usage:
          description: >
            The invoice's usage code, as defined by the legal entity of the
            country. 


            - üá≤üáΩ Mexico [SAT catalog reference
            article](https://developers.belvo.com/docs/sat-catalogs#usage)
          type: string
          nullable: true
          example: P01
        place_of_issue:
          description: |
            The postcode of where the invoice was issued.
          type: string
          nullable: true
          example: '01165'
        invoice_details:
          description: >
            A list of descriptions for each item (purchased product or service
            provided) in the invoice.
          type: array
          items:
            $ref: '#/components/schemas/InvoiceDetailSat'
        currency:
          description: |
            The currency of the invoice. For example:
             
             - üáßüá∑ BRL (Brazilian Real)
             - üá®üá¥ COP (Colombian Peso)
             - üá≤üáΩ MXN (Mexican Peso)
             - üá∫üá∏ USD (United States Dollar)
          type: string
          nullable: true
          example: MXN
        subtotal_amount:
          description: >
            The pretax amount of this invoice (sum of each item's
            `pre_tax_amount`).
          type: number
          format: float
          nullable: true
          example: 400
        exchange_rate:
          description: |
            The exchange rate used in this invoice for the currency.
          type: number
          format: float
          nullable: true
          example: 0.052
        tax_amount:
          description: >
            The amount of tax for this invoice (sum of each item's
            `tax_amount`).
          type: number
          format: float
          nullable: true
          example: 64
        discount_amount:
          description: |
            The total amount discounted in this invoice.
          type: number
          format: float
          nullable: true
          example: 10
        total_amount:
          description: >-
            The total amount of the invoice (`subtotal_amount` + `tax_amount` -
            `discount_amount`)
          type: number
          format: float
          nullable: true
          example: 454
        payments:
          description: |
            A list detailing all the invoice payments.
          type: array
          items:
            $ref: '#/components/schemas/InvoicesPaymentsSat'
        payroll:
          $ref: '#/components/schemas/InvoicesPayrollSat'
        folio:
          description: >
            The internal control number that the taxpayer assigns to the
            invoice.
          type: string
          nullable: true
          example: '26'
        xml:
          description: |
            XML of the invoice document.
          type: string
          nullable: true
        warnings:
          $ref: '#/components/schemas/InvoiceWarningsSat'
        sender_blacklist_status:
          description: >
            This field has been deprecated. Please use `sender_tax_fraud_status`
            instead.
          type: string
          deprecated: true
          nullable: true
          example: null
        receiver_blacklist_status:
          description: >
            This field has been deprecated. Please use
            `receiver_tax_fraud_status` instead.
          type: string
          deprecated: true
          nullable: true
          example: null
    EnumInvoiceDianInvoiceType:
      description: |
        The fiscal institution's classification of the invoice.

        For Colombia's DIAN, we return one of the following values:

          - `Factura Electr√≥nica de Venta`
      type: string
      nullable: true
      enum:
        - Factura Electr√≥nica de Venta
      example: Factura Electr√≥nica de Venta
    InvoiceSenderDetailsDian:
      description: |
        Details regarding the sender.
      type: object
      nullable: true
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2020-04-23T21:32:55.336854+00:00'
        tax_payer_type:
          description: >
            Indicates if the sender is a business or an individual. Can be
            either:
              
              - `Persona Jur√≠dica`
              - `Persona Natural`
          type: string
          nullable: true
          example: Persona Natural
        regimen:
          description: >
            The sender's regimen type.


            For detailed information regarding DIAN's regimens, please see their
            [official
            PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf). 
          type: string
          nullable: true
          example: R√©gimen Simple de Tributaci√≥n - SIMPLE
        tax_scheme:
          description: >
            The sender's fiscal responsibilities.


            For detailed information regarding DIAN's tax schemes, please see
            their [official
            PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf). 
          type: string
          nullable: true
          example: 01-IVA
        country:
          description: |
            The country where the sender pays their taxes.
          type: string
          nullable: true
          example: Colombia
        address:
          description: |
            The sender's address.
          type: string
          nullable: true
          example: Calle 144 No. 12-09
        phone_number:
          description: |
            The sender's phone number.
          type: string
          nullable: true
          example: '576606522566'
        email:
          description: |
            The sender's email address.
          type: string
          nullable: true
          example: acme_colombia@gmail.com
    InvoicesReceiverDetailsDian:
      description: |
        Details regarding the receiver.
      type: object
      nullable: true
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2020-04-23T21:32:55.336854+00:00'
        tax_payer_type:
          description: >
            Indicates if the receiver is a business or an individual. Can be
            either:
              
              - `Persona Jur√≠dica`
              - `Persona Natural`
          type: string
          nullable: true
          example: Persona Natural
        regimen:
          description: >
            The receiver's regimen type.


            For detailed information regarding DIAN's regimens, please see their
            [official
            PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf). 
          type: string
          nullable: true
          example: R√©gimen Simple de Tributaci√≥n - SIMPLE
        tax_scheme:
          description: >
            The receiver's fiscal responsibilities.


            For detailed information regarding DIAN's tax schemes, please see
            their [official
            PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf). 
          type: string
          nullable: true
          example: 01-IVA
        country:
          description: |
            The country where the receiver pays their taxes.
          type: string
          nullable: true
          example: Colombia
        address:
          description: |
            The receiver's address.
          type: string
          nullable: true
          example: Calle 144 No. 12-09
        phone_number:
          description: |
            The receiver's phone number.
          type: string
          nullable: true
          example: 576606522566|
        email:
          description: |
            The receiver's email address.
          type: string
          nullable: true
          example: acme_colombia@gmail.com
    EnumInvoiceDianPaymentMethod:
      description: >
        The payment method used for this invoice, as defined by the legal entity
        of the country.


        For DIAN Colombia, we return one of the following values:

          - `Contado`
          - `Cr√©dito`
          - `null`
      type: string
      nullable: true
      enum:
        - Contado
        - Cr√©dito
        - null
      example: Contado
    InvoiceDetailDian:
      type: object
      required:
        - description
        - product_identification
        - quantity
        - unit_amount
        - unit_description
        - unit_code
        - pre_tax_amount
        - tax_percentage
        - tax_amount
        - total_amount
      properties:
        description:
          description: >-
            The description of the invoice item (an invoice can have one or more
            items).
          type: string
          nullable: true
          example: December 2019 accounting fees
        product_identification:
          description: >
            The identification code of the product or the service, as defined by
            the legal entity in the country.
          type: string
          nullable: true
          example: AE001
        quantity:
          description: The quantity of this invoice item.
          type: number
          format: float
          nullable: true
          example: 1
        unit_code:
          description: |
            The unit of measure, as defined by the legal entity in the country.
          type: string
          nullable: true
          example: EA
        unit_description:
          description: >
            The description of the item, as defined by the legal entity in the
            country.
          type: string
          nullable: true
          example: cada
        unit_amount:
          description: The price of one singular item.
          type: number
          format: float
          nullable: true
          example: 5900
        tax_type:
          description: The item's tax type.
          type: string
          nullable: true
          example: IVA
        pre_tax_amount:
          description: >-
            The total price for this item before tax is applied (`quantity` x
            `unit_amount`).
          type: number
          format: float
          nullable: true
          example: 5900
        tax_percentage:
          description: The tax percentage to apply.
          type: number
          format: float
          nullable: true
          example: 16
        tax_amount:
          description: >-
            The amount of tax for this invoice item (`pre_tax_amount` x
            `tax_percentage`).
          type: number
          format: float
          nullable: true
          example: 64
        total_amount:
          description: >-
            The total price for this invoice item (`pre_tax_amount` +
            `tax_amount`).
          type: number
          format: float
          nullable: true
          example: 464
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
    InvoicesPaymentsRelatedDocumentsDian:
      description: List of all the related deferred invoices affected by the payment.
      type: object
      required:
        - invoice_identification
        - currency
        - payment_method
        - previous_balance
        - amount_paid
        - outstanding_balance
      properties:
        invoice_identification:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        currency:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        payment_method:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        partiality_number:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: integer
          format: int32
          example: .nan
        previous_balance:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: number
          format: float
          nullable: true
          example: null
        amount_paid:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: number
          format: float
          nullable: true
          example: null
        outstanding_balance:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: number
          format: float
          nullable: true
          example: null
    InvoicesPaymentsDian:
      type: object
      required:
        - date
        - payment_type
        - currency
        - exchange_rate
        - amount
        - operation_number
        - beneficiary_account_number
        - payer_rfc
        - payer_account_number
        - payer_bank_name
        - related_documents
      properties:
        date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date-time
          nullable: true
          example: null
        payment_type:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        currency:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        exchange_rate:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        amount:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: number
          format: float
          nullable: true
          example: null
        operation_number:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        beneficiary_rfc:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        beneficiary_account_number:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        payer_rfc:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        payer_account_number:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        payer_bank_name:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        related_documents:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: array
          items:
            $ref: '#/components/schemas/InvoicesPaymentsRelatedDocumentsDian'
    InvoicesPayrollDian:
      description: >
        **Note**: This field is not applicable for DIAN Colombia and will return
        `null`.
      type: object
      nullable: true
      required:
        - version
        - type
        - payment_date
        - date_from
        - date_to
        - days
        - amount
      properties:
        version:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          example: null
        days:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: integer
          format: int32
          nullable: true
          example: .nan
        type:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        amount:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: number
          format: float
          example: null
        date_from:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        date_to:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        collected_at:
          description: >-
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date-time
          nullable: true
          example: null
        payment_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
    InvoiceWarningsDian:
      description: >
        **Note**: This field is not applicable for DIAN Colombia and will return
        `null`.
      type: object
      required:
        - code
        - message
      nullable: true
      properties:
        code:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        message:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
    InvoiceDian:
      title: üá®üá¥ DIAN Colombia
      type: object
      required:
        - type
        - invoice_identification
        - invoice_date
        - invoice_type
        - subtotal_amount
        - tax_amount
        - discount_amount
        - total_amount
        - currency
        - exchange_rate
        - status
        - sender_name
        - sender_id
        - receiver_name
        - receiver_id
        - certification_authority
        - certification_date
        - cancelation_status
        - cancelation_update_date
        - payment_type
        - payment_type_description
        - invoice_details
        - payroll
        - payments
        - collected_at
      properties:
        version:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        id:
          description: Belvo's unique identifier for the current invoice.
          type: string
          format: uuid
          example: c749315b-eec2-435d-a458-06912878564f
        link:
          description: The `link.id` the invoice belongs to.
          type: string
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        invoice_identification:
          description: The fiscal institution's unique ID for the invoice.
          type: string
          nullable: true
          example: >-
            89868fda605e6250a7ecb910dc57ed6f8147c6dc39ec90805bb655a0646e6cc3f991f93463f62e03d236b9cc9c293edc
        invoice_date:
          description: The date of the invoice.
          type: string
          format: date
          nullable: true
          example: '2019-12-01'
        status:
          description: |-
            The status of the invoice. Can be one of:

              - *Vigente* (valid)
              - *Cancelado* (cancelled)
              - *Aprobado* (approved)
          type: string
          nullable: true
          example: Aprobado
        expiration_date:
          description: >
            Indicates when the invoice is set to expire.


            For example: If the invoice is paid in installments, this field
            indicates the date when the installment is to be paid.
          type: string
          format: date
          nullable: true
          example: '2022-08-19'
        invoice_type:
          $ref: '#/components/schemas/EnumInvoiceDianInvoiceType'
        type:
          $ref: '#/components/schemas/EnumInvoiceType'
        sender_id:
          description: The fiscal ID of the invoice sender.
          type: string
          nullable: true
          example: 922233648
        sender_name:
          description: The name of the invoice sender.
          type: string
          nullable: true
          example: ACME Corp Colombia
        sender_details:
          $ref: '#/components/schemas/InvoiceSenderDetailsDian'
        sender_tax_fraud_status:
          description: >-
            Indicates whether or not the sender is on a tax fraud list for
            having submitted incorrect data, having outstanding payments, or
            having conducted business that is in violation of the fiscal
            institution's regulations.

            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        receiver_id:
          description: The fiscal ID of the invoice receiver.
          type: string
          nullable: true
          example: BBB222222BB22
        receiver_name:
          description: The name of the invoice receiver.
          type: string
          nullable: true
          example: Roadrunner Traps Colombia
        receiver_details:
          $ref: '#/components/schemas/InvoicesReceiverDetailsDian'
        receiver_tax_fraud_status:
          description: >-
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        cancelation_status:
          description: >-
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        cancelation_update_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          example: null
          nullable: true
        certification_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        certification_authority:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        payment_type:
          description: >
            The payment type code used for this invoice, as defined by the
            country legal entity.


            For detailed information regarding DIAN's payment types, please see
            their [official
            PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf). 
          type: string
          nullable: true
          example: '47'
        payment_type_description:
          description: |
            The description of the payment method used for this invoice.
          nullable: true
          type: string
          example: null
        payment_method:
          $ref: '#/components/schemas/EnumInvoiceDianPaymentMethod'
        payment_method_description:
          description: |
            The description of the payment method used for this invoice.
          deprecated: true
          nullable: true
          type: string
          example: null
        usage:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        place_of_issue:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        invoice_details:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: array
          items:
            $ref: '#/components/schemas/InvoiceDetailDian'
        currency:
          description: |
            The currency of the invoice. For example:
             
             - üáßüá∑ BRL (Brazilian Real)
             - üá®üá¥ COP (Colombian Peso)
             - üá≤üáΩ MXN (Mexican Peso)
             - üá∫üá∏ USD (United States Dollar)
          type: string
          nullable: true
          example: COP
        subtotal_amount:
          description: >
            The pretax amount of this invoice (sum of each item's
            `pre_tax_amount`).
          type: number
          format: float
          nullable: true
          example: 400
        exchange_rate:
          description: |
            The exchange rate used in this invoice for the currency.
          type: number
          format: float
          nullable: true
          example: 0.053
        tax_amount:
          description: >
            The amount of tax for this invoice (sum of each item's
            `tax_amount`).
          type: number
          format: float
          nullable: true
          example: 64
        discount_amount:
          description: |
            The total amount discounted in this invoice.
          type: number
          format: float
          nullable: true
          example: 10
        total_amount:
          description: >-
            The total amount of the invoice (`subtotal_amount` + `tax_amount` -
            `discount_amount`)
          type: number
          format: float
          nullable: true
          example: 454
        payments:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: array
          items:
            $ref: '#/components/schemas/InvoicesPaymentsDian'
        payroll:
          $ref: '#/components/schemas/InvoicesPayrollDian'
        folio:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        xml:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        warnings:
          $ref: '#/components/schemas/InvoiceWarningsDian'
    InvoicesResponsePaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of invoice objects.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/InvoiceWithIdSat'
              - $ref: '#/components/schemas/InvoiceDian'
    InvoicesRequest:
      type: object
      required:
        - date_from
        - date_to
        - link
        - type
      properties:
        link:
          description: The fiscal `link.id` to use.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        date_from:
          description: >
            The date from which you want to start getting invoices for, in
            `YYYY-MM-DD` format.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-01-01'
        date_to:
          description: >
            The date you want to stop getting invoices for, in `YYYY-MM-DD`
            format.


            ‚ö†Ô∏è The number of days between `date_from` and `date_to` cannot be
            over 365.


            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-02-01'
        type:
          $ref: '#/components/schemas/EnumInvoiceType'
        attach_xml:
          description: >-
            When set to `true`, you will receive the XML invoice in the
            response.
          type: boolean
          default: false
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
          example: true
    TaxReturnPersonal:
      title: Tax Return Personal
      type: object
      additionalProperties: true
      required:
        - informacion_general
        - sueldos_salarios
        - servicios_profesionales
        - dividendos
        - deducciones_personales
        - retenciones
        - determinacion_impuesto
        - pdf
        - receipt_pdf
        - collected_at
      properties:
        id:
          description: >-
            Unique identifier created by Belvo used to reference the current Tax
            Return.
          type: string
          format: uuid
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
        link:
          description: The `link.id` the statement belongs to
          type: string
          format: uuid
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        informacion_general:
          description: >-
            General information on the tax return (year, RFC, return type,
            person/company name, and so on).
          type: object
          nullable: true
        sueldos_salarios:
          description: >-
            Details regarding the income information together combined with
            withheld taxes.
          type: object
          nullable: true
        servicios_profesionales:
          description: >-
            Details regarding the income and tax information from professional
            services provided.
          type: object
          nullable: true
        deducciones_personales:
          description: List of all personal tax deductions.
          type: object
          nullable: true
        determinacion_impuesto:
          description: Details regarding the final tax return.
          type: object
          nullable: true
        retenciones:
          description: Details on the already withheld taxes.
          type: object
          nullable: true
        dividendos:
          description: Details regarding dividends.
          type: object
          nullable: true
        datos_informativos:
          description: Extra informative data on the tax return.
          type: object
          nullable: true
        pdf:
          description: Tax return PDF as a binary.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
        receipt_pdf:
          description: >-
            The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
    TaxReturnsPersonalPaginated:
      title: Tax Return Personal
      type: object
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of Personal Tax Return objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxReturnPersonal'
    TaxReturnPersonalMonthly:
      title: Tax Return Personal Monthly
      type: object
      additionalProperties: true
      required:
        - informacion_general
        - pdf
        - type
        - isr
        - iva
        - collected_at
      properties:
        id:
          description: >-
            Unique identifier created by Belvo used to reference the current Tax
            Return.
          type: string
          format: uuid
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        informacion_general:
          description: >-
            General information regarding the tax return (year, RFC, return
            type, person/company name, and so on).
          type: object
          nullable: true
        isr:
          description: >-
            Information used to calculate the monthly provisional payments of
            the income tax.
          type: object
          nullable: true
        iva:
          description: >-
            Information used to calculate the monthly provisional payments of
            the VAT tax.
          type: object
          nullable: true
        pdf:
          description: Tax return PDF as a binary.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
        receipt_pdf:
          description: >-
            The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
        type:
          description: The type of tax return. Can be either monthly or annual.
          type: string
          example: monthly
    TaxReturnsPersonalMonthlyPaginated:
      title: Tax Return Personal Monthly
      type: object
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of Monthly Personal Tax Return objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxReturnPersonalMonthly'
    TaxReturnBusiness:
      title: Tax Return Business
      type: object
      additionalProperties: true
      required:
        - informacion_general
        - estado_resultados
        - pdf
        - receipt_pdf
        - collected_at
        - estado_posicion_financiera_balance
        - conciliacion_entre_resultado_contable_fiscal
        - cifras_cierre_ejercicio
        - determinacion_del_impuesto_sobre_la_renta
        - detalle_pago_r1_isr_personas_morales
      properties:
        id:
          description: >-
            Unique identifier created by Belvo used to reference the current Tax
            Return.
          type: string
          format: uuid
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        informacion_general:
          description: >-
            General information regarding the tax return (year, RFC, return
            type, person/company name, and so on).
          type: object
          nullable: true
        datos_adicionales:
          description: Additional data regarding the tax return.
          type: object
          nullable: true
        estado_resultados:
          description: >-
            Detailed information about the legal entity's yearly profit and
            loss.
          type: object
          nullable: true
        estado_posicion_financiera_balance:
          description: Details regarding balance sheet of the legal entity.
          type: object
          nullable: true
        conciliacion_entre_resultado_contable_fiscal:
          description: Details regarding the accounting reconciliation.
          type: object
          nullable: true
        deducciones_autorizadas:
          description: Details regarding the legal entity's deductions.
          type: object
          nullable: true
        cifras_cierre_ejercicio:
          description: Details regarding key numbers at the end of the fiscal exercise.
          type: object
          nullable: true
        determinacion_del_impuesto_sobre_la_renta:
          description: Details regarding the final tax return.
          type: object
          nullable: true
        dividendos_o_utilidades_distribuidos:
          description: Details regarding distributed dividends.
          type: object
          nullable: true
        detalle_pago_r1_isr_personas_morales:
          description: Details of the tax payment.
          type: object
          nullable: true
        pdf:
          description: Tax return PDF as a binary.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
        receipt_pdf:
          description: >-
            The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
    TaxReturnsBusinessPaginated:
      title: Tax Return Personal Business
      type: object
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of Business Tax Return objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxReturnBusiness'
    TaxReturnBusinessMonthly:
      title: Tax Return Business Monthly
      type: object
      additionalProperties: true
      required:
        - informacion_general
        - determinacion_isr
        - pdf
        - type
        - collected_at
        - detalle_pago_isr
        - determinacion_iva
        - detalle_pago_iva
      properties:
        id:
          description: >-
            Unique identifier created by Belvo used to reference the current Tax
            Return.
          type: string
          format: uuid
          example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2019-09-27T13:01:41.941Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        informacion_general:
          description: >-
            General information regarding the tax return (year, RFC, return
            type, person/company name, and so on).
          type: object
          nullable: true
        determinacion_isr:
          description: >-
            Information used to calculate the provisional income tax for the
            period.
          type: object
          nullable: true
        detalle_pago_isr:
          description: Information on the monthly provisional payments for the income tax.
          type: object
          nullable: true
        determinacion_iva:
          description: >-
            Information used to calculate the provisional VAT tax for the
            period.
          type: object
          nullable: true
        detalle_pago_iva:
          description: Information on the monthly provisional payments for the VAT tax.
          type: object
          nullable: true
        pdf:
          description: Tax return PDF as a binary.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
        receipt_pdf:
          description: >-
            The acknowledgement receipt from the fiscal institution confirming
            that they received the tax return.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
        type:
          description: The type of tax return. Can be either monthly or annual.
          type: string
          nullable: true
          example: monthly
    TaxReturnsBusinessMonthlyPaginated:
      title: Tax Return Personal Business Monthly
      type: object
      additionalProperties: true
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of Monthly Business Tax Return objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxReturnBusinessMonthly'
    TaxReturnsMonthlyRequest:
      title: Monthly Tax Returns
      description: Request body for monthly tax returns
      type: object
      required:
        - link
        - type
        - date_from
        - date_to
      properties:
        link:
          description: The fiscal `link.id` you want specific tax return information for.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        attach_pdf:
          description: >-
            When this is set to `true`, you will receive the PDF as a binary
            string in the response.
          type: boolean
          default: false
          example: false
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
          example: true
        type:
          description: >
            The type of tax return to return. For monthly tax returns, this
            field must be set to `monthly`.
          type: string
          default: monthly
        date_from:
          description: >-
            The starting date you want to get tax returns for, in `YYYY-MM-DD`
            format.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          example: '2018-01-01'
        date_to:
          description: >-
            The date you want to stop getting tax returns for, in `YYYY-MM-DD`
            format.


            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          example: '2019-01-01'
    TaxReturnsYearlyRequest:
      title: Yearly Tax Returns
      description: Request body for yearly tax returns
      type: object
      required:
        - link
        - type
        - year_to
        - year_from
      properties:
        link:
          description: The fiscal `link.id` you want specific tax return information for.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        attach_pdf:
          description: >-
            When this is set to `true`, you will receive the PDF as a binary
            string in the response.
          type: boolean
          default: false
          example: false
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
          example: true
        type:
          description: >
            The type of tax return to return. For yearly tax returns this must
            be set to `yearly`.


            By default, Belvo returns the yearly (annual) tax returns.
          type: string
          default: yearly
        year_from:
          description: |
            The starting year you want to get tax returns for, in `YYYY` format.
          type: string
          example: '2018'
        year_to:
          description: |
            The year you want to stop getting tax returns for, in `YYYY` format.
          type: string
          example: '2019'
    TaxStatusTaxPayerInformationSat:
      description: Details regarding the taxpayer.
      type: object
      required:
        - rfc
        - start_operations_date
        - status_padron
        - last_status_change_date
      nullable: true
      properties:
        rfc:
          description: >
            The tax payers's identification number (For Mexico, this is the
            RFC).
          type: string
          nullable: true
          example: BEMP12345G58
        curp:
          description: >
            The tax payers's *Clave √önica de Registro de Poblaci√≥n* (CURP)
            number.
          type: string
          nullable: true
          example: null
        name:
          description: The tax payers's first name.
          type: string
          nullable: true
          example: JOHN
        first_last_name:
          description: The tax payers's first last name.
          type: string
          nullable: true
          example: DOE
        second_last_name:
          description: The tax payers's second last name.
          type: string
          nullable: true
          example: SCHMOE
        start_operations_date:
          description: |
            Date when the tax payer commenced taxable commercial activities.
          type: string
          format: date
          nullable: true
          example: null
        status_padron:
          description: >-
            Status of the taxpayer in the Federal Register of Taxpayers (RFC).
            Can be `ACTIVO` or `INACTIVO`.
          type: string
          nullable: true
          example: null
        last_status_change_date:
          description: |
            Date when `status_padron` was most recently updated.
          type: string
          format: date
          nullable: true
          example: null
        commercial_name:
          description: >
            The name of the business designated for consumers and the general
            public.


            **Note**: Only applicable for businesses.
          type: string
          nullable: true
          example: Jar Jar Transport
        social_name:
          description: >-
            The unique and exclusive name within the national territory that
            companies receive for legal or administrative purposes.

            **Note**: Only applicable for businesses.
          type: string
          nullable: true
          example: John Doe SA DE CV
        email:
          description: Contact email address for the tax payer.
          type: string
          nullable: true
          example: john_doe@gmail.com
        phone:
          description: Contact phone number for the tax payer.
          type: string
          nullable: true
          example: '1234567890'
    TaxStatusAddressBetweenStreetSat:
      type: object
      properties:
        street_one:
          description: The first street that `street` is located between.
          type: string
          nullable: true
          example: CALLE PRINCIPE
        street_two:
          description: The second street that `street` is located between.
          type: string
          nullable: true
          example: CALLE NUEVA ROMA
    TaxStatusAddressSat:
      description: The tax payer's address details.
      type: object
      required:
        - postal_code
      nullable: true
      properties:
        postal_code:
          description: |
            The postcode of the address.
          type: string
          nullable: true
          example: '21255'
        street_type:
          description: The `street` type.
          type: string
          nullable: true
          example: CALLE
        street:
          description: The tax payers street.
          type: string
          nullable: true
          example: LA MALINCHE
        exterior_number:
          description: The street number.
          type: string
          nullable: true
          example: '432'
        interior_number:
          description: Additional address information.
          type: string
          nullable: true
          example: PLANTA BAJA
        suburb:
          description: |
            The suburb of the tax payer.
          type: string
          nullable: true
          example: BUENAVENTURA
        locality:
          description: |
            The locality of the address.
          type: string
          nullable: true
          example: none
        municipality:
          description: The municipality of the address.
          type: string
          nullable: true
          example: CDMX DC
        state:
          description: The state that the address is in.
          type: string
          nullable: true
          example: Federal
        between_street:
          description: |
            Additional information about where the `street` is located.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusAddressBetweenStreetSat'
    TaxStatusEconomicActivitySat:
      type: object
      properties:
        economic_activity:
          description: The description of the economic activity.
          type: string
          nullable: true
          example: Asalariado
        initial_date:
          description: The start date of the economic activity.
          type: string
          format: date
          nullable: true
          example: '2020-12-06'
        end_date:
          description: |
            The end date of the economic activity.
          type: string
          format: date
          nullable: true
          example: null
        order:
          description: The order of the economic activity.
          type: string
          nullable: true
          example: '2'
        percentage:
          description: |
            The percentage of the economic activity.
          type: string
          nullable: true
          example: '1'
    TaxStatusRegimensSat:
      type: object
      required:
        - regimen
        - initial_date
        - end_date
      properties:
        end_date:
          description: |
            The end date of the regimen.
          type: string
          format: date
          nullable: true
          example: null
        initial_date:
          description: |
            The start date of the regimen.
          type: string
          format: date
          nullable: true
          example: '2020-12-06'
        regimen:
          description: The description of the regimen.
          type: string
          nullable: true
          example: R√©gimen de Ingresos por Dividendos (socios y accionistas)
    TaxStatusObligationsSat:
      description: |
        Details regarding a business's obligations.

        ‚ÑπÔ∏è For non-business accounts, this field will return empty.
      type: object
      properties:
        obligation:
          description: |
            The description of the obligation.
          type: string
          nullable: true
          example: Declaraci√≥n informativa de IVA con la anual de ISR
        expiration:
          description: >
            The deadline to fulfill the obligation, as imposed by the tax
            authority.
          type: string
          nullable: true
          example: Conjuntamente con la declaraci√≥n anual del ejercicio.
        initial_date:
          description: |
            The date when obligation started.
          type: string
          format: date
          nullable: true
          example: '2020-12-06'
        end_date:
          description: |
            The date when obligation ended.
          type: string
          format: date
          nullable: true
          example: null
    TaxStatusSat:
      title: SAT üá≤üáΩ Mexico
      type: object
      required:
        - id
        - link
        - collected_at
        - created_at
        - place_and_date_of_issuance
        - official_name
        - id_cif
        - tax_payer_information
        - address
        - economic_activity
        - regimen
        - obligations
        - digital_stamp
        - digital_stamp_chain
        - pdf
      properties:
        id:
          description: >-
            Unique identifier created by Belvo used to reference the current Tax
            Status.
          type: string
          format: uuid
          example: 21e9e25b-10a8-48a5-9e6a-4072b364b53f
        link:
          description: The `link.id` that the tax status is associated with.
          type: string
          format: uuid
          example: c2280c05-cbeb-4a29-ae53-8f837a77995b
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2020-04-23T21:32:55.336Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        place_and_date_of_issuance:
          description: The place and date of that the tax status was issued.
          type: string
          nullable: true
          example: TLALPAN , CIUDAD DE MEXICO A 19 DE MARZO DE 2020
        official_name:
          description: The name of the person or business.
          type: string
          nullable: true
          example: John Doe
        id_cif:
          description: |
            The taxpayer's *C√©dula de Identificaci√≥n Fiscal* (CIF) ID.
          type: string
          nullable: true
          example: '12345678901'
        tax_payer_information:
          $ref: '#/components/schemas/TaxStatusTaxPayerInformationSat'
        address:
          $ref: '#/components/schemas/TaxStatusAddressSat'
        economic_activity:
          description: |
            A list of economic activity objects.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusEconomicActivitySat'
        regimens:
          description: |
            A list of regimen objects.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusRegimensSat'
        obligations:
          description: |
            Details regarding a business's obligations.

            ‚ÑπÔ∏è For non-business accounts, this field will return empty.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusObligationsSat'
        digital_stamp:
          description: The validation certificate of the document.
          type: string
          nullable: true
          example: >-
            ||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
            FISCAL|2044441088666600000034||
        digital_stamp_chain:
          description: >
            A data chain containing the basic structure of a fiscal digital
            check. For Mexico, this is the *Comprobante Fiscal Digital por
            Internet* (CFDI).
          type: string
          nullable: true
          example: >-
            EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
        pdf:
          description: Tax status PDF as a binary string.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
    TaxStatusTaxPayerInformationDian:
      description: Details regarding the taxpayer.
      type: object
      required:
        - rfc
        - start_operations_date
        - status_padron
        - last_status_change_date
      nullable: true
      properties:
        rfc:
          description: |
            The tax payers's identification number (NIT).
          type: string
          nullable: true
          example: BEMP12345G58
        curp:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        name:
          description: The tax payers's first name.
          type: string
          nullable: true
          example: JOHN
        first_last_name:
          description: The tax payers's first last name.
          type: string
          nullable: true
          example: DOE
        second_last_name:
          description: The tax payers's second last name.
          type: string
          nullable: true
          example: SCHMOE
        start_operations_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        status_padron:
          description: >-
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        last_status_change_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        commercial_name:
          description: >
            The name of the business designated for consumers and the general
            public.


            **Note**: Only applicable for businesses.
          type: string
          nullable: true
          example: Jar Jar Transport
        social_name:
          description: >-
            The unique and exclusive name within the national territory that
            companies receive for legal or administrative purposes.

            **Note**: Only applicable for businesses.
          type: string
          nullable: true
          example: John Doe SA DE CV
        email:
          description: Contact email address for the tax payer.
          type: string
          nullable: true
          example: john_doe@gmail.com
        phone:
          description: Contact phone number for the tax payer.
          type: string
          nullable: true
          example: '1234567890'
    TaxStatusAddressBetweenStreetDian:
      type: object
      properties:
        street_one:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        street_two:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
    TaxStatusAddressDian:
      description: The tax payer's address details.
      type: object
      required:
        - postal_code
      nullable: true
      properties:
        postal_code:
          description: |
            The postcode of the address.
          type: string
          nullable: true
          example: 332-55
        street_type:
          description: The `street` type.
          type: string
          nullable: true
          example: CALLE
        street:
          description: The tax payers street.
          type: string
          nullable: true
          example: LA MALINCHE
        exterior_number:
          description: The street number.
          type: string
          nullable: true
          example: '432'
        interior_number:
          description: Additional address information.
          type: string
          nullable: true
          example: AP 306
        suburb:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        locality:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        municipality:
          description: The municipality of the address.
          type: string
          nullable: true
          example: Bogota DC
        state:
          description: The state that the address is in.
          type: string
          nullable: true
          example: Bogota DC
        between_street:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusAddressBetweenStreetDian'
    TaxStatusEconomicActivityDian:
      type: object
      properties:
        economic_activity:
          description: >
            The economic activity code, according to the fiscal institution.


            For detailed information regarding DIAN's economic activities,
            please see their [official
            PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf). 
          type: string
          nullable: true
          example: '112'
        initial_date:
          description: The start date of the economic activity.
          type: string
          format: date
          nullable: true
          example: '2020-12-06'
        end_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        order:
          description: The order of the economic activity.
          type: string
          nullable: true
          example: '1'
        percentage:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
    TaxStatusRegimensDian:
      type: object
      required:
        - regimen
        - initial_date
        - end_date
      properties:
        end_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        initial_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        regimen:
          description: The description of the regimen.
          type: string
          nullable: true
          example: 49-No responsable de IVA
    TaxStatusObligationsDian:
      description: |
        Details regarding a business's obligations.

        ‚ÑπÔ∏è For non-business accounts, this field will return empty.
      type: object
      properties:
        obligation:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        expiration:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        initial_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
        end_date:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          format: date
          nullable: true
          example: null
    TaxStatusDian:
      title: DIAN üá®üá¥ Colombia
      type: object
      required:
        - id
        - link
        - collected_at
        - created_at
        - place_and_date_of_issuance
        - official_name
        - id_cif
        - tax_payer_information
        - address
        - economic_activity
        - regimen
        - obligations
        - digital_stamp
        - digital_stamp_chain
        - pdf
      properties:
        id:
          description: >-
            Unique identifier created by Belvo used to reference the current Tax
            Status.
          type: string
          format: uuid
          example: 21e9e25b-10a8-48a5-9e6a-4072b364b53f
        link:
          description: The `link.id` that the tax status is associated with.
          type: string
          format: uuid
          example: c2280c05-cbeb-4a29-ae53-8f837a77995b
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2020-04-23T21:32:55.336Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        place_and_date_of_issuance:
          description: >-
            The date when the tax status was issued. For example,
            `2020-08-05/18:55:16`.
          type: string
          nullable: true
          example: 2020-08-05/18:55:16
        official_name:
          description: |
            The name of the business.

            Note: For individuals in Colombia, this field will return `null`.
          type: string
          nullable: true
          example: Jar Jar Transport
        id_cif:
          description: >
            The taxpayer's *C√©dula de ciudadan√≠a* (CC) ID. Only applicable for
            individuals.
          type: string
          nullable: true
          example: '12345678901'
        tax_payer_information:
          $ref: '#/components/schemas/TaxStatusTaxPayerInformationDian'
        address:
          $ref: '#/components/schemas/TaxStatusAddressDian'
        economic_activity:
          description: |
            A list of economic activity objects.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusEconomicActivityDian'
        regimens:
          description: |
            A list of regimen objects.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusRegimensDian'
        obligations:
          description: |
            Details regarding a business's obligations.

            ‚ÑπÔ∏è For non-business accounts, this field will return empty.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TaxStatusObligationsDian'
        digital_stamp:
          description: The validation certificate of the document.
          type: string
          nullable: true
          example: '"44701362691"'
        digital_stamp_chain:
          description: >
            **Note**: This field is not applicable for DIAN Colombia and will
            return `null`.
          type: string
          nullable: true
          example: null
        pdf:
          description: Tax status PDF as a binary string.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
    TaxStatusPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of tax status objects.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TaxStatusSat'
              - $ref: '#/components/schemas/TaxStatusDian'
    TaxStatusRequest:
      type: object
      required:
        - link
      properties:
        link:
          description: The fiscal `link.id` to use.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        attach_pdf:
          description: >-
            When set to `true`, you will receive the PDF in binary format in the
            response.
          type: boolean
          default: false
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
          example: true
    EnumTaxComplianceStatusOutcome:
      description: >-
        Indicates whether the taxpayer is complying to all their tax obligations
        (`POSITIVE`), if they are not (`NEGATIVE`), or have none to comply to
        (`NO_OBLIGATIONS`).
      type: string
      nullable: true
      enum:
        - POSITIVE
        - NEGATIVE
        - NO_OBLIGATIONS
      example: NEGATIVE
    TaxComplianceStatus:
      type: object
      required:
        - pdf
        - collected_at
      properties:
        id:
          description: >-
            Unique identifier created by Belvo used to reference the current Tax
            Compliance Status.
          type: string
          format: uuid
          example: 91106968-1abd-4d64-85c1-4e73d96fb997
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        internal_identification:
          description: The institution‚Äôs internal identification number for the document.
          type: string
          nullable: true
          example: 20NE1234567
        pdf:
          description: Tax compliance status PDF as a binary.
          type: string
          format: binary
          nullable: true
          example: '=PDF-STRING='
        rfc:
          description: >-
            The account holder's RFC (Registro Federal de Contribuyentes)
            number.
          type: string
          nullable: true
          example: KDFC211118IS0
        outcome:
          $ref: '#/components/schemas/EnumTaxComplianceStatusOutcome'
    TaxComplianceStatusPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of tax compliance status objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxComplianceStatus'
    TaxComplianceStatusRequest:
      type: object
      required:
        - link
      properties:
        link:
          description: The fiscal `link.id` to use.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        attach_pdf:
          description: >-
            When set to `true`, you will receive the PDF in binary format in the
            response.
          type: boolean
          default: false
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
          example: true
    EnumIncomeStreamType:
      description: |
        The type of income used in the calculations.

        We return one of the following enum values:

          - `SALARY`
          - `GOVERNMENT`
          - `INTEREST`
          - `RENT`
          - `RETIREMENT`
          - `FREELANCE`
          - `ALTERNATIVE_INCOME`
          - `TRANSFER`
          - `DEPOSIT`
          - `PENSION`
      type: string
      enum:
        - SALARY
        - GOVERNMENT
        - INTEREST
        - RENT
        - RETIREMENT
        - FREELANCE
        - ALTERNATIVE_INCOME
        - TRANSFER
        - DEPOSIT
        - PENSION
      example: ALTERNATIVE_INCOME
    EnumIncomeStreamFrequency:
      description: |
        How often the income is received.

        We return one of the following enum values:

          - `MONTHLY` - For transactions that occur once per month.
          - `BIWEEKLY` - For transactions that occur once every two weeks.
          - `WEEKLY` - For transactions that occur once per week.
          - `IRREGULAR` - For transactions that do not occur on a defined frequency pattern.
          - `SINGLE` - For transactions that occur only once and do not repeat.
      type: string
      enum:
        - MONTHLY
        - BIWEEKLY
        - WEEKLY
        - IRREGULAR
        - SINGLE
      example: MONTHLY
    EnumIncomeStreamConfidence:
      description: |
        Belvo's level of confidence for future incomes.

        We return one of the following enum values:

          - `HIGH`
          - `MEDIUM`
          - `LOW`
      type: string
      enum:
        - HIGH
        - MEDIUM
        - LOW
      example: MEDIUM
    IncomeStreamsBody:
      description: |
        A list of income streams for the account.

        For each income stream, we provide additional insights such as:
        - Frequency, stability, and confidence level of the income transactions.
        - Key metrics about the transaction amounts.
        ‚ÑπÔ∏è If no income sources are found, we return an empty array.
      type: object
      required:
        - account_id
        - income_type
        - frequency
        - monthly_average
        - average_income_amount
        - last_income_amount
        - currency
        - last_income_description
        - last_income_date
        - stability
        - regularity
        - trend
        - lookback_periods
        - full_periods
        - periods_with_income
        - number_of_incomes
        - confidence
      properties:
        account_id:
          description: Unique ID for the bank account to be verified for income streams.
          type: string
          example: EBACA-89077589
        income_type:
          $ref: '#/components/schemas/EnumIncomeStreamType'
        frequency:
          $ref: '#/components/schemas/EnumIncomeStreamFrequency'
        monthly_average:
          description: >
            The average amount of income received from the source over
            `lookback_periods`.
          type: number
          format: float
          example: 2500
        average_income_amount:
          description: |
            The average income transaction amount from the source.
          type: number
          format: float
          example: 2500
        last_income_amount:
          description: |
            The amount of the most recent income received from the source.
          type: number
          format: float
          example: 2500
        currency:
          description: |-
            The three-letter currency code of the income. For example:

              ‚Ä¢ üáßüá∑ BRL (Brazilian Real)
              ‚Ä¢ üá®üá¥ COP (Colombian Peso)
              ‚Ä¢ üá≤üáΩ MXN (Mexican Peso)
              
          type: string
          example: BRL
        last_income_description:
          description: 'The description of the most recent income from the steam. '
          format: string
          example: Sal√°rio
        last_income_date:
          description: >
            The date when the most recent income from the stream was received,
            in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2022-02-09'
        stability:
          description: >
            The stability of the income based on its amount, with a range from 0
            to 1, where 1 represents perfect stability.


            **Note:** For transactions with `frequency`=`SINGLE`, this value
            returns `null`.
          type: number
          format: float
          nullable: true
          example: 1
        regularity:
          description: >
            The regularity of the income basde in its frequency, with a range
            from 0 to 1, where 1 represents perfect regularity.


            **Note:** For transactions with `frequency`=`SINGLE`, this value
            returns `null`.
          type: number
          format: float
          nullable: true
          example: 0.75
        trend:
          description: >
            The income trend during a period of time calculated between last
            income and first income received, where:
              - a negative float means that the income trend is decreasing during the time period.
              - a positive float means that the income trend is increasing during the time period.

            **Note:** For transactions with `frequency`=`SINGLE`, this value
            returns `null`.
          type: number
          format: float
          nullable: true
          example: 0
        lookback_periods:
          description: >
            Number of period units (based on *rolling months*) used to generate
            insights and calculations.


            **Note:** A *rolling month* is a period of 30 days. For example,
            2023-01-15 to 2023-02-2023.
          type: integer
          format: int32
          example: 4
        full_periods:
          description: >
            Number of period units (based on *rolling months*) with data to
            perform calculations.


            **Note:** A *rolling month* is a period of 30 days. For example,
            2023-01-15 to 2023-02-2023.
          type: integer
          format: int32
          example: 12
        periods_with_income:
          description: >
            Number of period units (based on *rolling months*) with at least one
            income available.


            **Note:** A *rolling month* is a period of 30 days. For example,
            2023-01-15 to 2023-02-2023.
          type: integer
          format: int32
          example: 3
        number_of_incomes:
          description: |
            Number of income transactions over the `lookback_periods`.
          type: integer
          format: int32
          example: 4
        confidence:
          $ref: '#/components/schemas/EnumIncomeStreamConfidence'
    EnumIncomeSourceType:
      description: |
        The type of source we generate income insights from.
        We return one of the following enum values:

          - `BANK`
      type: string
      enum:
        - BANK
      example: BANK
    Income:
      description: Income insights
      type: object
      required:
        - id
        - link
        - created_at
        - income_streams
        - institution
        - income_source_type
        - first_transaction_date
        - last_transaction_date
        - number_of_income_streams
        - monthly_average
        - monthly_average_regular
        - monthly_average_irregular
        - monthly_average_low_confidence
        - monthly_average_medium_confidence
        - monthly_average_high_confidence
        - total_income_amount
        - total_regular_income_amount
        - total_low_confidence
        - total_medium_confidence
        - total_high_confidence
      properties:
        id:
          description: Belvo's unique identifier for the current income.
          type: string
          format: uuid
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        link:
          description: The `link.id` the account belongs to.
          type: string
          format: uuid
          example: f4621548-2f9e-440e-9ebd-ae8decac8c02
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was created in Belvo's
            database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        income_streams:
          description: An array of enriched income stream objects.
          type: array
          items:
            $ref: '#/components/schemas/IncomeStreamsBody'
        institution:
          description: The institution where the account is registered.
          type: string
          example: Erebor Brazil
        income_source_type:
          $ref: '#/components/schemas/EnumIncomeSourceType'
        first_transaction_date:
          description: >
            The date when the first transaction occurred, in `YYYY-MM-DD`
            format.
          type: string
          format: date
          nullable: true
          example: '2022-06-09'
        last_transaction_date:
          description: >
            The date when when the last transaction occurred, in `YYYY-MM-DD`
            format.
          type: string
          format: date
          example: '2023-02-09'
        number_of_income_streams:
          description: |
            Number of total income streams analized.
          type: integer
          format: int32
          example: 12
        monthly_average:
          description: >
            Average amount of income received per month across all the accounts
            for the specific user.
          type: number
          format: float
          example: 1705.46
        monthly_average_regular:
          description: >
            Average amount of regular income (with a frequency of `MONTHLY`,
            `BIWEEKLY`, or `WEEKLY`) received per month for the specific user.
          type: number
          format: float
          example: 2500
        monthly_average_irregular:
          description: >
            Average amount of irregular income (with a frequency of `SINGLE` or
            `IRREGULAR`) received per month for the specific user.
          type: number
          format: float
          example: 1308.18
        monthly_average_low_confidence:
          description: >
            Average amount of income received per month for the specific user
            with `LOW` confidence.
          type: number
          format: float
          example: 1308.18
        monthly_average_medium_confidence:
          description: >
            Average amount of income received per month for the specific user
            with `MEDIUM` confidence.
          type: number
          format: float
          example: 2500
        monthly_average_high_confidence:
          description: >
            Average amount of income received per month for the specific user
            with `HIGH` confidence.
          type: number
          format: float
          example: 0
        total_income_amount:
          description: |
            Total amount of all income received for the specific user.
          type: number
          format: float
          example: 12616.37
        total_regular_income_amount:
          description: >
            Total amount of regular income (with a frequency of `MONTHLY`,
            `BIWEEKLY`, `WEEKLY`) for the specific user.
          type: number
          format: float
          example: 10000
        total_irregular_income_amount:
          description: >
            Total amount of irregular income (with a frequency of `SINGLE` or
            `IRREGULAR`) for the specific user.
          type: number
          format: float
          example: 2616.37
        total_low_confidence:
          description: |
            Total amount of income for the specific user with `LOW` confidence.
          type: number
          format: float
          example: 2616.37
        total_medium_confidence:
          description: >
            Total amount of income for the specific user with `MEDIUM`
            confidence.
          type: number
          format: float
          example: 10000
        total_high_confidence:
          description: |
            Total amount of income for the specific user with `HIGH` confidence.
          type: number
          format: float
          example: 0
    IncomesPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of income objects.
          type: array
          items:
            $ref: '#/components/schemas/Income'
    EnumInvoiceAllowedIncomeTypesRequest:
      description: |-
        The categories of the incomes you want to get information for. 
        You can send through one or more of the following values:
          - `SALARY`
          - `GOVERNMENT`
          - `INTEREST`
          - `RENT`
          - `RETIREMENT`
          - `FREELANCE`
          - `ALTERNATIVE_INCOME`
          - `TRANSFER`
          - `DEPOSIT`
          - `UNKNOWN`
      type: string
      enum:
        - SALARY
        - GOVERNMENT
        - INTEREST
        - RENT
        - RETIREMENT
        - FREELANCE
        - ALTERNATIVE_INCOME
        - TRANSFER
        - DEPOSIT
        - UNKNOWN
      example: SALARY
    EnumIncomeMinimumConfidenceLevelRequest:
      description: >
        The minimum confidence level of the incomes you want to get information
        for.


        You can send through one of the following values:

          - `HIGH`
          - `MEDIUM`
          - `LOW`
      type: string
      enum:
        - HIGH
        - MEDIUM
        - LOW
      example: HIGH
    IncomesRequest:
      type: object
      required:
        - link
      properties:
        link:
          description: The `link.id` that you want to get information for.
          type: string
          format: uuid
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        allowed_income_types:
          type: array
          items:
            $ref: '#/components/schemas/EnumInvoiceAllowedIncomeTypesRequest'
        minimum_confidence_level:
          $ref: '#/components/schemas/EnumIncomeMinimumConfidenceLevelRequest'
        date_from:
          description: >-
            The date from which you want to start getting incomes for, in
            `YYYY-MM-DD` format, within the last 365 days. When you use this
            parameter, you must also send `date_to`.


            ‚ö†Ô∏è You must have at least 90 days between `date_from` and `date_to`.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-08-01'
        date_to:
          description: >-
            The date you want to stop getting incomes for, in `YYYY-MM-DD`
            format, within the last 365 days. When you use this parameter, you
            must also send `date_from`.


            ‚ö†Ô∏è You must have at least 90 days between `date_from` and `date_to`.


            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-12-30'
        token:
          description: The OTP token generated by the bank.
          type: string
          example: 1234ab
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
    InvalidPeriodError:
      title: Invalid Period
      description: >-
        This error occurs when you request incomes for a link within a given
        date range, however, the period between `date_from` and `date_to` is
        less than 90 days.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`invalid_period`) that allows you to classify
            and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#400-invalid_period"
            target="_blank">400 invalid_period errors</a>.
          type: string
          example: invalid_period
        message:
          description: |-
            A short description of the error. 

            For `invalid_period` errors, the description is:
              
              - `The number of days between date_from and date_to must be at least 90 days`.
          type: string
          example: >-
            The number of days between date_from and date_to must be at least 90
            days
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    RecurringExpenseSourceTransaction:
      description: >-
        An array of minified transaction objects used to evaluate the recurring
        expense. If no transactions were found, we return an empty array.
      type: object
      nullable: true
      required:
        - amount
        - description
        - value_date
      properties:
        description:
          description: >-
            The description of the transaction provided by the institution.
            Usually, this is the text that the end user would see in the bank
            statement. The description can be an empty string.
          type: string
          nullable: true
          example: Netflix.com/march
        amount:
          description: The transaction amount.
          type: number
          format: float
          example: 2145.45
        value_date:
          description: The date when the transaction occurred, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2019-10-23'
    EnumRecurringExpenseFrequency:
      description: |
        The frequency at which this recurring expense occurs.


        ‚ÑπÔ∏è **Note:** Belvo only identifies `MONTHLY` frequencies.
      type: string
      enum:
        - MONTHLY
      default: MONTHLY
      example: MONTHLY
    EnumRecurringExpenseCategory:
      description: >
        The transaction category for the recurring expense. For more information
        on the available categories, please see our [Transaction categorization
        documentation](https://developers.belvo.com/docs/banking#categorizing-transactions).


        - `Online Platforms & Leisure` (Netflix, Spotify, Gym Memberships)

        - `Bills & Utilities` (electricity, telephone, internet)

        - `Credits & Loans` (credit card cash advances, student loan, watercraft
        lease)

        - `Insurance` (home, car, and health & life insurance)

        - `Transport & Travel` (Uber trip, airbnb, parking)

        - `Taxes` (service fee, donation, court taxes)
      type: string
      enum:
        - Bills & Utilities
        - Credits & Loans
        - Insurance
        - Online Platforms & Leisure
        - Transport & Travel
        - Taxes
      example: Online Platforms & Leisure
    EnumRecurringExpensePaymentType:
      description: |
        The type of recurring expense. We return one of the following values:

          - `SUBSCRIPTION`
          - `REGULAR`
      type: string
      nullable: true
      enum:
        - SUBSCRIPTION
        - REGULAR
      example: SUBSCRIPTION
    RecurringExpenses:
      description: |
        Recurring expense insights.


        ‚ÑπÔ∏è If no recurring expense insights are found, we return an empty array.
      type: object
      required:
        - account
        - name
        - transactions
        - frequency
        - average_transaction_amount
        - median_transaction_amount
        - days_since_last_transaction
        - category
        - payment_type
      properties:
        id:
          description: >-
            Belvo's unique identifier used to reference the current recurring
            expense.
          type: string
          format: uuid
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        account:
          $ref: '#/components/schemas/Account'
        name:
          description: >
            The name for the recurring expense.


            ‚ÑπÔ∏è **Note**: This information is taken from the description section
            of a transaction and then normalized to provide you with an
            easy-to-read name. As such, sometimes the name will reflect the
            merchant the payment is made to (for example, Netflix.com), while
            for other recurring expenses, this could be something like "Monthly
            payment to John".
          type: string
          nullable: true
          default: null
          example: Netflix
        transactions:
          description: >-
            An array of minified transaction objects used to evaluate the
            recurring expense. If no transactions were found, we return an empty
            array.
          type: array
          items:
            $ref: '#/components/schemas/RecurringExpenseSourceTransaction'
        frequency:
          $ref: '#/components/schemas/EnumRecurringExpenseFrequency'
        average_transaction_amount:
          description: The average transaction amount of the recurring expense.
          type: number
          format: float
          example: 32.9
        median_transaction_amount:
          description: The median transaction amount of the recurring expense.
          type: number
          format: float
          example: 32.9
        days_since_last_transaction:
          description: >
            Number of days since the last recurring expense occurred.


            Based on the frequency, you can infer how many days until the next
            charge will occur.
          type: integer
          format: int32
          example: 5
        category:
          $ref: '#/components/schemas/EnumRecurringExpenseCategory'
        payment_type:
          $ref: '#/components/schemas/EnumRecurringExpensePaymentType'
    RecurringExpensesPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of recurring expense objects.
          type: array
          items:
            $ref: '#/components/schemas/RecurringExpenses'
    RecurringExpensesRequest:
      type: object
      required:
        - link
      properties:
        link:
          description: The `link.id` that you want to get information for.
          type: string
          format: uuid
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        token:
          description: The OTP token generated by the bank.
          type: string
          example: 1234ab
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
        date_from:
          description: >-
            The date from which you want to start getting recurring expenses
            for, in `YYYY-MM-DD` format, within the last 365 days. When you use
            this parameter, you must also send `date_to`.




            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2022-08-01'
        date_to:
          description: >-
            The date you want to stop getting recurring expenses for, in
            `YYYY-MM-DD` format, within the last 365 days. When you use this
            parameter, you must also send `date_from`.




            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2022-12-30'
    EnumInvestmentPortfolioType:
      description: |
        The portfolio type.

        We return one of the following values:

          - `FIXED_INCOME`
          - `OTHER`
          - `PENSION`
          - `VARIABLE_INCOME`
      type: string
      enum:
        - FIXED_INCOME
        - OTHER
        - PENSION
        - VARIABLE_INCOME
      example: FIXED_INCOME
    InvestmentsPortfolioInstrumentPublicId:
      description: The public identifiers for the instrument.
      type: object
      required:
        - type
        - value
      properties:
        type:
          description: The type of public identifier for the instrument.
          type: string
          example: isin
        value:
          description: The value of the `public_id.type`.
          type: string
          example: 435-3354.3333
    EnumInvestmentPortfolioInstrumentType:
      description: >
        The instrument type. For more information about instruments, please see
        our [Investments DevPortal
        article](https://developers.belvo.com/docs/investments#instruments).


        We return one of the following values:

          - `BOND`
          - `DEPOSIT`
          - `ETF`
          - `FUND`
          - `OTHER`
          - `PENSION`
          - `STOCK`
      type: string
      enum:
        - BOND
        - DEPOSIT
        - ETF
        - FUND
        - OTHER
        - PENSION
        - STOCK
      example: DEPOSIT
    InvestmentsPortfolioInstrumentRedemptionConditions:
      type: object
      nullable: true
      required:
        - type
        - value
      properties:
        type:
          description: The name of the redemption condition.
          type: string
          example: due_date
        value:
          description: The value of `redemption_conditions.type`.
          type: string
          example: 12-02-2023
    InvestmentsPortfolioInstrumentFees:
      type: object
      nullable: true
      required:
        - type
        - value
      properties:
        type:
          description: The fee type incurred when making the purchase of the instrument.
          type: string
          example: OPERATION_FEE
        value:
          description: >-
            The value of `fees.type`. The currency of the fee is the same as the
            currency of the instrument.
          type: number
          format: float
          example: 123.09
    InvestmentsPortfolioInstrumentInterestRate:
      type: object
      nullable: true
      required:
        - type
        - value
        - index
      properties:
        type:
          description: How often the interest rate is calculated on the instrument.
          type: string
          example: yearly
        value:
          description: >
            The interest rate for the instrument, in percent.



            ‚ÑπÔ∏è  **Note:** If the `interest_rate.index` is present, this value is
            a percentage of the index. For example, if `interest_rate.index` =
            `CDI` and `interest_rate.value` = `90`, then the total interest rate
            applied is 90% of the CDI.
          type: number
          format: float
          example: 11.31
        index:
          description: >-
            If applicable, the index type that the `interest_rates.value` is
            calculated against.
          type: string
          nullable: true
          example: CDI
    InvestmentsPortfolioInstrument:
      type: object
      nullable: true
      required:
        - public_id
        - type
        - subtype
        - name
        - currency
        - price
        - quantity
        - balance_gross
        - balance_net
        - average_acquisition_price
        - profit
        - open_date
        - redemption_conditions
        - fees
        - interest_rates
      properties:
        id:
          description: Belvo's unique ID for the current instrument.
          type: string
          format: uuid
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        public_id:
          description: The public identifiers for the instrument.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrumentPublicId'
        type:
          $ref: '#/components/schemas/EnumInvestmentPortfolioInstrumentType'
        subtype:
          description: The subtype for the instrument, as given by the institution.
          type: string
          nullable: true
          example: CBD
        name:
          description: The name of the instrument, as given by the institution.
          type: string
          example: CBD DIGITAL ESPECIAL
        currency:
          description: >
            The currency of the instrument. For example:


            - üáßüá∑ BRL (Brazilian Real)

            - üá®üá¥ COP (Colombian Peso)

            - üá≤üáΩ MXN (Mexican Peso)

            - üá∫üá∏ USD (US Dollar)



            Please note that other currencies other than in the list above may
            be returned.
          type: string
          example: USD
        price:
          description: The current price of one share in the instrument.
          type: number
          format: float
          nullable: true
          example: 10.41
        quantity:
          description: The total amount of shares owned in the instrument.
          type: number
          format: float
          nullable: true
          example: 27.46
        balance_gross:
          description: The total gross value of the instrument (including taxes).
          type: number
          format: float
          nullable: true
          example: 100.09
        balance_net:
          description: The total net value of the instrument (excluding taxes).
          type: number
          format: float
          nullable: true
          example: 99.09
        average_acquisition_price:
          description: The average price of each share acquired in the instrument.
          type: number
          format: float
          nullable: true
          example: 10.01
        profit:
          description: The current profit earned in the instrument.
          type: number
          format: float
          nullable: true
          example: 3.08
        open_date:
          description: >-
            The start date of the instrument. Only applicable for instruments of
            type `bond` or `savings`.
          type: string
          format: date
          nullable: true
          example: '2021-08-10'
        redemption_conditions:
          description: >
            An array of conditions that apply to the instrument in order to
            retrieve the final value.


            For example, the due date, the liquidity date, the previdencia type,
            and so on.
          type: array
          nullable: true
          items:
            $ref: >-
              #/components/schemas/InvestmentsPortfolioInstrumentRedemptionConditions
        fees:
          description: An array of fees that apply to the instrument.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrumentFees'
        interest_rates:
          description: An array of interest rates that apply to the instrument.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrumentInterestRate'
    InvestmentsPortfolio:
      type: object
      required:
        - name
        - type
        - balance_gross
        - balance_net
        - currency
      properties:
        id:
          description: Belvo's unique ID for the current portfolio.
          type: string
          format: uuid
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        name:
          description: |
            The name of the portfolio, as given in the institution.
          type: string
          example: Investimento
        type:
          $ref: '#/components/schemas/EnumInvestmentPortfolioType'
        balance_type:
          description: >
            Indicates whether this account is either an `ASSET` or a
            `LIABILITY`. You can consider the balance of an `ASSET` as being
            positive, while the balance of a `LIABILITY` as negative.
          type: string
          nullable: true
          example: ASSET
        balance_gross:
          description: >
            The current gross total value of the entire portfolio and all its
            underlying instruments, as given by the institution.
          type: number
          format: float
          nullable: true
          example: 76000
        balance_net:
          description: >
            The total current value of the entire portfolio and all its
            underlying instruments, as given by the institution.


            ‚ÑπÔ∏è **Note:** In Brazil, this is usually calculated based on the net
            value (that is, not including tax).
          type: number
          format: float
          nullable: true
          example: 77370.69
        currency:
          description: >
            The currency of the portfolio. For example:



            - üáßüá∑ BRL (Brazilian Real)

            - üá®üá¥ COP (Colombian Peso)

            - üá≤üáΩ MXN (Mexican Peso)



            Please note that other currencies other than in the list above may
            be returned.
          type: string
          example: BRL
        instruments:
          description: An array of instruments that fall into the investment portfolio.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/InvestmentsPortfolioInstrument'
    InvestmentsPortfoliosPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of investment portfolio objects.
          type: array
          items:
            $ref: '#/components/schemas/InvestmentsPortfolio'
    ReceivablesTransactionAccount:
      description: Basic information about the account associated with the transaction.
      type: object
      required:
        - id
        - institution
      properties:
        id:
          description: Belvo's unique ID for the account associated with the transaction.
          type: string
          format: uuid
          example: a7a3104c-5a3c-4536-81e1-14523097f645
        institution:
          $ref: '#/components/schemas/InstitutionAccount'
    EnumReceivableTransactionType:
      description: >
        The type of transaction. For example, whether the transaction was a
        `VISA_DEBIT` or a `MASTERCARD_CREDIT`.


        We return one of the following values:

          - `VISA_CREDIT`
          - `VISA_DEBIT`
          - `MASTERCARD_CREDIT`
          - `MASTERCARD_DEBIT`
          - `ELO_CREDIT`
          - `ELO_DEBIT`
          - `null`
      type: string
      nullable: true
      enum:
        - VISA_CREDIT
        - VISA_DEBIT
        - MASTERCARD_CREDIT
        - MASTERCARD_DEBIT
        - ELO_CREDIT
        - ELO_DEBIT
        - null
      example: MASTERCARD_CREDIT
    EnumReceivableTransactionFeeType:
      description: >-
        The type of fee applied to the transaction. We return one of the
        following values:

          - `TRANSACTION_FEE`
      type: string
      nullable: true
      enum:
        - TRANSACTION_FEE
      example: TRANSACTION_FEE
    RecevablesTransactionFees:
      description: Details regarding the fees applied to the transaction.
      type: object
      required:
        - type
        - value
      properties:
        type:
          $ref: '#/components/schemas/EnumReceivableTransactionFeeType'
        value:
          description: The value of `fees.type`.
          type: number
          format: float
          example: 2.21
    EnumReceivableTransactionStatus:
      description: |-
        The status of the transaction. Can be either:

          - `APPROVED`
          - `CANCELLED`
          - `REVERTED`
          - `UNCATEGORIZED`
      type: string
      nullable: true
      enum:
        - APPROVED
        - CANCELLED
        - REVERTED
        - UNCATEGORIZED
      example: APPROVED
    ReceivablesTransactionNumberOfInstallments:
      description: >-
        Details regarding the number of installments for the transaction, if
        applicable.
      type: object
      required:
        - paid
        - total
      nullable: true
      properties:
        paid:
          description: >-
            The number of payments already made to pay the cost of the
            transaction.
          type: integer
          nullable: true
          format: int32
          example: 1
        total:
          description: The number of payments required to pay the cost of the transaction.
          type: integer
          nullable: true
          format: int32
          example: 2
    ReceivablesTransaction:
      type: object
      required:
        - id
        - account
        - created_at
        - collected_at
        - value_hour
        - value_date
        - institution_transaction_id
        - currency
        - type
        - gross_amount
        - net_amount
        - fees
        - status
        - number_of_installments
      properties:
        id:
          description: Belvo's unique ID for the current receivable transaction.
          type: string
          format: uuid
          readOnly: true
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        account:
          $ref: '#/components/schemas/ReceivablesTransactionAccount'
        created_at:
          description: >-
            The ISO timestamp of when the data point was last updated in Belvo's
            database.
          type: string
          format: date-time
          example: '2020-04-23T21:30:20.336854+00:00'
        collected_at:
          description: The ISO timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2020-04-23T21:32:55.336854+00:00'
        value_hour:
          description: >-
            The time that the transaction occurred, according to the
            institution, in `HH:MM` format.
          type: string
          example: '19:47'
        value_date:
          description: >-
            The date that the transactions occurred, according to the
            institution, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2022-01-16'
        institution_transaction_id:
          description: >-
            Internal identification number that the acquirer uses to identify
            the transaction.

            ‚ÑπÔ∏è **Note**: For Brazil, this number is the NSU.
          type: string
          example: '134532345'
        currency:
          description: |-
            The currency of the transaction. For example:
            - üáßüá∑ BRL (Brazilian Real)
            - üá®üá¥ COP (Colombian Peso)
            - üá≤üáΩ MXN (Mexican Peso)

             Please note that currencies other than those listed above may be returned.
          type: string
          example: BRL
        type:
          $ref: '#/components/schemas/EnumReceivableTransactionType'
        gross_amount:
          description: The total gross amount of the transaction.
          type: number
          format: float
          nullable: true
          example: 106.7
        net_amount:
          description: The net amount of the transaction.
          type: number
          format: float
          nullable: true
          example: 104.58
        fees:
          type: array
          items:
            $ref: '#/components/schemas/RecevablesTransactionFees'
        status:
          $ref: '#/components/schemas/EnumReceivableTransactionStatus'
        number_of_installments:
          $ref: '#/components/schemas/ReceivablesTransactionNumberOfInstallments'
    ReceivablesTransactionsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of receivables objects.
          type: array
          items:
            $ref: '#/components/schemas/ReceivablesTransaction'
    ReceivableTransactionRequest:
      type: object
      required:
        - link
        - date_from
        - date_to
      properties:
        link:
          description: The `link.id` that you want to get information for.
          type: string
          format: uuid
          example: 2ccd5e15-194a-4a19-a45a-e7223c7e6717
        date_from:
          description: >-
            The date from which you want to start getting transactions for, in
            `YYYY-MM-DD` format.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-08-05'
        date_to:
          description: >-
            The date you want to stop getting transactions for, in `YYYY-MM-DD`
            format.


            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-10-05'
        token:
          description: The OTP token generated by the bank.
          type: string
          example: 1234ab
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
    RiskInsightsTransactionMetrics:
      description: >-
        Aggregated metrics calculated band on the user's transactions from
        checking, savings, credit card, and loan accounts.
      type: object
      nullable: true
      required:
        - num_transactions_1w
        - num_transactions_1m
        - num_transactions_3m
        - num_incoming_transactions_1w
        - num_incoming_transactions_1m
        - num_incoming_transactions_3m
        - num_outgoing_transactions_1w
        - num_outgoing_transactions_1m
        - num_outgoing_transactions_3m
        - sum_incoming_amount_1w
        - sum_incoming_amount_1m
        - sum_incoming_amount_3m
        - sum_outgoing_amount_1w
        - sum_outgoing_amount_1m
        - sum_outgoing_amount_3m
        - max_incoming_amount_1w
        - max_incoming_amount_1m
        - max_incoming_amount_3m
        - max_outgoing_amount_1w
        - max_outgoing_amount_1m
        - max_outgoing_amount_3m
        - mean_incoming_amount_1w
        - mean_incoming_amount_1m
        - mean_incoming_amount_3m
        - mean_outgoing_amount_1w
        - mean_outgoing_amount_1m
        - mean_outgoing_amount_3m
      properties:
        num_transactions_1w:
          description: >
            The total number of transactions analyzed to determine the risk
            insights for the last week (incoming and outgoing).
          type: integer
          format: int32
          default: 0
          example: 39
        num_transactions_1m:
          description: >
            The total number of transactions analyzed to determine the risk
            insights for the last month (incoming and outgoing).
          type: integer
          format: int32
          default: 0
          example: 39
        num_transactions_3m:
          description: >
            The total number of transactions analyzed to determine the risk
            insights for the last three months (incoming and outgoing).
          type: integer
          format: int32
          default: 0
          example: 39
        num_incoming_transactions_1w:
          description: >
            The total number of inflow transactions for the last week.


            ‚ÑπÔ∏è **Note**: If there are no transactions between the request date
            and the last seven or thirty days, the value is `0`.


            If the account has not been open long enough to have the transaction
            data for a given period, we return `null`. For example, if the
            account has only been open for five days, we return values for `_1w`
            and `_1m`, however, the value for `_3m` will be `null`.
          type: integer
          format: int32
          default: 0
          example: 20
        num_incoming_transactions_1m:
          description: >
            The total number of inflow transactions for the last month.


            ‚ÑπÔ∏è **Note**: If there are no transactions between the request date
            and the last seven or thirty days, the value is `0`.


            If the account has not been open long enough to have the transaction
            data for a given period, we return `null`. For example, if the
            account has only been open for five days, we return values for `_1w`
            and `_1m`, however, the value for `_3m` will be `null`.
          type: integer
          format: int32
          default: 0
          example: 20
        num_incoming_transactions_3m:
          description: >
            The total number of inflow transactions for the last three months.


            ‚ÑπÔ∏è **Note**: If there are no transactions between the request date
            and the last seven or thirty days, the value is `0`.


            If the account has not been open long enough to have the transaction
            data for a given period, we return `null`. For example, if the
            account has only been open for five days, we return values for `_1w`
            and `_1m`, however, the value for `_3m` will be `null`.
          type: integer
          format: int32
          default: 0
          example: 20
        num_outgoing_transactions_1w:
          description: >
            To total number of outflow transactions in the last week.


            ‚ÑπÔ∏è **Note**: If there are no transactions between the request date
            and the last seven or thirty days, the value is `0`.


            If the account has not been open long enough to have the transaction
            data for a given period, we return `null`. For example, if the
            account has only been open for five days, we return values for `_1w`
            and `_1m`, however, the value for `_3m` will be `null`.
          type: integer
          format: int32
          default: 0
          example: 19
        num_outgoing_transactions_1m:
          description: >
            To total number of outflow transactions in the last month.


            ‚ÑπÔ∏è **Note**: If there are no transactions between the request date
            and the last seven or thirty days, the value is `0`.


            If the account has not been open long enough to have the transaction
            data for a given period, we return `null`. For example, if the
            account has only been open for five days, we return values for `_1w`
            and `_1m`, however, the value for `_3m` will be `null`.
          type: integer
          format: int32
          default: 0
          example: 19
        num_outgoing_transactions_3m:
          description: >
            To total number of outflow transactions in the last three months.


            ‚ÑπÔ∏è **Note**: If there are no transactions between the request date
            and the last seven or thirty days, the value is `0`.


            If the account has not been open long enough to have the transaction
            data for a given period, we return `null`. For example, if the
            account has only been open for five days, we return values for `_1w`
            and `_1m`, however, the value for `_3m` will be `null`.
          type: integer
          format: int32
          default: 0
          example: 19
        sum_incoming_amount_1w:
          description: |
            The total sum of all inflow transactions for the last week.
          type: number
          format: float
          nullable: true
          example: 10022.01
        sum_incoming_amount_1m:
          description: |
            The total sum of all inflow transactions for the last month.
          type: number
          format: float
          nullable: true
          example: 10022.01
        sum_incoming_amount_3m:
          description: |
            The total sum of all inflow transactions for the last three months.
          type: number
          format: float
          nullable: true
          example: 10022.01
        sum_outgoing_amount_1w:
          description: |
            The total sum of all outflow transactions for the last week.
          type: number
          format: float
          nullable: true
          example: 10237.03
        sum_outgoing_amount_1m:
          description: |
            The total sum of all outflow transactions for the last month.
          type: number
          format: float
          nullable: true
          example: 10237.03
        sum_outgoing_amount_3m:
          description: |
            The total sum of all outflow transactions for the last three months.
          type: number
          format: float
          nullable: true
          example: 10237.03
        max_incoming_amount_1w:
          description: |
            The highest value inflow transaction in the last week.
          type: number
          format: float
          nullable: true
          example: 3030
        max_incoming_amount_1m:
          description: |
            The highest value inflow transaction in the last month.
          type: number
          format: float
          nullable: true
          example: 3030
        max_incoming_amount_3m:
          description: |
            The highest value inflow transaction in the last three months.
          type: number
          format: float
          nullable: true
          example: 3030
        max_outgoing_amount_1w:
          description: |
            The highest value outflow transaction in the last week.
          type: number
          format: float
          nullable: true
          example: 3027.44
        max_outgoing_amount_1m:
          description: |
            The highest value outflow transaction in the last month.
          type: number
          format: float
          nullable: true
          example: 3027.44
        max_outgoing_amount_3m:
          description: |
            The highest value outflow transaction in the last three months.
          type: number
          format: float
          nullable: true
          example: 3027.44
        mean_incoming_amount_1w:
          description: |
            The mean incoming value of all transactions in the last week.
          type: number
          format: float
          nullable: true
          example: 3030
        mean_incoming_amount_1m:
          description: |
            The mean incoming value of all transactions in the last month.
          type: number
          format: float
          nullable: true
          example: 3030
        mean_incoming_amount_3m:
          description: >
            The mean incoming value of all transactions in the last three
            months.
          type: number
          format: float
          nullable: true
          example: 3030
        mean_outgoing_amount_1w:
          description: |
            The mean outgoing value of all transaction in the last week.
          type: number
          format: float
          nullable: true
          example: 3027.44
        mean_outgoing_amount_1m:
          description: |
            The mean outgoing value of all transaction in the last month.
          type: number
          format: float
          nullable: true
          example: 3027.44
        mean_outgoing_amount_3m:
          description: |
            The mean outgoing value of all transaction in the last three months.
          type: number
          format: float
          nullable: true
          example: 3027.44
    RiskInsightsBalanceMetrics:
      description: >-
        Balance metrics calculated based on the user's balances from checking
        and savings accounts.
      type: object
      nullable: true
      required:
        - min_balance_1w
        - min_balance_1m
        - min_balance_3m
        - max_balance_1w
        - max_balance_1m
        - max_balance_3m
        - days_balance_below_0_1w
        - days_balance_below_0_1m
        - days_balance_below_0_3m
        - days_balance_below_x_1w
        - days_balance_below_x_1m
        - days_balance_below_x_3m
        - closing_balance
        - balance_threshold_x
      properties:
        min_balance_1w:
          description: |
            The minimum balance in the period (one week).
          type: number
          format: float
          nullable: true
          example: 0.51
        min_balance_1m:
          description: |
            The minimum balance in the period (one month).
          type: number
          format: float
          nullable: true
          example: 0.51
        min_balance_3m:
          description: |
            The minimum balance in the period (three months).
          type: number
          format: float
          nullable: true
          example: 0.51
        max_balance_1w:
          description: |
            The maximum balance in the period (one week).
          type: number
          format: float
          nullable: true
          example: 3062.11
        max_balance_1m:
          description: |
            The maximum balance in the period (one month).
          type: number
          format: float
          nullable: true
          example: 3062.11
        max_balance_3m:
          description: |
            The maximum balance in the period (three months).
          type: number
          format: float
          nullable: true
          example: 3062.11
        closing_balance:
          description: |
            The balance of all the accounts at the `collected_at` time.
          type: number
          format: float
          nullable: true
          example: 24.19
        days_balance_below_0_1w:
          description: >
            The number of days that the total balance of the account is less
            than or equal to 0 in the last week.
          type: integer
          format: int32
          nullable: true
          example: 0
        days_balance_below_0_1m:
          description: >
            The number of days that the total balance of the account is less
            than or equal to 0 in the last month.
          type: integer
          format: int32
          nullable: true
          example: 0
        days_balance_below_0_3m:
          description: >
            The number of days that the total balance of the account is less
            than or equal to 0 in the last three months.
          type: integer
          format: int32
          nullable: true
          example: 0
        days_balance_below_x_1w:
          description: >
            The number of days that the total balance of the account is less
            than or equal to the amount specified in `balance_threshold_x` in
            the last week.
          type: integer
          format: int32
          nullable: true
          example: 3
        days_balance_below_x_1m:
          description: >
            The number of days that the total balance of the account is less
            than or equal to the amount specified in `balance_threshold_x` in
            the last month.
          type: integer
          format: int32
          nullable: true
          example: 3
        days_balance_below_x_3m:
          description: >
            The number of days that the total balance of the account is less
            than or equal to the amount specified in `balance_threshold_x` in
            the last three months.
          type: integer
          format: int32
          nullable: true
          example: 3
        balance_threshold_x:
          description: >
            The threshold used to compute `days_balance_below_x_period`. Please
            note, this is value is country specific (both in terms of the amount
            and the currency).
          type: number
          format: float
          example: 267
    RiskInsightsCashflowMetrics:
      description: >
        Aggregated metrics calculated based on the user's transactions from
        checking, savings, credit, and loan accounts.


        However, internal transfers (transfers between accounts belonging to the
        same link) are not used in the calculation.
      type: object
      nullable: true
      required:
        - sum_positive_1w
        - sum_positive_1m
        - sum_positive_3m
        - sum_negative_1w
        - sum_negative_1m
        - sum_negative_3m
        - positive_to_negative_ratio_1w
        - positive_to_negative_ratio_1m
        - positive_to_negative_ratio_3m
      properties:
        sum_positive_1w:
          description: >
            Sum total of all transactions leading to a positive cashflow in the
            last week (counted from the time of the request).
          type: number
          format: float
          nullable: true
          example: 10022.01
        sum_positive_1m:
          description: >
            Sum total of all transactions leading to a positive cashflow in the
            last month (counted from the time of the request).
          type: number
          format: float
          nullable: true
          example: 10022.01
        sum_positive_3m:
          description: >
            Sum total of all transactions leading to a positive cashflow in the
            last three months (counted from the time of the request).
          type: number
          format: float
          nullable: true
          example: 10022.01
        sum_negative_1w:
          description: >
            Sum total of all transactions leading to a negative cashflow in the
            last week (counted from the time of the request).
          type: number
          format: float
          nullable: true
          example: 10237.03
        sum_negative_1m:
          description: >
            Sum total of all transactions leading to a negative cashflow in the
            last month (counted from the time of the request).
          type: number
          format: float
          nullable: true
          example: 10237.03
        sum_negative_3m:
          description: >
            Sum total of all transactions leading to a negative cashflow in the
            last three months (counted from the time of the request).
          type: number
          format: float
          nullable: true
          example: 10237.03
        positive_to_negative_ratio_1w:
          description: "The ratio between sum_positive / sum_negative  in the last week (counted from the time of the request).\n\n‚ÑπÔ∏è\_If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n\n**Note**: In the case that there have been no outgoing transactions, the value will be `null`.\n"
          type: number
          format: float
          nullable: true
          example: 0.98
        positive_to_negative_ratio_1m:
          description: "The ratio between sum_positive / sum_negative  in the last month (counted from the time of the request).\n\n‚ÑπÔ∏è\_If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n"
          type: number
          format: float
          nullable: true
          example: 0.98
        positive_to_negative_ratio_3m:
          description: "The ratio between sum_positive / sum_negative  in the last three months (counted from the time of the request).\n\n‚ÑπÔ∏è\_If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n"
          type: number
          format: float
          nullable: true
          example: 0.98
    RiskInsightsCreditCardMetrics:
      description: Aggregated metrics calculated based on the link's credit card accounts.
      type: object
      nullable: true
      required:
        - num_accounts
        - sum_credit_limit
        - sum_credit_used
      properties:
        num_accounts:
          description: |
            Number of credit cards accounts associated to the link.
          type: integer
          format: int32
          minimum: 0
          example: 2
        sum_credit_limit:
          description: |
            Sum total of all credit cards' limits.
          type: number
          format: float
          nullable: true
          example: 600.5
        sum_credit_used:
          description: |
            Sum total of all credit used.
          type: number
          format: float
          nullable: true
          example: 200.5
    RiskInsightsLoansMetrics:
      description: Aggregated metrics calculated based on the user's loan accounts.
      type: object
      nullable: true
      required:
        - num_accounts
        - sum_loans_principal
        - sum_loans_outstanding_principal
        - sum_loans_monthly_payment
      properties:
        num_accounts:
          description: |
            Number of loan accounts associated with the link.
          type: integer
          format: int32
          example: 5
        sum_loans_principal:
          description: |
            Sum total of the principal for all of the link's loan accounts.
          type: number
          format: float
          nullable: true
          example: 5000
        sum_loans_outstanding_principal:
          description: >
            Sum total of the outstanding principal for all the link's loan
            accounts.
          type: number
          format: float
          nullable: true
          example: 2000
        sum_loans_monthly_payment:
          description: |
            Sum total of the monthly payments for all the link's loan accounts.
          type: number
          format: float
          nullable: true
          example: 400
    RiskInsights:
      type: object
      required:
        - id
        - link
        - accounts
        - created_at
        - transactions_metrics
        - balances_metrics
        - cashflow_metrics
        - credit_cards_metrics
        - loans_metrics
      properties:
        id:
          description: Belvo's unique ID for the risk insights request.
          type: string
          format: uuid
          example: 076c66e5-90f5-4e01-99c7-50e32f65ae42
        link:
          description: The `link.id` the risk insights analysis belongs to.
          type: string
          format: uuid
          example: 30cb4806-6e00-48a4-91c9-ca55968576c8
        accounts:
          description: >-
            An array of Belvo-generated account numbers (UUIDs) that were used
            during the risk insights analysis. If no accounts were found, we
            return an empty array.
          type: array
          nullable: true
          items:
            description: The Belvo-generated ID for the account.
            type: string
            format: uuid
            example: 0d3ffb69-f83b-456e-ad8e-208d0998d71d
          example:
            - 0d3ffb69-f83b-456e-ad8e-208d0998d71d
            - 00293c8e-1152-440b-9892-3c071fb88672
            - cf638fba-ef45-4c10-bc6f-adecc4b2bf4e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-01T20:25:47.307911Z'
        transactions_metrics:
          $ref: '#/components/schemas/RiskInsightsTransactionMetrics'
        balances_metrics:
          $ref: '#/components/schemas/RiskInsightsBalanceMetrics'
        cashflow_metrics:
          $ref: '#/components/schemas/RiskInsightsCashflowMetrics'
        credit_cards_metrics:
          $ref: '#/components/schemas/RiskInsightsCreditCardMetrics'
        loans_metrics:
          $ref: '#/components/schemas/RiskInsightsLoansMetrics'
    RiskInsightsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of risk insights objects.
          type: array
          items:
            $ref: '#/components/schemas/RiskInsights'
    EnumTaxRetentionReceiverNationality:
      description: >
        Whether the invoice receiver is a Mexican national or not. If the
        receiver is not considered a Mexican national, the retained taxes can be
        calculated differently. Possible values:
          - `NATIONAL`
          - `FOREIGN`
      type: string
      enum:
        - NATIONAL
        - FOREIGN
      nullable: true
      example: NATIONAL
    EnumTaxRetentionPaymentStatus:
      description: |
        Indicates whether or not the tax has been paid or not. Can be either:
          - `PAID`
          - `PROVISIONED`
      type: string
      enum:
        - PAID
        - PROVISIONED
      nullable: true
      example: PAID
    RetentionBreakdown:
      description: A breakdown of the retained taxes
      type: object
      required:
        - base_amount
        - tax_type
        - retained_amount
        - payment_status
      properties:
        base_amount:
          description: |
            The base amount that was used to calculate the tax retention.
          type: number
          format: float
          nullable: true
          example: 0.03
        tax_type:
          description: >
            Optional attribute to indicate the type of tax withheld for the
            period or year according to the [SAT
            catalog](https://developers.belvo.com/docs/sat-catalogs#retention-code).
          type: string
          nullable: true
          example: '01'
        retained_amount:
          description: |
            The amount retained.
          type: number
          format: float
          nullable: true
          example: 0
        payment_status:
          $ref: '#/components/schemas/EnumTaxRetentionPaymentStatus'
    TaxRetentions:
      type: object
      required:
        - collected_at
        - invoice_identification
        - version
        - code
        - issued_at
        - certified_at
        - cancelled_at
        - sender_id
        - sender_name
        - receiver_nationality
        - receiver_id
        - receiver_name
        - total_invoice_amount
        - total_taxable_amount
        - total_exempt_amount
        - total_retained_amount
        - retention_breakdown
        - xml
      properties:
        version:
          description: |
            The CFDI version of the tax retentions.
          type: string
          nullable: true
          example: '1.0'
        id:
          description: >-
            Belvo's unique identifier used to reference the current tax
            retention statement.
          type: string
          format: uuid
          example: c749315b-eec2-435d-a458-06912878564f
        link:
          description: The `link.id` the tax retention belongs to.
          type: string
          format: uuid
          example: 19697249-01b8-443e-a451-76bfc5fbeebf
        collected_at:
          description: |
            The ISO-8601 timestamp of when the data point was collected.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
        created_at:
          description: >
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:46:20.406032Z'
        invoice_identification:
          description: >
            The fiscal institution's unique ID for the invoice that the tax
            retention relates to.
          type: string
          format: uuid
          nullable: true
          example: def404af-5eef-4112-aa99-d1ec8493b89a
        code:
          description: >
            The tax retention code. For more information, see our [SAT Catalogs
            DevPortal
            article](https://developers.belvo.com/docs/sat-catalogs#retention-code).
          type: integer
          format: int32
          nullable: true
          example: 25
        issued_at:
          description: |
            The ISO-8601 timestamp of when the tax retention was issued.
          type: string
          format: date-time
          nullable: true
          example: '2019-01-03T21:10:40.000Z'
        certified_at:
          description: |
            The ISO-8601 timestamp of when the tax retention was certified.
          type: string
          format: date-time
          nullable: true
          example: '2019-01-03T21:10:41.000Z'
        cancelled_at:
          description: >
            The ISO-8601 timestamp of when the tax retention was canceled (if
            applicable).
          type: string
          format: date-time
          nullable: true
          example: null
        sender_id:
          description: |
            The fiscal ID of the invoice sender.
          type: string
          nullable: true
          example: JKUF980404P0
        sender_name:
          description: |
            The name of the invoice sender.
          type: string
          nullable: true
          example: Roberto Nunez Batman
        receiver_nationality:
          $ref: '#/components/schemas/EnumTaxRetentionReceiverNationality'
        receiver_id:
          description: |
            The fiscal ID of the invoice receiver.
          type: string
          nullable: true
          example: GYGK3207809L1
        receiver_name:
          description: |
            The name of the invoice receiver.
          type: string
          nullable: true
          example: ACME LTD
        total_invoice_amount:
          description: |
            The total amount of the invoice that the tax retention relates to.
          type: number
          format: float
          nullable: true
          example: 53249.8
        total_exempt_amount:
          description: |
            Total amount that is exempt from taxation.
          type: number
          format: float
          nullable: true
          example: 1000.8
        total_retained_amount:
          description: |
            Total tax retained.
          type: number
          format: float
          nullable: true
          example: 1550.7
        total_taxable_amount:
          description: >
            The total amount that can be taxed. Calculated as
            `total_invoice_amount` - `total_exempt_amount`.
          type: number
          format: float
          nullable: true
          example: 43249
        retention_breakdown:
          description: A breakdown of the retained taxes.
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RetentionBreakdown'
        xml:
          description: |
            The tax retention document in XML form.
          type: string
          nullable: true
          example: '=XML-STRING='
    TaxRetentionsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of tax retentions objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxRetentions'
    EnumTaxRetentionType:
      description: >
        The type of tax retention in relation to the invoice (from the
        perspective of the Link owner).


        - `OUTFLOW` relates to a tax retention for a sent invoice.

        - `INFLOW` related to a tax retention for a received invoice.
      type: string
      enum:
        - OUTFLOW
        - INFLOW
      example: INFLOW
    TaxRetentionsRequest:
      type: object
      required:
        - link
        - date_from
        - date_to
        - type
      properties:
        link:
          description: |
            The `link.id` that you want to get information for.
          type: string
          format: uuid
          example: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
        date_from:
          description: >
            The date from which you want to start getting tax retentions for, in
            `YYYY-MM-DD` format.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-01-01'
        date_to:
          description: >
            The date you want to stop getting tax retentions for, in
            `YYYY-MM-DD` format.


            ‚ö†Ô∏è The number of days between `date_from` and `date_to` cannot be
            over 365.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2020-02-01'
        type:
          $ref: '#/components/schemas/EnumTaxRetentionType'
        attach_xml:
          description: >-
            When set to `true`, you will receive the XML tax retention in the
            response.
          type: boolean
          default: true
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
    DocumentInformationIndividual:
      description: Object containing detailed information about the fiscal document.
      type: object
      required:
        - name
        - type
        - form_number
        - year
      properties:
        name:
          description: The name of the tax document.
          type: string
          example: >-
            Declaracion de Renta y Complementario o de Ingresos y Patrimonio
            para Personas Juridicas y Asimiladas y Personas Naturales y
            Asimiladas no Residentes y Sucesiones Iliquidas de Causantes no
            Residentes
        type:
          description: >-
            The type of tax declaration form. For DIAN, this will be either
            `110` or `210`.
          type: string
          example: '110'
        form_number:
          description: Institution-provided identifier for the tax declaration.
          type: string
          example: '2117680087604'
        year:
          description: |
            The year of this tax declaration.
          type: integer
          nullable: true
          example: 2021
    DocumentIdIndividual:
      description: Object containing information about the ID document of the tax payer.
      type: object
      required:
        - document_type
        - document_number
      properties:
        document_type:
          description: The type of ID document.
          type: string
          example: NIT
        document_number:
          description: The number of the ID document.
          type: string
          example: '7113223466'
    ReportingId:
      description: >-
        Object containing information about where the tax payer reports their
        income.
      type: object
      required:
        - reporting_type
        - reporting_value
      properties:
        reporting_type:
          description: >-
            The type of reporting ID. For DIAN, this is the sectional address
            code (*Codigo Dirrecion Seccional*)
          type: string
          example: sectional_address_code
        reporting_value:
          description: The value of the reporting ID.
          type: string
          example: '32'
    TaxPayerInformationIndividual:
      description: Object containing information about the tax payer.
      type: object
      required:
        - first_last_name
        - second_last_name
        - first_name
        - other_names
        - main_economic_activity
        - document_id
        - reporting_id
      properties:
        first_last_name:
          description: The tax payer's first last name.
          type: string
          example: Restrepo
        second_last_name:
          description: The tax payer's second last name.
          type: string
          example: Vives
        first_name:
          description: The tax payer's first name.
          type: string
          example: Carlos
        other_names:
          description: Additional names of the tax payer.
          type: string
          example: Alberto
        main_economic_activity:
          description: The main economic activity the tax payer is involved in.
          type: string
          example: '0010'
        document_id:
          $ref: '#/components/schemas/DocumentIdIndividual'
        reporting_id:
          $ref: '#/components/schemas/ReportingId'
    EquityStatementIndividual:
      description: Object containing the general fiscal situation of the taxpayer.
      type: object
      required:
        - total_gross_equity
        - total_debts
        - total_net_equity
      properties:
        total_gross_equity:
          description: The total gross equity of the tax payer.
          type: number
          format: float
          example: 4648000
        total_debts:
          description: The total debts of the tax_payer
          type: number
          format: float
          example: 77626000
        total_net_equity:
          description: The total net equity value of the taxpayer.
          type: number
          format: float
          example: 0
    GrossIncomeIndividual:
      description: Object containing the declared gross income of the tax payer.
      type: object
      required:
        - earned_income
        - fee_based_income
        - capital_income
        - non_labor_income
      properties:
        earned_income:
          description: Income received from employment.
          type: number
          format: float
          example: 115004000
        fee_based_income:
          description: >-
            Income received from emitted invoices (for example, income that
            independent contractors or freelancers receive).
          type: number
          format: float
          example: 0
        capital_income:
          description: >-
            Income received from an investment (such as dividends or from
            renting a property).
          type: number
          format: float
          example: 0
        non_labor_income:
          description: >-
            Income that cannot be classified into the other three fields (such
            as income from cryptocurrencies or regular transfers from parents).
          type: number
          format: float
          example: 0
    NonTaxableIncomeIndividual:
      description: Object containing the declared non-taxable income of the tax payer.
      type: object
      required:
        - earned_income
        - fee_based_income
        - capital_income
        - non_labor_income
      properties:
        earned_income:
          description: Income received from employment.
          type: number
          format: float
          example: 115004000
        fee_based_income:
          description: >-
            Income received from emitted invoices (for example, income
            independent contractors or freelancers receive).
          type: number
          format: float
          example: 0
        capital_income:
          description: >-
            Income received from an investment (such as dividends or from
            renting a property).
          type: number
          format: float
          example: 0
        non_labor_income:
          description: >-
            Income that cannot be classified into the other three fields (such
            as income from cryptocurrencies or regular transfers from parents).
          type: number
          format: float
          example: 0
    NetIncomeIndividual:
      description: >-
        Object containing the declared net income of the tax payer. The values
        are calculated as the `gross_income` - `non_taxable_income`.
      type: object
      required:
        - earned_income
        - fee_based_income
        - capital_income
        - non_labor_income
      properties:
        earned_income:
          description: Income received from employment.
          type: number
          format: float
          example: 115004000
        fee_based_income:
          description: >-
            Income received from emitted invoices (for example, income
            independent contractors or freelancers receive).
          type: number
          format: float
          example: 0
        capital_income:
          description: >-
            Income received from an investment (such as dividends or from
            renting a property).
          type: number
          format: float
          example: 0
        non_labor_income:
          description: >-
            Income that cannot be classified into the other three fields (such
            as income from cryptocurrencies or regular transfers from parents).
          type: number
          format: float
          example: 0
    AnnualTotalsIndividual:
      description: >-
        Object containing the tax payers total exempt, deducted, and ordinary
        net incomes.
      type: object
      required:
        - total_exempt_income
        - total_applicable_deductions
        - total_exemptions_and_deductions
        - total_ordinary_net_income
      properties:
        total_exempt_income:
          description: Total income that is not taxable, according to the institution.
          type: number
          format: float
          example: 115004000
        total_applicable_deductions:
          description: >-
            Total deductions that the taxpayer can apply to their income,
            according to the institution.
          type: number
          format: float
          example: 0
        total_exemptions_and_deductions:
          description: >-
            Sum total of all exempt and deductions that can be applied to the
            taxpayer's income.
          type: number
          format: float
          example: 0
        total_ordinary_net_income:
          description: >-
            Sum total of the taxpayer's income (gross income - exemptions -
            deductions).
          type: number
          format: float
          example: 0
    AnnualIncomeStatementIndividual:
      description: >-
        Object containing the reported annual incomes, deductions, and final
        balances of the tax payer.
      type: object
      required:
        - gross_income
        - non_taxable_income
        - net_income
        - annual_totals
      properties:
        gross_income:
          $ref: '#/components/schemas/GrossIncomeIndividual'
        non_taxable_income:
          $ref: '#/components/schemas/NonTaxableIncomeIndividual'
        net_income:
          $ref: '#/components/schemas/NetIncomeIndividual'
        annual_totals:
          $ref: '#/components/schemas/AnnualTotalsIndividual'
    PensionIncomeStatementIndividual:
      description: Object containing the tax payer's total pension income.
      type: object
      required:
        - net_pension_income
        - net_taxable_pension_income
      properties:
        net_pension_income:
          description: The total net pension of the taxpayer.
          type: number
          format: float
          example: 0
        net_taxable_pension_income:
          description: The total taxable pension income of the taxpayer.
          type: number
          format: float
          example: 0
    TaxAssessmentIndividual:
      description: >-
        Object containing the calculated tax assessment of the tax payer. This
        includes the total taxable income, the income tax applied, and taxes
        already withheld.
      type: object
      required:
        - fortuitous_profit_tax
        - total_tax_on_taxable_net_income
        - net_income_tax
        - total_tax_due
        - previous_year_balance
        - total_withheld_tax
        - balance_payable
        - balance_refundable
        - total_payment
      properties:
        fortuitous_profit_tax:
          description: >-
            The tax applied on your unexpected income (such as lottery wins or
            house sales).
          type: number
          format: float
          example: 0
        total_tax_on_taxable_net_income:
          description: >-
            The calculated total tax that can be applied on the tax payer's
            taxable income (total income - exemptions - deductions).
          type: number
          format: float
          example: 9144000
        net_income_tax:
          description: >-
            After additional deductions that you can apply, this will be the net
            income tax. If not further deduction are identified, this value will
            be the same as `total_tax_on_taxable_net_income`.
          type: number
          format: float
          example: 9144000
        total_tax_due:
          description: >-
            After further deductions, this is the final calculated tax that the
            taxpayer is required to pay.
          type: number
          format: float
          example: 9144000
        previous_year_balance:
          description: >
            Only applicable for DIAN.



            The amount the tax payer has as a "credit" fromt he previous year
            (this is equal to the `balance_refundable`) of the previous year.
          type: number
          format: float
          example: 1514000
        total_withheld_tax:
          description: The total tax already withheld in the current fiscal year.
          type: number
          format: float
          example: 7714000
        balance_payable:
          description: How much the tax payer is required to pay.
          type: number
          format: float
          example: 0
        balance_refundable:
          description: >-
            How much the tax payer is expected to receive. For DIAN, this will
            count as credit for the next fiscal year (see
            `previous_year_balance`).
          type: number
          format: float
          example: 84000
        total_payment:
          description: >-
            The total the tax payer is required to pay, taking into account
            deductions and fiscal credits.
          type: number
          format: float
          example: 0
    TaxDeclarationIndividual:
      title: Individual Tax Declaration
      type: object
      required:
        - id
        - link
        - collected_at
        - created_at
        - document_information
        - tax_payer_information
        - equity_statement
        - annual_income_statement
        - pension_income_statement
        - tax_assessment
        - date_issued
        - pdf
      properties:
        id:
          description: Belvo's unique ID for the current tax declaration.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        link:
          description: >-
            Belvo's unique ID of the user that this tax declaration is
            associated with.
          type: string
          format: uuid
          example: 8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2020-04-23T21:32:55.336854+00:00'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2020-04-23T21:30:20.336854+00:00'
        document_information:
          $ref: '#/components/schemas/DocumentInformationIndividual'
        tax_payer_information:
          $ref: '#/components/schemas/TaxPayerInformationIndividual'
        equity_statement:
          $ref: '#/components/schemas/EquityStatementIndividual'
        annual_income_statement:
          $ref: '#/components/schemas/AnnualIncomeStatementIndividual'
        pension_income_statement:
          $ref: '#/components/schemas/PensionIncomeStatementIndividual'
        tax_assessment:
          $ref: '#/components/schemas/TaxAssessmentIndividual'
        date_issued:
          description: The date the tax declaration was issued by the fiscal institution.
          type: string
          format: date
          example: '2022-09-02'
        pdf:
          description: The PDF of the tax declaration, as a binary string.
          type: string
          nullable: true
          example: '==BINARY-STRING=='
    TaxDeclarationIndividualPaginated:
      title: Tax Declaration Individual
      type: object
      additionalProperties: false
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of Individual Tax Declaration objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxDeclarationIndividual'
    DocumentInformationBusiness:
      description: Object containing detailed information about the fiscal document.
      type: object
      required:
        - name
        - type
        - form_number
        - year
      properties:
        name:
          description: The name of the tax document.
          type: string
          example: >-
            Declaracion de Renta y Complementario o de Ingresos y Patrimonio
            para Personas Juridicas y Asimiladas y Personas Naturales y
            Asimiladas no Residentes y Sucesiones Iliquidas de Causantes no
            Residentes
        type:
          description: >-
            The type of tax declaration form. For DIAN, this will be either
            `110` or `210`.
          type: string
          example: '110'
        form_number:
          description: The institution-provided identifier for the tax declaration.
          type: string
          example: '2117680087604'
        year:
          description: |
            The year of this tax declaration.
          type: integer
          nullable: true
          example: 2021
    DocumentIdBusiness:
      description: Object containing information about the ID document of the tax payer.
      type: object
      required:
        - document_type
        - document_number
      properties:
        document_type:
          description: The type of ID document.
          type: string
          example: NIT
        document_number:
          description: The number of the ID document.
          type: string
          example: '8312224477'
    TaxPayerInformationBusiness:
      description: Object containing information about the tax payer.
      type: object
      required:
        - first_last_name
        - second_last_name
        - first_name
        - other_names
        - company_name
        - main_economic_activity
        - document_id
        - reporting_id
      properties:
        first_last_name:
          description: The tax payer's first last name.
          type: string
          nullable: true
          example: Restrepo
        second_last_name:
          description: The tax payer's second last name.
          type: string
          nullable: true
          example: Vives
        first_name:
          description: The tax payer's first name.
          type: string
          nullable: true
          example: Carlos
        other_names:
          description: Additional names of the tax payer.
          type: string
          nullable: true
          example: Alberto
        company_name:
          description: The name of the company, as registered at the institution.
          type: string
          example: Trusty Spanners
        main_economic_activity:
          description: The main economic activity the tax payer is involved in.
          type: string
          example: '0032'
        document_id:
          $ref: '#/components/schemas/DocumentIdBusiness'
        reporting_id:
          $ref: '#/components/schemas/ReportingId'
    EquityStatementBusiness:
      description: Object containing the general fiscal situation of the taxpayer.
      type: object
      required:
        - cash_and_cash_equivalents
        - investments_and_derivative_financial_instruments
        - accounts_documents_and_finance_leases_receivable
        - inventory
        - property_plant_and_equipment_investment_properties
        - total_gross_equity
        - debts
        - total_net_equity
      properties:
        cash_and_cash_equivalents:
          description: >-
            Total cash (or cash equivalents) that the business currently holds
            at the end of the fiscal year.
          type: number
          format: float
          example: 4648000
        investments_and_derivative_financial_instruments:
          description: >-
            Total value of all investments, stocks, or similar, that the company
            has.
          type: number
          format: float
          example: 77626000
        accounts_documents_and_finance_leases_receivable:
          description: >-
            Total of all payments the company expects to receive (for example,
            from partial invoices that have not been paid yet).
          type: number
          format: float
          example: 0
        inventory:
          description: Total financial value of the company's sellable inventory.
          type: number
          format: float
          example: 0
        property_plant_and_equipment_investment_properties:
          description: >-
            Total value of real estate, plant infrastructure, or equipment that
            has been purchased.
          type: number
          format: float
          example: 0
        total_gross_equity:
          description: Total gross equity.
          type: number
          format: float
          example: 220860000
        debts:
          description: Total debts that the company currently has.
          type: number
          format: float
          example: 207030000
        total_net_equity:
          description: >-
            The total net equity of the company (`total_gross_equity` -
            `debts`).
          type: number
          format: float
          example: 13830000
    AnnualIncomeStatementBusiness:
      description: >-
        Object containing the reported annual incomes, deductions, and final
        balances of the tax payer.
      type: object
      required:
        - gross_income_from_ordinary_activities
        - dividends
        - other_income
        - total_gross_income
        - returns_rebates_and_discounts_on_sales
        - total_net_income
      properties:
        gross_income_from_ordinary_activities:
          description: >-
            Total gross income that the company generated from their main
            economic activity.
          type: number
          format: float
          example: 210043000
        dividends:
          description: Total income that the company generated from dividends.
          type: number
          format: float
          example: 0
        other_income:
          description: >-
            Total income that the company generated from activities not
            associated with their main economic activity.
          type: number
          format: float
          example: 0
        total_gross_income:
          description: Total gross income the company generated.
          type: number
          format: float
          example: 210043000
        returns_rebates_and_discounts_on_sales:
          description: >-
            Total value of cancelled orders, corrected invoices, or similar,
            that can be discounted from the `total_gross_income`.
          type: number
          format: float
          example: 0
        total_net_income:
          description: >-
            Total net income of the company, taking into account
            `returns_rebates_and_discounts_on_sales`.
          type: number
          format: float
          example: 210043000
    AnnualCostsAndDeductionsStatementBusiness:
      description: Object containing the reported annual costs and applicable deductions.
      type: object
      required:
        - costs
        - administration_expenses
        - distribution_and_sales_expenses
        - financial_expenses
        - total_costs_and_deductible_expenses
      properties:
        costs:
          description: Total costs for the company to operate.
          type: number
          format: float
          example: 1881843000
        administration_expenses:
          description: >-
            Total costs of the company related to training, company offsites, or
            similar.
          type: number
          format: float
          example: 3266000
        distribution_and_sales_expenses:
          description: >-
            Total costs the company incurred in order to distribute or sell
            their product.
          type: number
          format: float
          example: 0
        financial_expenses:
          description: >-
            Total value of any fees incurred by the company to operate (such as
            bank fees).
          type: number
          format: float
          example: 0
        total_costs_and_deductible_expenses:
          description: Total value of all costs and dedictible expenses.
          type: number
          format: float
          example: 191449000
    TaxAssessmentBusiness:
      description: >-
        Object containing the calculated tax assessment of the tax payer. This
        includes the total taxable income, the income tax applied, and taxes
        already withheld.
      type: object
      required:
        - net_income_taxable
        - fortuitous_profit_tax
        - total_tax_on_taxable_net_income
        - net_income_tax
        - total_tax_due
        - total_withholdings_for_the_taxable_year_to_be_declared
        - total_withheld_tax
        - total_balance_payable
        - total_balance_in_favor
        - total_payment
      properties:
        net_income_taxable:
          description: The net income on which tax can be applied.
          type: number
          format: float
          example: 18594000
        fortuitous_profit_tax:
          description: >-
            The tax applied on your unexpected income (such as lottery wins or
            house sales).
          type: number
          format: float
          example: 0
        total_tax_on_taxable_net_income:
          description: >-
            The calculated total tax that can be applied on the tax payer's
            taxable income (total income - exemptions - deductions).
          type: number
          format: float
          example: 5764000
        net_income_tax:
          description: >-
            After additional deductions that you can apply, this will be the net
            income tax. If no further deduction are identified, this value will
            be the same as `total_tax_on_taxable_net_income`.
          type: number
          format: float
          example: 5764000
        total_tax_due:
          description: >-
            After further deductions, this is the final calculated tax that the
            taxpayer is required to pay.
          type: number
          format: float
          example: 5764000
        total_withholdings_for_the_taxable_year_to_be_declared:
          description: How much the tax payer has already paid througout the fiscal year.
          type: number
          format: float
          example: 7361000
        total_balance_payable:
          description: How much the tax payer is required to pay.
          type: number
          format: float
          example: 0
        total_balance_in_favor:
          description: How much the tax payer is expected to receive.
          type: number
          format: float
          example: 1889000
        total_payment:
          description: >-
            The total the tax payer is required to pay, taking into account
            deductions and fiscal credits.
          type: number
          format: float
          example: 0
    TaxDeclarationBusiness:
      title: Business Tax Declaration
      type: object
      required:
        - id
        - link
        - collected_at
        - created_at
        - document_information
        - tax_payer_information
        - equity_statement
        - annual_income_statement
        - annual_costs_and_deductions_statement
        - tax_assessment
        - date_issued
        - pdf
      properties:
        id:
          description: Belvo's unique ID for the current tax declaration.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        link:
          description: >-
            Belvo's unique ID of the user that this tax declaration is
            associated with.
          type: string
          format: uuid
          example: 8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2020-04-23T21:32:55.336854+00:00'
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2020-04-23T21:30:20.336854+00:00'
        document_information:
          $ref: '#/components/schemas/DocumentInformationBusiness'
        tax_payer_information:
          $ref: '#/components/schemas/TaxPayerInformationBusiness'
        equity_statement:
          $ref: '#/components/schemas/EquityStatementBusiness'
        annual_income_statement:
          $ref: '#/components/schemas/AnnualIncomeStatementBusiness'
        annual_costs_and_deductions_statement:
          $ref: '#/components/schemas/AnnualCostsAndDeductionsStatementBusiness'
        tax_assessment:
          $ref: '#/components/schemas/TaxAssessmentBusiness'
        date_issued:
          description: The date the tax declaration was issued by the fiscal institution.
          type: string
          format: date
          example: '2022-09-02'
        pdf:
          description: The PDF of the tax declaration, as a binary string.
          type: string
          nullable: true
          example: '==BINARY-STRING=='
    TaxDeclarationBusinessPaginated:
      title: Tax Declaration Business
      type: object
      additionalProperties: false
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of Business Tax Declaration objects.
          type: array
          items:
            $ref: '#/components/schemas/TaxDeclarationBusiness'
    TaxDeclarationsRequest:
      title: Tax Declarations
      description: Request body for tax declrarations
      type: object
      required:
        - link
        - type
        - year_to
        - year_from
      properties:
        link:
          description: >-
            The fiscal `link.id` you want specific tax declaration information
            for.
          type: string
          format: uuid
          example: d4617561-1c01-4b2f-83b6-a594f7b3bc57
        year_from:
          description: >
            The starting year you want to get tax declaration for, in `YYYY`
            format.
          type: string
          example: '2018'
        year_to:
          description: >
            The year you want to stop getting tax declaration for, in `YYYY`
            format.
          type: string
          example: '2019'
        attach_pdf:
          description: >-
            When this is set to `true`, you will receive the PDF as a binary
            string in the response.
          type: boolean
          default: false
          example: false
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
          example: true
    EnumEmploymentRecordStatus:
      description: >
        Indicates whether or not the individual is currently `EMPLOYED` or
        `UNEMPLOYED`.
      type: string
      nullable: true
      enum:
        - EMPLOYED
        - UNEMPLOYED
      example: EMPLOYED
    EmploymentRecordEntitlement:
      description: Details regarding the benefits the individual is entitled to.
      type: object
      properties:
        entitled_to_health_insurance:
          description: >
            Indicated whether or not the individual is entitled to health
            insurance.
          type: boolean
          example: true
        entitled_to_company_benefits:
          description: >
            Indicates whether or not the individual is entitled to company
            benefits.
          type: boolean
          example: true
        valid_until:
          description: >
            Date until when the individual is covered by health insurance and/or
            company benefits. If `null` the employee is currently working and no
            end date is required.
          type: string
          format: date
          nullable: true
          example: null
        status:
          $ref: '#/components/schemas/EnumEmploymentRecordStatus'
    EnumEmploymentRecordDocumentType:
      description: >
        The type of document related to the individual. We return one of the
        following values:

          - `NSS`
          - `CURP`
          
      type: string
      nullable: true
      enum:
        - NSS
        - CURP
      example: NSS
    EmploymentRecordDocumentId:
      description: Details regarding the individual's ID documents.
      type: object
      properties:
        document_type:
          $ref: '#/components/schemas/EnumEmploymentRecordDocumentType'
        document_number:
          description: |
            The ID document's number (as a string).
          type: string
          nullable: true
          example: '10277663582'
    EmploymentRecordPersonalData:
      description: Details regarding the personal information of the individual.
      type: object
      properties:
        official_name:
          description: |
            The legal name of the individual
          type: string
          nullable: true
          example: Bruce Banner del Torro
        first_name:
          description: |
            The first name of the individual.
          type: string
          nullable: true
          example: Bruce
        last_name:
          description: |
            The last name of the individual.
          type: string
          nullable: true
          example: Banner del Torro
        email:
          description: >
            The email address of the individual (as provided in the initial POST
            request).
          type: string
          nullable: true
          example: bruce.banner@avengers.com
        birth_date:
          description: |
            The date of the birth of the individual, in `YYYY-MM-DD` format.
          type: string
          format: date
          nullable: true
          example: '2022-02-09'
        entitlements:
          $ref: '#/components/schemas/EmploymentRecordEntitlement'
        document_ids:
          description: Details regarding the individual's ID documents.
          type: array
          items:
            $ref: '#/components/schemas/EmploymentRecordDocumentId'
    EmploymentRecordSocialSecuritySummary:
      description: Details regarding the individual's social security contributions.
      type: object
      properties:
        weeks_redeemed:
          description: |
            Number of weeks the individual needed to take out of their pension.
          type: integer
          nullable: true
          format: int32
          example: 0
        weeks_reinstated:
          description: >
            Number of weeks the individual has paid back into their pension
            (*AFORE*), after having redeemed them previously.
          type: integer
          nullable: true
          format: int32
          example: 0
        weeks_contributed:
          description: >
            Number of weeks the individual has contributed to their social
            security, based on the number of weeks the individual has worked
            according to IMSS.
          type: integer
          nullable: true
          format: int32
          example: 188
    EnumEmploymentRecordStatusUpdateEvents:
      description: >
        The event that caused the change in employment status or salary. We
        return one of the following values:
          
          - `DISMISSED_RESIGNED`
          - `SALARY_MODIFICATION`
          - `HIRED`
          - `VOLUNTARY_CONTRIBUTION`
          - `ABSENCE`
          - `SICK_LEAVE`
          
      type: string
      enum:
        - DISMISSED_RESIGNED
        - SALARY_MODIFICATION
        - HIRED
        - VOLUNTARY_CONTRIBUTION
        - ABSENCE
        - SICK_LEAVE
      example: HIRED
    EmploymentRecordEmploymentStatusUpdates:
      description: Details regarding any employment changes of the individual.
      type: object
      properties:
        event:
          $ref: '#/components/schemas/EnumEmploymentRecordStatusUpdateEvents'
        base_salary:
          description: |
            The base salary of the individual, current as of the `update_date`.
          type: number
          format: float
          example: 1033.09
        update_date:
          description: |
            The date that the employment event occured, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2021-09-01'
    EmploymentRecordDetail:
      description: Details regarding the individual's employment history.
      type: object
      properties:
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2020-04-23T21:32:55.336854+00:00'
        employer:
          description: |
            The official name of the employer.
          type: string
          example: Batman Enterprises CDMX
        employer_id:
          description: |
            The official ID of the employer, according to the country.
          type: string
          example: 780-BAT-88769-CDMX
        start_date:
          description: |
            Date when employment started, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2019-10-10'
        end_date:
          description: |
            Date when employment finished, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2019-12-31'
        weeks_employed:
          description: |
            Number of weeks that the individual was employed.
          type: integer
          format: int32
          example: 12
        state:
          description: >
            In what geographical state the individual was employed, according to
            the country.
          type: string
          example: DISTRITO FEDERAL
        most_recent_base_salary:
          description: >
            The most recent base salary the individual earned.


            For Mexico, this is the *daily* rate that the individual earned,
            including the perks that the individual is entitled to throughout
            the year.
          type: number
          format: float
          example: 762.54
        monthly_salary:
          description: >
            The monthly salary of the individual, including any additional
            perks.
          type: number
          format: float
        currency:
          description: |
            The three-letter currency code in which the salary is paid.
          type: string
          example: MXN
        employment_status_updates:
          description: Details regarding any employment changes of the individual.
          type: array
          items:
            $ref: '#/components/schemas/EmploymentRecordEmploymentStatusUpdates'
    EmploymentRecordFile:
      description: Additional PDF binary files relating to the individual's employment.
      type: object
      properties:
        type:
          description: |
            The title of the document.
          type: string
          example: ReporteSemanasCotizadas_190123
        value:
          description: |
            The PDF binary of the file (as a string).
          type: string
          example: '=PDF_BINARY='
    EmploymentRecord:
      description: Emploment record response payload
      type: object
      properties:
        id:
          description: >-
            The unique identifier created by Belvo for the current IMSS
            statement.
          type: string
          format: uuid
          example: fef05fc8-7357-4a4a-9d29-55038ea31a04
        link:
          description: The unique identifier created by Belvo for the current user.
          type: string
          format: uuid
          example: 27c1d5cf-e8fb-433a-a2f7-d246de199c01
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was initially created
            in Belvo's database.
          type: string
          format: date-time
          example: '2020-04-23T21:32:55.336854+00:00'
        collected_at:
          description: The ISO-8601 timestamp when the data point was collected.
          type: string
          format: date-time
          example: '2020-04-23T21:32:55.336854+00:00'
        report_date:
          description: >-
            The date when the employment record report was generated, in
            `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2023-01-19'
        internal_identification:
          description: >-
            Unique ID for user according to the institution. For IMSS Mexico,
            this is the CURP.
          type: string
          example: BLPM951331IONVGR54
        personal_data:
          $ref: '#/components/schemas/EmploymentRecordPersonalData'
        social_security_summary:
          $ref: '#/components/schemas/EmploymentRecordSocialSecuritySummary'
        employment_records:
          description: Details regarding the individual's employment history.
          type: array
          items:
            $ref: '#/components/schemas/EmploymentRecordDetail'
        files:
          description: Additional PDF binary files relating to the individual's employment.
          type: array
          items:
            $ref: '#/components/schemas/EmploymentRecordFile'
    EmploymentRecordsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `accounts` or
            `owners`).
          type: string
          nullable: true
          example: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of employment record objects.
          type: array
          items:
            $ref: '#/components/schemas/EmploymentRecord'
    EmploymentRecordRequest:
      type: object
      required:
        - link
      properties:
        link:
          description: The `link.id` you want to retrieve employment records for.
          type: string
          format: uuid
          example: d686c617-6d9e-4bc6-9801-5ac276ccb6a2
        attach_pdf:
          description: >-
            When set to `true`, you will receive the PDF in binary format in the
            response.
          type: boolean
          default: false
        save_data:
          description: >-
            Indicates whether or not to persist the data in Belvo. By default,
            this is set to `true` and we return a 201 Created response.

            When set to `false`, the data won't be persisted and we return a 200
            OK response.
          type: boolean
          default: true
    EnumIncomeVerificationAccountHolderType:
      description: |-
        The type of account holder. Can be:

          - `INDIVIDUAL`
      type: string
      enum:
        - INDIVIDUAL
      example: INDIVIDUAL
    EnumIncomeVerificationAccountCategory:
      description: |-
        The type of account.
        Can be either:
          - `CHECKING_ACCOUNT`
          - `SAVINGS_ACCOUNT`
      type: string
      enum:
        - CHECKING_ACCOUNT
        - SAVINGS_ACCOUNT
      example: CHECKING_ACCOUNT
    EnumIncomeVerificationType:
      description: |
        The direction of the transaction:
          
        - `INFLOW` indicates money coming into the account.
      type: string
      nullable: true
      enum:
        - INFLOW
      example: INFLOW
    EyodIncomeVerificationBodyRequest:
      type: object
      required:
        - transaction_id
        - account_holder_type
        - account_holder_id
        - account_id
        - account_category
        - value_date
        - description
        - type
        - amount
        - currency
        - institution
      properties:
        description:
          description: The description of the income.
          type: string
          example: SAL√ÅRIO MENSAL
        transaction_id:
          description: Your unique ID for the income.
          type: string
          example: 3CWE4927CF15355
        account_holder_type:
          $ref: '#/components/schemas/EnumIncomeVerificationAccountHolderType'
        account_holder_id:
          description: Your unique ID for the account holder, in UUID format.
          type: string
          format: uuid
          example: a61bc801-9fa5-457b-88ad-850c96eaca30
        account_id:
          description: Your unique ID for the account where the transaction occurred.
          type: string
          example: EBACA-89077589
        account_category:
          $ref: '#/components/schemas/EnumIncomeVerificationAccountCategory'
        value_date:
          description: >-
            The date when the income transaction occurred, in `YYYY-MM-DD`
            format.
          type: string
          format: date
          example: '2022-11-18'
        type:
          $ref: '#/components/schemas/EnumIncomeVerificationType'
        amount:
          description: The income amount.
          type: number
          format: float
          example: 650.89
        currency:
          description: |-
            The three-letter currency code of the income. For example:

              ‚Ä¢ üáßüá∑ BRL (Brazilian Real)
              ‚Ä¢ üá®üá¥ COP (Colombian Peso)
              ‚Ä¢ üá≤üáΩ MXN (Mexican Peso)
              
          type: string
          example: BRL
        institution:
          description: >-
            The institution where the account is registered.


            >**Note:** This is the name that you use in your system to identify
            an institution.
          type: string
          example: Erebor Brazil
    EyodIncomeVerificationRequest:
      type: object
      required:
        - language
        - transactions
      properties:
        language:
          description: Two-letter ISO 639-1 code for the language of the transaction.
          type: string
          example: pt
        transactions:
          description: >-
            An array of transaction objects that you want enriched.


            **Note:** Each object corresponds to one, unique transaction and you
            can send through up to 10,000 transactions per request.
          type: array
          items:
            $ref: '#/components/schemas/EyodIncomeVerificationBodyRequest'
        date_from:
          description: >-
            The date from which you want to start getting incomes for, in
            `YYYY-MM-DD` format, within the last 365 days. When you use this
            parameter, you must also send `date_to`.


            ‚ö†Ô∏è The value of `date_from` cannot be greater than `date_to`.
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2022-08-01'
        date_to:
          description: >-
            The date you want to stop getting incomes for, in `YYYY-MM-DD`
            format, within the last 365 days. When you use this parameter, you
            must also send `date_from`.


            ‚ö†Ô∏è The value of `date_to` cannot be greater than today's date (in
            other words, no future dates).
          type: string
          pattern: '[0-9]{4}-[0-9]{2}-[0-9]{2}'
          example: '2022-12-30'
        allowed_income_types:
          type: array
          items:
            $ref: '#/components/schemas/EnumInvoiceAllowedIncomeTypesRequest'
        minimum_confidence_level:
          $ref: '#/components/schemas/EnumIncomeMinimumConfidenceLevelRequest'
    AccessToResourceDenied:
      title: Access to Belvo API denied
      description: >-
        This error occurs when you try to access Belvo's resource without the
        correct permissions.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`access_to_resource_denied`) that allows you to
            classify and handle the error programmatically.


            ‚ÑπÔ∏è Check our DevPortal for more information on how to handle <a
            href="https://developers.belvo.com/docs/belvo-api-errors#403-access_to_resource_denied"
            target="_blank">403 access_to_resource_denied</a>.
          type: string
          example: access_to_resource_denied
        message:
          description: |-
            A short description of the error. 

            For `access_to_resource_denied` errors, the description is:
              
              - `You don't have access to this resource.`.
          type: string
          example: You don't have access to this resource.
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    EnumCategorizationAccountHolderType:
      description: |-
        The type of account holder.
        Can be either:

          - `INDIVIDUAL`
          - `BUSINESS`
      type: string
      enum:
        - INDIVIDUAL
        - BUSINESS
      example: INDIVIDUAL
    EnumCategorizationAccountCategory:
      description: |-
        The type of account.
        Can be either:
          - `CHECKING_ACCOUNT`
          - `CREDIT_CARD`
          - `LOAN_ACCOUNT`
          - `SAVINGS_ACCOUNT`
      type: string
      enum:
        - CHECKING_ACCOUNT
        - CREDIT_CARD
        - LOAN_ACCOUNT
        - SAVINGS_ACCOUNT
      example: CREDIT_CARD
    EnumCategorizationTransactionType:
      description: |-
        The direction of the transaction.
        Can be either:

          - `INFLOW` indicates a received transaction.
          - `OUTFLOW` indicates a sent transaction.
      type: string
      enum:
        - INFLOW
        - OUTFLOW
      example: OUTFLOW
    CategorizationBodyRequest:
      type: object
      required:
        - transaction_id
        - account_holder_type
        - account_holder_id
        - account_id
        - account_category
        - value_date
        - description
        - type
        - amount
        - currency
        - institution
      properties:
        description:
          description: The description of the transaction.
          type: string
          example: APPL3STORE
        transaction_id:
          description: Your unique ID for the transaction.
          type: string
          example: 3CWE4927CF15355
        account_holder_type:
          $ref: '#/components/schemas/EnumCategorizationAccountHolderType'
        account_holder_id:
          description: Your unique ID for the account holder.
          type: string
          example: '7890098789087'
        account_id:
          description: Your unique ID for the account where the transaction occurred.
          type: string
          example: BBVACA-89077589
        account_category:
          $ref: '#/components/schemas/EnumCategorizationAccountCategory'
        value_date:
          description: The date when the transaction occurred, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2022-11-18'
        type:
          $ref: '#/components/schemas/EnumCategorizationTransactionType'
        amount:
          description: The transaction amount.
          type: number
          format: float
          example: 650.89
        currency:
          description: >-
            The currency of the account, in ISO-4217 format. For example: - üáßüá∑
            BRL (Brazilian Real) - üá®üá¥ COP (Colombian Peso) - üá≤üáΩ MXN (Mexican
            Peso)
          type: string
          example: BRL
        institution:
          description: >-
            The institution where the account is registered.


            >**Note:** This is the name that you use in your system to identify
            an institution.
          type: string
          example: BBVA
        mcc:
          description: >-
            The four-digit ISO 18245 Merchant Category Code (MCC). Only required
            when `account_category` = `CREDIT_CARD`.
          type: integer
          format: int32
          nullable: true
          example: 2345
    CategorizationRequest:
      type: object
      required:
        - language
        - transactions
      properties:
        language:
          description: Two-letter ISO 639-1 code for the language of the transaction.
          type: string
          example: pt
        transactions:
          description: >-
            An array of transaction objects that you want categorized.


            **Note:** Each object corresponds to one, unique transaction and you
            can send through up to 10,000 transactions per request.
          type: array
          items:
            $ref: '#/components/schemas/CategorizationBodyRequest'
    EnumCategorizationTransactionCategory:
      description: >
        The name of the category to which this transaction belongs. For more
        info about this feature, check our [Transaction
        categorization](https://developers.belvo.com/docs/banking#categorizing-transactions)
        article. 


        We return one of the following enum values:

          - `Bills & Utilities`
          - `Credits & Loans`
          - `Deposits`
          - `Fees & Charges`
          - `Food & Groceries`
          - `Home & Life`
          - `Income & Payments`
          - `Insurance`
          - `Investments & Savings`
          - `Online Platforms & Leisure`
          - `Personal Shopping`
          - `Taxes`
          - `Transfers`
          - `Transport & Travel`
          - `Unknown`
          - `Withdrawal & ATM`
          - `null`
      type: string
      nullable: true
      enum:
        - Bills & Utilities
        - Credits & Loans
        - Deposits
        - Fees & Charges
        - Food & Groceries
        - Home & Life
        - Income & Payments
        - Insurance
        - Investments & Savings
        - Online Platforms & Leisure
        - Personal Shopping
        - Taxes
        - Transfers
        - Transport & Travel
        - Unknown
        - Withdrawal & ATM
        - null
      example: Income & Payments
    EnumCategorizationTransactionSubcategory:
      description: >-
        The transactions subcategory. For more info about this feature, check
        our [Transaction
        categorization](https://developers.belvo.com/docs/banking#categorizing-transactions)
        article. 


        We return one of the following enum values:

          - `Electricity & Energy`
          - `Rent`
          - `Telecommunications`
          - `Water`
          - `Auto`
          - `Credit Card`
          - `Instalment`
          - `Interest & Charges`
          - `Mortgage`
          - `Pay Advance`
          - `Personal`
          - `Adjustments`
          - `Bank Fees`
          - `Chargeback`
          - `Refund`
          - `Blocked Balances`
          - `Alimony`
          - `Alcohol & Tobacco`
          - `Bakery & Coffee`
          - `Bars & Nightclubs`
          - `Convenience Store`
          - `Delivery`
          - `Groceries`
          - `Restaurants`
          - `Education`
          - `Gyms & Fitness`
          - `Hair & Beauty`
          - `Health`
          - `Home Decor & Appliances`
          - `Laundry & Dry Cleaning`
          - `Pharmacies`
          - `Professional Services`
          - `Veterinary Services`
          - `Freelance`
          - `Interest`
          - `Retirement`
          - `Salary`
          - `Government`
          - `Home Insurance`
          - `Auto Insurance`
          - `Health & Life Insurance`
          - `Savings`
          - `Fixed income`
          - `Equity`
          - `Investment Funds`
          - `Derivatives`
          - `Cryptocurrencies`
          - `Apps, Software and Cloud Services`
          - `Events, Parks and Museums`
          - `Gambling`
          - `Gaming`
          - `Lottery`
          - `Movie & Audio`
          - `Books & News`
          - `Clothing & Accessories`
          - `Department Store`
          - `Electronics`
          - `E-commerce`
          - `Gifts`
          - `Office Supplies`
          - `Pet Supplies`
          - `Auto Tax & Fees`
          - `Donation`
          - `Government Fees`
          - `Income Tax`
          - `Real Estate Tax & Fees`
          - `Tax Return`
          - `Accommodation`
          - `Auto Expenses`
          - `Auto Rental`
          - `Flights`
          - `Gas`
          - `Mileage Programs`
          - `Parking & Tolls`
          - `Public Transit`
          - `Taxis & Rideshares`
          - `Other`
          - `null`
      type: string
      nullable: true
      enum:
        - Electricity & Energy
        - Rent
        - Telecommunications
        - Water
        - Auto
        - Credit Card
        - Instalment
        - Interest & Charges
        - Mortgage
        - Pay Advance
        - Personal
        - Adjustments
        - Bank Fees
        - Chargeback
        - Refund
        - Blocked Balances
        - Alimony
        - Alcohol & Tobacco
        - Bakery & Coffee
        - Bars & Nightclubs
        - Convenience Store
        - Delivery
        - Groceries
        - Restaurants
        - Education
        - Gyms & Fitness
        - Hair & Beauty
        - Health
        - Home Decor & Appliances
        - Laundry & Dry Cleaning
        - Pharmacies
        - Professional Services
        - Veterinary Services
        - Freelance
        - Interest
        - Retirement
        - Salary
        - Government
        - Home Insurance
        - Auto Insurance
        - Health & Life Insurance
        - Savings
        - Fixed income
        - Equity
        - Investment Funds
        - Derivatives
        - Cryptocurrencies
        - Apps, Software and Cloud Services
        - Events, Parks and Museums
        - Gambling
        - Gaming
        - Lottery
        - Movie & Audio
        - Books & News
        - Clothing & Accessories
        - Department Store
        - Electronics
        - E-commerce
        - Gifts
        - Office Supplies
        - Pet Supplies
        - Auto Tax & Fees
        - Donation
        - Government Fees
        - Income Tax
        - Real Estate Tax & Fees
        - Tax Return
        - Accommodation
        - Auto Expenses
        - Auto Rental
        - Flights
        - Gas
        - Mileage Programs
        - Parking & Tolls
        - Public Transit
        - Taxis & Rideshares
        - Other
        - null
      example: Freelance
    CategorizationMerchantData:
      description: |
        Additional data regarding the merchant involved in the transaction.
      type: object
      nullable: true
      properties:
        logo:
          description: The URL to the merchant's logo.
          type: string
          nullable: true
          example: >-
            https://www.apple.com/ac/structured-data/images/open_graph_logo.png?202110180743
        website:
          description: The URL to the merchant's website.
          type: string
          nullable: true
          example: https://www.apple.com/br/
        merchant_name:
          description: The name of the merchant.
          type: string
          example: Apple, Inc
    CategorizationBody:
      type: object
      required:
        - transaction_id
        - account_holder_type
        - account_holder_id
        - account_id
        - account_category
        - value_date
        - description
        - type
        - amount
        - currency
        - institution
        - category
        - merchant
      properties:
        description:
          description: The description of the transaction.
          type: string
          example: APPL3STORE
        transaction_id:
          description: The unique ID for the transaction in your system.
          type: string
          example: 3CWE4927CF15355
        account_holder_type:
          $ref: '#/components/schemas/EnumCategorizationAccountHolderType'
        account_holder_id:
          description: The unique ID for the account holder in your system.
          type: string
          example: '7890098789087'
        account_id:
          description: >-
            The unique ID for the account where the transaction occurred in your
            system.
          type: string
          example: BBVACA-89077589
        account_category:
          $ref: '#/components/schemas/EnumCategorizationAccountCategory'
        value_date:
          description: The date when the transaction occurred, in `YYYY-MM-DD` format.
          type: string
          format: date
          example: '2022-11-18'
        type:
          $ref: '#/components/schemas/EnumCategorizationTransactionType'
        amount:
          description: The transaction amount.
          type: number
          format: float
          example: 650.89
        currency:
          description: |-
            The currency of the account, in ISO-4217 format. For example:
            - üáßüá∑ BRL (Brazilian Real)
            - üá®üá¥ COP (Colombian Peso)
            - üá≤üáΩ MXN (Mexican Peso)
          type: string
          example: BRL
        institution:
          description: >-
            The institution where the account is registered.


            >**Note:** This is the name that you use in your system to identify
            an institution.
             
          type: string
          example: BBVA
        mcc:
          description: >-
            The four-digit ISO 18245 Merchant Category Code (MCC). We only
            return this value when `account_type` = `CREDIT_CARD`.
          type: integer
          format: int32
          nullable: true
          example: 2345
        category:
          $ref: '#/components/schemas/EnumCategorizationTransactionCategory'
        subcategory:
          $ref: '#/components/schemas/EnumCategorizationTransactionSubcategory'
        merchant:
          $ref: '#/components/schemas/CategorizationMerchantData'
    Categorization:
      type: object
      properties:
        transactions:
          description: An array of enriched transaction objects.
          type: array
          items:
            $ref: '#/components/schemas/CategorizationBody'
    SecretKeys:
      type: object
      properties:
        id:
          description: Belvo's unique ID for the Payments API `secretId`.
          type: string
          format: uuid
          example: fc6694b5-ced2-47db-8d14-f15c9e942f31
    SecretKeysPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `customer` or
            `bank-accounts`).
          type: string
          nullable: true
          example: https://api.belvo.com/payments/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of secret keys objects.
          type: array
          items:
            $ref: '#/components/schemas/SecretKeys'
    401UnauthorizedError:
      title: Unauthorized Error
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: object
      properties:
        code:
          description: >-
            A unique error code (`authentication_failed`) that allows you to
            classify and handle the error programmatically.
          type: string
          example: authentication_failed
        message:
          description: |-
            A short description of the error.

            For `authentication_failed` errors, the description is:

              - `Invalid Secret Keys`.
          type: string
          example: Invalid Secret Keys
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    Payments_RequestApiKeysResponse:
      type: object
      properties:
        id:
          description: Your Payments API `secretId`.
          type: string
          format: uuid
          example: fc6694b5-ced2-47db-8d14-f15c9e942f31
        password:
          description: Your Payments API `secretPassword`.
          type: string
          example: dXmAbnv3rctO1nsArecveypt0e30ZVe4x7ysJQnZCrXT04oiaOtjEye4CXlsuLVa
    400ValidationError:
      title: Validation Error
      description: >-
        This error occurs when the parameters provided did not match the
        expected fields or the item you are trying to create is already in our
        database, leading to a field validation errors.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`null`, `does_not_exist`, `required`,
            `already_registered`) that allows you to classify and handle the
            error programmatically.
          type: string
          example: required
        message:
          description: |-
            A short description of the error.

            For `session_expired` errors, the description can be (among others):

              - `This field is required.`
              - `Object with name=narnia does not exist.`
              - `This field may not be null.`
              - `This field may not be blank.`
              - `This customer is already registered`
          type: string
          example: This field is required.
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
        field:
          description: Name of the field where the error was encountered.
          type: string
          nullable: true
          example: institution
    408RequestTimeoutError:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`request_timeout`) that allows you to classify
            and handle the error programmatically.
          type: string
          example: request_timeout
        message:
          description: |-
            A short description of the error.

            For `request_timeout` errors, the description is:

              - `The request timed out, you can retry asking for less data by changing your query parameters`.
          type: string
          example: >-
            The request timed out, you can retry asking for less data by
            changing your query parameters
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    EnumPaymentsCountry:
      description: |
        The customer's country of residence.


        -  BRA (üáßüá∑ Brazil)
        -  COL (üá®üá¥ Colombia)
      type: string
      enum:
        - BRA
        - COL
      maxLength: 3
      example: COL
    InstitutionFormField:
      type: object
      properties:
        name:
          description: The username, password, or username type field.
          type: string
          example: username
        type:
          description: The input type for the form field. For example, string.
          type: string
          example: text
        label:
          description: |
            The label of the form field. For example:
            - Document
            - Clave
            - Token
          type: string
          example: Document
        validation:
          description: The type of input validation used for the field.
          type: string
          example: ^.{1,}$
        placeholder:
          description: The placeholder text in the form field.
          type: string
          example: Username
        validation_message:
          description: >-
            The message displayed when an invalid input is provided in the form
            field.
          type: string
          example: Invalid client number
        values:
          description: Array of additional form field values.
          type: array
          items:
            $ref: '#/components/schemas/InstitutionsFormFieldValues'
        length:
          description: Number of digits allowed when the type is `token`.
          type: integer
          example: 6
        optional:
          description: It indicates whether this form field is optional.
          type: boolean
          example: false
    paymentInstitution:
      type: object
      properties:
        id:
          description: Belvo's unique ID to reference the institution.
          type: string
          format: uuid
          example: bbaceead-7b96-46d8-9354-38dec9707004
        active:
          description: Indicates whether this institution is available for use or not.
          type: boolean
          example: true
        name:
          description: The name of the institution, as designated by Belvo.
          type: string
          example: wakanda_national
        display_name:
          description: The customer-facing name of the institution.
          type: string
          example: Wakanda National Bank
        website:
          description: The URL of the institution's website.
          type: string
          example: https://www.wakandanational.com
        logo:
          description: The URL of the institution's logo.
          type: string
          example: >-
            https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png
        icon_logo:
          description: The URL of the institution's icon logo.
          type: string
          example: >-
            https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png
        text_logo:
          description: The URL of the institution's text logo.
          type: string
          example: >-
            https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png
        primary_color:
          description: The primary color on the institution's website.
          type: string
          example: '#fdbc24'
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        form_fields:
          type: array
          items:
            $ref: '#/components/schemas/InstitutionFormField'
    PaymentsInstitutionsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `customer` or
            `bank-accounts`).
          type: string
          nullable: true
          example: https://belvo.com/payments/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of institution objects.
          type: array
          items:
            $ref: '#/components/schemas/paymentInstitution'
    404NotFoundError:
      title: Not Found
      type: object
      properties:
        code:
          description: >-
            A unique error code (`not_found`) that allows you to classify and
            handle the error programmatically.
          type: string
          example: not_found
        message:
          description: |-
            A short description of the error.

            For `not_found` errors, the description is:

              - `Not found`
          type: string
          example: Not found
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    EnumCustomerType:
      description: >
        The type of customer. Can be either:

          - `INDIVIDUAL`
          - `BUSINESS`
            

        **Notes:** For üá®üá¥ Colombia's PSE, you can only create customers of
        type `INDIVIDUAL`.
      type: string
      enum:
        - INDIVIDUAL
        - BUSINESS
      minLength: 8
      maxLength: 10
      example: INDIVIDUAL
    EnumCustomerIdentifierTypeOfpi:
      description: |
        The customer's ID document type.

        - üáßüá∑ Brazil options: `CPF` or `CNPJ`.
      type: string
      enum:
        - CPF
        - CNPJ
      maxLength: 64
      example: CPF
    CustomerOfpi:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - id
        - created_at
        - created_by
        - customer_type
        - name
        - country
        - email
        - identifier
        - identifier_type
      properties:
        id:
          description: Belvo's unique ID for the current customer.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the customer.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        customer_type:
          $ref: '#/components/schemas/EnumCustomerType'
        name:
          description: |
            The full name of the customer.
          type: string
          minLength: 5
          maxLength: 200
          example: Caetano Veloso
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        email:
          description: |
            The customer's email address.
          type: string
          example: caetano.veloso@musicabrazil.br
        identifier:
          description: |
            The document number of the customer's ID.
          type: string
          example: 00.000.000/0001-91
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypeOfpi'
        address:
          description: |
            The customers physical address.
          type: string
          nullable: true
          minLength: 5
          maxLength: 150
          example: Rua de Caetano Veloso 432, 70200 Brasilia
        phone:
          description: |
            The customer's phone number.
          type: string
          nullable: true
          example: 3210-9876
    EnumCustomerIdentifierTypePse:
      description: |
        The customer's ID document type.

        - üá®üá¥ Colombia options: `CC`, `PP`, `CE`, `TI`, or `NIT`.
      type: string
      enum:
        - CC
        - PP
        - CE
        - TI
        - NIT
      maxLength: 64
      example: CC
    CustomerPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - id
        - created_at
        - created_by
        - customer_type
        - name
        - country
        - email
        - identifier
        - identifier_type
      properties:
        id:
          description: Belvo's unique ID for the current customer.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the customer.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        customer_type:
          $ref: '#/components/schemas/EnumCustomerType'
        name:
          description: |
            The full name of the customer.
          type: string
          minLength: 5
          maxLength: 200
          example: Carlos Vives
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        email:
          description: |
            The customer's email address.
          type: string
          example: carlos.vives@musicacolombia.co
        identifier:
          description: |
            The document number of the customer's ID.
          type: string
          example: '1018760936'
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypePse'
        address:
          description: >
            The customers physical address.



            **Note:** Apart from the first two and last two characters, all the
            rest of the characters are masked.
          type: string
          nullable: true
          minLength: 5
          maxLength: 150
          example: Calle Carlos Vives 432, 80300 Bogota
        phone:
          description: >
            The customer's phone number.



            **Note:** Apart from the first two and last two characters, all the
            rest of the characters are masked.
          type: string
          nullable: true
          example: 3210-9876
    CustomerPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `customer` or
            `bank-accounts`).
          type: string
          nullable: true
          example: https://api.belvo.com/payments/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of customer objects.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/CustomerOfpi'
              - $ref: '#/components/schemas/CustomerPse'
    CreateCustomerOfpi:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - customer_type
        - name
        - country
        - email
        - identifier
        - identifier_type
      properties:
        customer_type:
          $ref: '#/components/schemas/EnumCustomerType'
        name:
          description: |
            The full name of the customer you want to create.
          type: string
          minLength: 5
          maxLength: 200
          example: Caetano Veloso
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        email:
          description: |
            The customer's email address.
          type: string
          example: caetano.veloso@musicabrazil.br
        identifier:
          description: |
            The document number of the customer's ID.
          type: string
          minLength: 1
          maxLength: 25
          example: '1018760936'
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypeOfpi'
        address:
          description: |
            The customer's physical address.
          type: string
          nullable: true
          example: Rua de Caetano Veloso 432, 70200 Brasilia
        phone:
          description: |
            The customer's phone number.
          type: string
          nullable: true
          example: 231.002.999-00
    CreateCustomerPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - customer_type
        - name
        - country
        - email
        - identifier
        - identifier_type
      properties:
        customer_type:
          $ref: '#/components/schemas/EnumCustomerType'
        name:
          description: |
            The full name of the customer you want to create.
          type: string
          minLength: 5
          maxLength: 200
          example: Carlos Vives
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        email:
          description: |
            The customer's email address.
          type: string
          example: carlos.vives@musicacolombia.co
        identifier:
          description: |
            The document number of the customer's ID.
          type: string
          minLength: 1
          maxLength: 25
          example: '1018760936'
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypePse'
        address:
          description: |
            The customer's physical address.
          type: string
          nullable: true
          example: Calle Carlos Vives 432, 80300 Bogota
        phone:
          description: |
            The customer's phone number.
          type: string
          nullable: true
          example: 3210-9876
    500UnexpectedError:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
      type: object
      properties:
        code:
          description: >-
            A unique error code (`unexpected_error`) that allows you to classify
            and handle the error programmatically.
          type: string
          example: unexpected_error
        message:
          description: |-
            A short description of the error.

            For `unexpected_error` errors, the description is:

              - `Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution`.
          type: string
          example: >-
            Belvo is unable to process the request due to an internal system
            issue or to an unsupported response from an institution
        request_id:
          description: >-
            A 32-character unique ID of the request (matching a regex pattern
            of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo
            support team to accelerate investigations.
          type: string
          pattern: '[a-f0-9]{32}'
          example: 9e7b283c6efa449c9c028a16b5c249fb
    EnumBankAccountPixAccountTypeOfpi:
      description: |-
        The type of bank account. Can be either:

          - `CHECKINGS`
          - `SAVINGS`
          - `SALARY`
      type: string
      enum:
        - CHECKINGS
        - SAVINGS
        - SALARY
      example: CHECKINGS
    BankAccountDetailsOfpi:
      title: OFPI (PIX Account Information)
      type: object
      required:
        - country
        - account_type
        - agency
        - number
      properties:
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        account_type:
          $ref: '#/components/schemas/EnumBankAccountPixAccountTypeOfpi'
        agency:
          description: >-
            The agency (branch number) of the institution where the account was
            created.
          type: string
          example: '0444'
        number:
          description: The bank account number.
          type: string
          example: 45722-0
    BankAccountDetailsOfpiPix:
      title: OFPI (PIX Keys)
      type: object
      required:
        - country
        - pix_key
      properties:
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        pix_key:
          description: The PIX key identifier of the bank account.
          type: string
          example: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
    EnumBankAccountHolderTypeOfpi:
      description: The type of bank account. Can be either `INDIVIDUAL` or `BUSINESS`.
      type: string
      enum:
        - INDIVIDUAL
        - BUSINESS
      example: BUSINESS
    HolderInformationBusinessOfpiResponse:
      title: BUSINESS
      type: object
      required:
        - name
        - identifier
        - identifier_type
      properties:
        name:
          description: The bank account holder's first name.
          type: string
          example: Caetano Veloso Entertainment Universe
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypeOfpi'
        identifier:
          description: The document number of the company's ID.
          type: string
          example: 231.002.999-00
    HolderInformationIndividualOfpiResponse:
      title: INDIVIDUAL
      type: object
      required:
        - first_name
        - last_name
        - identifier
        - identifier_type
      properties:
        first_name:
          description: The bank account holder's first name.
          type: string
          example: Dom
        last_name:
          description: The bank account holder's last name.
          type: string
          example: Mesa
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypeOfpi'
        identifier:
          description: The document number of the customer's ID.
          type: string
          example: 231.002.999-00
    HolderResponseOfpi:
      title: OFPI
      description: Details regarding the bank account holder.
      type: object
      required:
        - type
        - information
      properties:
        type:
          $ref: '#/components/schemas/EnumBankAccountHolderTypeOfpi'
        information:
          oneOf:
            - $ref: '#/components/schemas/HolderInformationBusinessOfpiResponse'
            - $ref: '#/components/schemas/HolderInformationIndividualOfpiResponse'
    BankAccountOfpiResponse:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - id
        - created_at
        - institution
        - created_by
        - holder
        - customer
        - details
      properties:
        id:
          description: Belvo's unique ID for the current bank account.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the bank account.
          type: string
          format: uuid
          example: 62053a72-e2d5-4c95-a578-6b16616900ac
        customer:
          description: |-
            Belvo's unique ID for the customer associated with the bank account.
            For `BUSINESS` bank accounts, this field is `null`.
          type: string
          format: uuid
          nullable: true
          example: null
        institution:
          description: >-
            Belvo's unique ID for the institution that the bank account is
            created in.

            For `BUSINESS` bank accounts that Belvo creates for organizations,
            this field is `null`.
          type: string
          format: uuid
          nullable: true
          example: null
        details:
          oneOf:
            - $ref: '#/components/schemas/BankAccountDetailsOfpi'
            - $ref: '#/components/schemas/BankAccountDetailsOfpiPix'
        holder:
          $ref: '#/components/schemas/HolderResponseOfpi'
    EnumBankAccountHolderTypePse:
      description: >-
        The type of bank account to create in Belvo. For business bank accounts,
        this field must the set to `BUSINESS`.
      type: string
      default: BUSINESS
      enum:
        - BUSINESS
      example: BUSINESS
    HolderInformationBusinessPseResponse:
      title: PSE
      type: object
      required:
        - name
      properties:
        name:
          description: >-
            The business name. This value is obfuscated.


            Note, this is only applicable if the `holder.type` is set to
            `BUSINESS`.
          type: string
          example: Tr******es
    HolderBusinessResponsePse:
      title: Business
      description: Details regarding the business bank account holder.
      type: object
      required:
        - type
        - information
      properties:
        type:
          $ref: '#/components/schemas/EnumBankAccountHolderTypePse'
        Information:
          $ref: '#/components/schemas/HolderInformationBusinessPseResponse'
    BankAccountBusinessPse:
      title: Business Bank Account
      type: object
      required:
        - id
        - created_at
        - created_by
        - number
        - customer
        - institution
        - holder
        - details
      properties:
        id:
          description: Belvo's unique ID for the current bank account.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was first created in
            Belvo's database.
          type: string
          format: date-time
          example: '2023-02-15T07:52:31.998761Z'
        created_by:
          description: Belvo's unique ID for the user that created the bank account.
          type: string
          format: uuid
          example: 62053a72-e2d5-4c95-a578-6b16616900ac
        customer:
          description: |-
            Belvo's unique ID for the customer associated with the bank account.
            For `BUSINESS` bank accounts, this field is `null`.
          type: string
          format: uuid
          nullable: true
          example: null
        institution:
          description: >-
            Belvo's unique ID for the institution that the bank account is
            created in.

            For `BUSINESS` bank accounts that Belvo creates for organizations,
            this field is `null`.
          type: string
          format: uuid
          nullable: true
          example: null
        number:
          description: >-
            The bank account number. For `BUSINESS` bank accounts that Belvo
            creates for organizations, this field is `null`.


            **Note:** Apart from the last four characters, all the rest of the
            characters are masked.
          type: string
          nullable: true
          example: null
        holder:
          $ref: '#/components/schemas/HolderBusinessResponsePse'
        details:
          description: For PSE, this field will return an empty object.
          type: object
        metadata:
          description: >-
            Optional and customizable object where you can provide any
            additional key-value pairs for your internal purposes. For example,
            an internal reference number for the payment intent.


            ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
            50 characters each and each value can be up to 500 characters). We
            do not support nested objects, only ASCII values.
          type: object
          example:
            internal_reference_id: GGq73487w2
    BankAccountPseResponse:
      title: Colombia üá®üá¥ PSE
      type: object
      oneOf:
        - $ref: '#/components/schemas/BankAccountBusinessPse'
    BankAccountPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `customer` or
            `bank-accounts`).
          type: string
          nullable: true
          example: https://api.belvo.com/payments/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of bank account objects.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/BankAccountOfpiResponse'
              - $ref: '#/components/schemas/BankAccountPseResponse'
    HolderInformationBusinessOfpi:
      title: BUSINESS
      description: >-
        Additional information about the bank account holder required in order
        to create the account for OFPI.
      type: object
      required:
        - name
        - identifier
        - identifier_type
      properties:
        name:
          description: The bank account holder's first name.
          type: string
          example: Caetano Veloso Entertainment Universe
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypeOfpi'
        identifier:
          description: The document number of the company's ID.
          type: string
          example: 231.002.999-00
    HolderInformationIndividualOfpi:
      title: INDIVIDUAL
      description: >-
        Additional information about the bank account holder required in order
        to create the account for OFPI.
      type: object
      required:
        - first_name
        - last_name
        - identifier
        - identifier_type
      properties:
        first_name:
          description: The bank account holder's first name.
          type: string
          example: Caetano
        last_name:
          description: The bank account holder's last name.
          type: string
          example: Veloso
        identifier_type:
          $ref: '#/components/schemas/EnumCustomerIdentifierTypeOfpi'
        identifier:
          description: The document number of the customer's ID.
          type: string
          example: 231.002.999-00
    BankAccountHolderRequestOfpi:
      title: OFPI
      description: Details regarding the business bank account holder.
      type: object
      required:
        - type
        - information
      properties:
        type:
          $ref: '#/components/schemas/EnumBankAccountHolderTypeOfpi'
        information:
          oneOf:
            - $ref: '#/components/schemas/HolderInformationBusinessOfpi'
            - $ref: '#/components/schemas/HolderInformationIndividualOfpi'
    CreateBankAccountOfpi:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - institution
        - holder
        - details
      properties:
        institution:
          description: >-
            Belvo's unique ID for the institution that the bank account is
            created in.
          type: string
          format: uuid
          example: f512d996-583a-4a91-8b5b-eba2e103b068
        holder:
          description: Information regarding the individual bank account holder.
          oneOf:
            - $ref: '#/components/schemas/BankAccountHolderRequestOfpi'
        details:
          description: Information regarding the bank account.
          oneOf:
            - $ref: '#/components/schemas/BankAccountDetailsOfpi'
            - $ref: '#/components/schemas/BankAccountDetailsOfpiPix'
    HolderInformationBusinessPse:
      title: PSE
      type: object
      required:
        - name
      properties:
        name:
          description: >-
            The business name.


            Note, this is only applicable if the `holder.type` is set to
            `BUSINESS`.
          type: string
          example: Trusty documentation services
    HolderBusinessPse:
      title: PSE
      description: Details regarding the business bank account holder.
      type: object
      required:
        - type
        - information
      properties:
        type:
          $ref: '#/components/schemas/EnumBankAccountHolderTypePse'
        information:
          $ref: '#/components/schemas/HolderInformationBusinessPse'
    PaymentsWay:
      title: Payments Way
      type: object
      required:
        - terminal_id
        - form_id
      properties:
        terminal_id:
          description: >-
            Your unique Payments Way terminal ID.


            **Note:** Belvo provides you with the Payments Way terminal ID
            during your onboarding process. If you don't have one yet, just
            reach out to us at payments-info@belvo.com and we'll give you a hand
            with this. üôÇ
          type: integer
          format: int32
          example: 123
        form_id:
          description: >-
            Your unique Payments Way form ID.


            **Note:** Belvo provides you with the Payments Way form ID during
            your onboarding process. If you don't have one yet, just reach out
            to us at payments-info@belvo.com and we'll give you a hand with
            this. üôÇ
          type: integer
          format: int32
          example: 321
    ProvidersPse:
      title: PSE
      type: object
      properties:
        payments_way:
          $ref: '#/components/schemas/PaymentsWay'
    CreateBankAccountPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - holder
        - providers
      properties:
        holder:
          description: Information regarding the business bank account holder.
          oneOf:
            - $ref: '#/components/schemas/HolderBusinessPse'
        providers:
          description: >-
            Information about the payment service provider, required in order to
            establish a connection and process requests. For PSE, the value must
            be `payments_way`.
          oneOf:
            - $ref: '#/components/schemas/ProvidersPse'
        metadata:
          description: >-
            Optional and customizable object where you can provide any
            additional key-value pairs for your internal purposes. For example,
            an internal reference number for the payment intent.


            ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
            50 characters each and each value can be up to 500 characters). We
            do not support nested objects, only ASCII values.
          type: object
          example:
            internal_reference_id: GGq73487w2
    PaymentLinkCallbackUrlsResponse:
      title: Payment Link Callback URLs
      description: >-
        The URLs that the user should be redirected to.


        **Note:** This field will return an empty object if your integration
        only generates payment links through the [Belvo
        Dashboard](https://dashboard.belvo.com/).
      type: object
      properties:
        cancel:
          description: >-
            The URL that the user should be redirected to if they decide to
            cancel the payment process or if an error occurs.
          type: string
          example: https://www.acmecorp.com/checkout/3487548/cancel
        success:
          description: >-
            The URL that the user should be redirected to when they complete the
            payment process successfully.
          type: string
          example: https://www.acmecorp.com/checkout/3487548/success
    EnumPaymentLinksStatus:
      description: >-
        The current status of the payment link. Can be either:

          - `ACTIVE` meaning that the payment intent's status is either `REQUIRES_PAYMENT_METHOD`, `REQUIRES_ACTION`, or `PROCESSING`.
          - `INACTIVE` meaning that the payment intent's status is either `SUCCEEDED` or `FAILED`.

        **Note:** You can retrieve the complete payment intent by using our [Get
        details of a payment
        link](https://developers.belvo.com/reference/detailcreatepaymentlink)
        request. 
      type: string
      enum:
        - ACTIVE
        - INACTIVE
      example: ACTIVE
    PaymentLinkListOfpi:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - id
        - created_at
        - created_by
        - payment_url
        - callback_urls
        - status
        - expires_in
        - expires_at
      properties:
        id:
          description: Belvo's unique ID for the current payment link.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the payment link.
          type: string
          format: uuid
          example: 62053a72-e2d5-4c95-a578-6b16616900ac
        payment_url:
          description: >-
            The URL for the hosted-widget that will guide your user through the
            payments process.
          type: string
          example: https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        access_token:
          description: >-
            The Belvo-generated access token for the payment link.


            **Note:** You'll need the `access_token` to make [Get details for a
            payment
            link](https://developers.belvo.com/reference/detailcreatepaymentlink)
            requests.
          type: string
          example: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        callback_urls:
          $ref: '#/components/schemas/PaymentLinkCallbackUrlsResponse'
        payment_intent:
          description: >-
            Belvo's unique ID for the payment intent. You can retrieve the
            complete payment intent by using our [Get details of a payment
            link](https://developers.belvo.com/reference/detailcreatepaymentlink)
            request.
          type: string
          format: uuid
          example: b7dd85b1-671e-45c7-aba6-b4b37a8fc0c2
        updated_at:
          description: |
            The ISO-8601 timestamp of when the payment link was last updated.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
        status:
          $ref: '#/components/schemas/EnumPaymentLinksStatus'
        expires_in:
          description: 'The payment link expiration time.  '
          type: string
          pattern: ‚Äò^(\\d+)([mhd])$‚Äô
          example: 7d
        expires_at:
          description: |
            The ISO-8601 timestamp of when the payment link is set to expire.
          type: string
          format: date-time
          example: '2023-02-09T08:45:50.406032Z'
    PaymentLinkListPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - id
        - created_at
        - created_by
        - payment_url
        - callback_urls
        - status
        - expires_in
        - expires_at
      properties:
        id:
          description: Belvo's unique ID for the current payment link.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the payment link.
          type: string
          format: uuid
          example: 62053a72-e2d5-4c95-a578-6b16616900ac
        payment_url:
          description: >-
            The URL for the hosted-widget that will guide your user through the
            payments process.
          type: string
          example: https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        access_token:
          description: >-
            The Belvo-generated access token for the payment link.


            **Note:** You'll need the `access_token` to make [Get details for a
            payment
            link](https://developers.belvo.com/reference/detailcreatepaymentlink)
            requests.
          type: string
          example: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        callback_urls:
          $ref: '#/components/schemas/PaymentLinkCallbackUrlsResponse'
        payment_intent:
          description: >-
            Belvo's unique ID for the payment intent. You can retrieve the
            complete payment intent by using our [Get details of a payment
            link](https://developers.belvo.com/reference/detailcreatepaymentlink)
            request.
          type: string
          format: uuid
          example: b7dd85b1-671e-45c7-aba6-b4b37a8fc0c2
        updated_at:
          description: |
            The ISO-8601 timestamp of when the payment link was last updated.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
        status:
          $ref: '#/components/schemas/EnumPaymentLinksStatus'
        expires_in:
          description: 'The payment link expiration time.  '
          type: string
          pattern: ‚Äò^(\\d+)([mhd])$‚Äô
          example: 7d
        expires_at:
          description: |
            The ISO-8601 timestamp of when the payment link is set to expire.
          type: string
          format: date-time
          example: '2023-02-09T08:45:50.406032Z'
    PaymentLinkPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `customer` or
            `bank-accounts`).
          type: string
          nullable: true
          example: https://api.belvo.com/payments/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of bank account objects.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PaymentLinkListOfpi'
              - $ref: '#/components/schemas/PaymentLinkListPse'
    EnumPaymentLinkAllowedPaymentMethod:
      description: |-
        Selected payment method type.

          - For üáßüá∑ Brazil's OFPI, the value must be `open_finance`.  
          - For üá®üá¥ Colombia's PSE, the value must be `pse`.
      type: string
      enum:
        - open_finance
        - pse
      example: open_finance
    EnumPaymentLinkProvider:
      description: |
        The provider used for the payment link. 


        - For üáßüá∑ Brazil's OFPI, the value must be `belvo`.  
        - For üá®üá¥ Colombia's PSE, the value must be `payments_way`.
      type: string
      enum:
        - belvo
        - payments_way
      example: belvo
    PaymentLinksPaymentMethodDetailsBodyOfpi:
      title: OFPB
      description: >-
        Details about the organization's bank account that will receive the
        payment.
      type: object
      required:
        - beneficiary_bank_account
      properties:
        beneficiary_bank_account:
          description: Belvo's unique ID used to identify the beneficiary's bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        callback_url:
          description: >-
            The URL to your application that your customer will be directed to
            once they confirm the payment in their bank application.
          type: string
          example: https://www.acmecorp.com/checkout/3487321
    PaymentMethodDetailsOfpi:
      title: OFPI
      description: >-
        Object with information required by Open Finance Payments in Brazil to
        create a payment intent.
      type: object
      required:
        - open_finance
      properties:
        open_finance:
          $ref: '#/components/schemas/PaymentLinksPaymentMethodDetailsBodyOfpi'
    PaymentLinkCallbackUrls:
      title: Payment Link Callback URLs
      type: object
      properties:
        cancel:
          description: >-
            The URL that the user should be redirected to if they decide to
            cancel the payment process or if an error occurs.


            **Note:** Not required if your integration only generates payment
            links through the [Belvo Dashboard](https://dashboard.belvo.com/).
          type: string
          example: https://www.acmecorp.com/checkout/3487548/cancel
        success:
          description: >-
            The URL that the user should be redirected to when they complete the
            payment process successfully.


            **Note:** Not required if your integration only generates payment
            links through the [Belvo Dashboard](https://dashboard.belvo.com/).
          type: string
          example: https://www.acmecorp.com/checkout/3487548/success
    CreatePaymentLinkOfpi:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - amount
        - customer
        - description
        - allowed_payment_method_types
        - provider
        - payment_method_details
      properties:
        description:
          description: |
            The description of the payment.
          type: string
          example: Shoe payment
        amount:
          description: >
            Amount to be paid by your customer. 



            For OFPI, you can send through numbers with up to two decimal
            points, separated by a `.` period. For example: `"2853.78"`
          type: string
          pattern: ^(?!0$)(?:0\.\d{1,2}|[1-9]\d{0,11})(?:\.\d{1,2})?$
          example: '2853.78'
        customer:
          description: |
            Belvo's unique ID to reference the customer.
          type: string
          example: 06dc2f14-1217-4480-9b36-550a944a39d1
        allowed_payment_method_types:
          description: >-
            A list of payment method types allowed in this payment intent. For
            OFPI, this value must be set to `open_finance`.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/EnumPaymentLinkAllowedPaymentMethod'
        provider:
          $ref: '#/components/schemas/EnumPaymentLinkProvider'
        payment_method_details:
          $ref: '#/components/schemas/PaymentMethodDetailsOfpi'
        callback_urls:
          $ref: '#/components/schemas/PaymentLinkCallbackUrls'
        expires_in:
          description: >-
            The payment link expiration time. It allows the following formats to
            be sent through:

              - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.
              - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.
              - whole number + `d` for x amount of days. For example: `30d` for 30 days.

              ‚ÑπÔ∏è The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).
          type: string
          pattern: ‚Äò^(\\d+)([mhd])$‚Äô
          default: 7d
          example: 7d
    PaymentLinksPaymentMethodDetailsBodyPse:
      title: PSE
      description: >-
        Details about the organization's bank account that will receive the
        payment.
      type: object
      required:
        - beneficiary_bank_account
        - belvo_flow
      properties:
        beneficiary_bank_account:
          description: Belvo's unique ID used to identify the beneficiary's bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        callback_url:
          description: >-
            The URL to your application that your customer will be directed to
            once they confirm the payment in their bank application.
          type: string
          example: https://www.acmecorp.com/checkout/3487321
        belvo_flow:
          description: >-
            This parameter determines the payment flow of the payment intent. By
            default, this is set to `true` and the payment intent created is
            processed using the Belvo's payment flow and Belvo-integrated
            institutions. When set to `false`, the payment intent process uses
            institutions not integrated into Belvo's flow.       
          type: boolean
          default: true
          example: true
    PaymentMethodDetailsPse:
      title: PSE
      description: Object with information required by PSE to create a payment intent.
      type: object
      required:
        - pse
      properties:
        pse:
          $ref: '#/components/schemas/PaymentLinksPaymentMethodDetailsBodyPse'
    CreatePaymentLinkPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - amount
        - customer
        - description
        - provider
        - payment_method_details
      properties:
        description:
          description: |
            The description of the payment.
          type: string
          example: Shoe payment
        amount:
          description: >
            Amount to be paid by your customer.



            For PSE, you can only send whole numbers (integers). For example:
            `"137"`
          type: string
          pattern: ^(?!0+$)\d{1,12}$
          example: '1452'
        customer:
          description: |
            Belvo's unique ID to reference the customer.
          type: string
          example: 06dc2f14-1217-4480-9b36-550a944a39d1
        allowed_payment_method_types:
          description: >-
            A list of payment method types allowed in this payment intent. For
            PSE, this value must be set to `pse`.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/EnumPaymentLinkAllowedPaymentMethod'
        provider:
          $ref: '#/components/schemas/EnumPaymentLinkProvider'
        payment_method_details:
          $ref: '#/components/schemas/PaymentMethodDetailsPse'
        callback_urls:
          $ref: '#/components/schemas/PaymentLinkCallbackUrls'
        expires_in:
          description: >-
            The payment link expiration time. It allows the following formats to
            be sent through:

              - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.
              - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.
              - whole number + `d` for x amount of days. For example: `30d` for 30 days.

              ‚ÑπÔ∏è The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).
          type: string
          pattern: ‚Äò^(\\d+)([mhd])$‚Äô
          default: 7d
          example: 7d
    EnumPaymentsCurrency:
      description: |-
        The currency of the amount paid.


          - üáßüá∑ BRL (Brazilian Real)
          - üá®üá¥ COP (Colombian Peso)
      type: string
      enum:
        - BRL
        - COP
      example: COP
    DisplayPaymentMethodInformationContentOfpi:
      title: Display Open Finance Brazil payment method information
      description: Object detailing what payment method information you need to display.
      type: object
      properties:
        institutions:
          description: An array of institution objects.
          type: array
          items:
            $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayPaymentMethodInformation:
      title: OFPI -  Display Payment Method Information
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - open_finance_display_payment_method_information
            - open_finance_display_confirmation_required
            - open_finance_display_needs_redirect
            - open_finance_display_payment_processing
            - open_finance_display_payment_succeeded
            - open_finance_display_payment_failed
          example: open_finance_display_payment_method_information
        open_finance_display_payment_method_information:
          $ref: '#/components/schemas/DisplayPaymentMethodInformationContentOfpi'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
          type: boolean
          default: false
          example: false
    NeedsRedirectContent:
      description: Details regarding the payer institution.
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepNeedsRedirect:
      title: OFPI - Needs Redirect
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: The type of `next_step` you need to follow.
          type: string
          enum:
            - open_finance_display_payment_method_information
            - open_finance_display_confirmation_required
            - open_finance_display_needs_redirect
            - open_finance_display_payment_processing
            - open_finance_display_payment_succeeded
            - open_finance_display_payment_failed
          example: open_finance_display_needs_redirect
        open_finance_display_needs_redirect:
          $ref: '#/components/schemas/NeedsRedirectContent'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
          type: boolean
          default: false
          example: false
    BankAccountDetailsOpenFinance:
      title: OFPI (PIX Account Information)
      type: object
      required:
        - country
        - account_type
        - agency
        - number
      properties:
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        account_type:
          $ref: '#/components/schemas/EnumBankAccountPixAccountTypeOfpi'
        agency:
          description: >-
            The agency (branch number) of the institution where the account was
            created.
          type: string
          example: '0444'
        number:
          description: The bank account number.
          type: string
          example: 45722-0
    BankAccountDetailsOpenFinancePix:
      title: OFPI (PIX Keys)
      type: object
      required:
        - country
        - pix_key
      properties:
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        pix_key:
          description: The PIX key identifier of the bank account.
          type: string
          example: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
    BeneficiaryBankAccountOfpi:
      title: Beneficiary Bank Account
      type: object
      required:
        - id
        - created_at
        - created_by
        - customer
        - institution
        - number
        - holder
      properties:
        id:
          description: Belvo's unique ID for the beneficiary bank account.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the bank account.
          type: string
          format: uuid
          example: 62053a72-e2d5-4c95-a578-6b16616900ac
        institution:
          $ref: '#/components/schemas/paymentInstitution'
        details:
          oneOf:
            - $ref: '#/components/schemas/BankAccountDetailsOpenFinance'
            - $ref: '#/components/schemas/BankAccountDetailsOpenFinancePix'
        holder:
          $ref: '#/components/schemas/HolderResponseOfpi'
    DisplayConfirmationRequiredOfpi:
      title: Display Open Finance Brazil confirmation required
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        beneficiary_bank_account:
          $ref: '#/components/schemas/BeneficiaryBankAccountOfpi'
        payer_name:
          description: The name of the payer.
          type: string
          example: Caetano Veloso
        payer_identifier:
          description: The payer's ID.
          type: string
          format: uuid
          example: LV890273900-23
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayConfirmationRequiredOfpi:
      title: OFPI - Display Confirmation Required
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - open_finance_display_payment_method_information
            - open_finance_display_confirmation_required
            - open_finance_display_needs_redirect
            - open_finance_display_payment_processing
            - open_finance_display_payment_succeeded
            - open_finance_display_payment_failed
          example: open_finance_display_confirmation_required
        open_finance_display_confirmation_required:
          $ref: '#/components/schemas/DisplayConfirmationRequiredOfpi'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
          type: boolean
          default: true
          example: true
    DisplayPaymentProcessing:
      description: Details regarding the payer institution.
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayPaymentProcessing:
      title: OFPI - Payment Processing
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - open_finance_display_payment_method_information
            - open_finance_display_confirmation_required
            - open_finance_display_needs_redirect
            - open_finance_display_payment_processing
            - open_finance_display_payment_succeeded
            - open_finance_display_payment_failed
          example: open_finance_display_payment_processing
        open_finance_display_payment_processing:
          $ref: '#/components/schemas/DisplayPaymentProcessing'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
          type: boolean
          default: false
          example: false
    DisplayPaymentSucceeded:
      description: Details regarding the payer institution.
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayPaymentSucceeded:
      title: OFPI - Payment Succeeded
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - open_finance_display_payment_method_information
            - open_finance_display_confirmation_required
            - open_finance_display_needs_redirect
            - open_finance_display_payment_processing
            - open_finance_display_payment_succeeded
            - open_finance_display_payment_failed
          example: open_finance_display_payment_succeeded
        open_finance_display_payment_succeeded:
          $ref: '#/components/schemas/DisplayPaymentSucceeded'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.
          type: boolean
          default: false
          example: false
    DisplayPaymentFailed:
      description: Details regarding the payer institution.
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayPaymentFailed:
      title: OFPI - Payment Failed
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - open_finance_display_payment_method_information
            - open_finance_display_confirmation_required
            - open_finance_display_needs_redirect
            - open_finance_display_payment_processing
            - open_finance_display_payment_succeeded
            - open_finance_display_payment_failed
          example: open_finance_display_payment_failed
        open_finance_display_payment_failed:
          $ref: '#/components/schemas/DisplayPaymentFailed'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When set to `true`,you need to confirm the payment by making a PATCH request sending through `confirm: true`.
          type: boolean
          default: false
          example: false
    LastErrorPaymentError:
      title: payment_error
      description: >-
        Information about the error you ran into in the previous step of the
        payment intent, if applicable. This error can occur when something
        unexpected happened during the payment intent process.
      type: object
      required:
        - error_code
        - error_message
      properties:
        error_code:
          description: >-
            A unique error code (`payment_error`) that allows you to classify
            and handle the error programmatically.
          type: string
          example: payment_error
        error_message:
          description: A short description of the error.
          type: string
          example: Unexpected error to confirm the payment
    PaymentIntentPaymentMethodDetailsBodyIndividualOfpi:
      description: Payment method type selected.
      type: object
      required:
        - beneficiary_bank_account
        - payer_institution
        - callback_url
      properties:
        beneficiary_bank_account:
          description: Belvo's unique ID used to identify the beneficiary's bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        payer_institution:
          description: Belvo's unique ID to reference the payer's institution.
          type: string
          format: uuid
          example: 600f1b4a-1ef9-4f89-b341-1a35f0c32cc0
        callback_url:
          description: >-
            The callback URL that your user will be redirected to after
            confirming the payment in their banking application.
          type: string
          example: https://www.acmecorp.com/checkout/3487321
        cpf:
          description: >-
            The customer's CPF number. Only required when the `customer_type` is
            `BUSINESS`.


            **Note:** This value is obfuscated.
          type: string
          nullable: true
          example: '***444777**'
    PaymentIntentPaymentMethodDetailsIndividualOfpi:
      title: INDIVIDUAL
      description: Details about the OFPI payment method.
      type: object
      required:
        - open_finance
      properties:
        open_finance:
          $ref: >-
            #/components/schemas/PaymentIntentPaymentMethodDetailsBodyIndividualOfpi
    PaymentIntentPaymentMethodDetailsBodyBusinessOfpi:
      description: Payment method type selected.
      type: object
      required:
        - beneficiary_bank_account
        - payer_institution
        - callback_url
        - cpf
      properties:
        beneficiary_bank_account:
          description: Belvo's unique ID used to identify the beneficiary's bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        payer_institution:
          description: Belvo's unique ID to reference the payer's institution.
          type: string
          format: uuid
          example: 600f1b4a-1ef9-4f89-b341-1a35f0c32cc0
        callback_url:
          description: >-
            The callback URL that your user will be redirected to after
            confirming the payment in their banking application.
          type: string
          example: https://www.acmecorp.com/checkout/3487321
        cpf:
          description: >-
            The customer's CPF number. Only required when the `customer_type` is
            `BUSINESS`.


            **Note:** This value is obfuscated.
          type: string
          nullable: true
          example: '***444777**'
    PaymentIntentPaymentMethodDetailsBusinessOfpi:
      title: BUSINESS
      description: Details about the OFPI payment method.
      type: object
      required:
        - open_finance
      properties:
        open_finance:
          $ref: >-
            #/components/schemas/PaymentIntentPaymentMethodDetailsBodyBusinessOfpi
    PaymentMethodInformationBodyOfpi:
      description: Payment method type selected.
      type: object
      properties:
        provider_request_id:
          description: Unique ID for the payment, as sent by the provider.
          type: string
          example: 978c0c97ea847e78e8849634473c1f1
        redirect_url:
          description: URL that redirects the user to the institution's website.
          type: string
          example: https://wakandanational.com/
        end_to_end_id:
          description: A unique ID for the transaction in the Brazil's PIX payment system.
          type: string
          example: F203262942022211117487a213b1d140
    PaymentMethodInformationOfpi:
      title: OFPI
      description: Information about the payment method selected.
      type: object
      properties:
        open_finance:
          $ref: '#/components/schemas/PaymentMethodInformationBodyOfpi'
    ChargePaymentMethodDetailsPseContent:
      description: Information about the payer of a PSE payment.
      type: object
      properties:
        payer_institution:
          description: Unique identifier for the payer‚Äôs institution.
          type: string
          format: uuid
          example: db201c6a-e0ee-4caa-92d6-72b480d6d86f
        payer_bank_account:
          description: Belvo's unique ID used to identify the customer‚Äôs bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
    ChargePaymentMethodDetailsPse:
      title: PSE
      description: Details about the payment method.
      type: object
      properties:
        pse:
          $ref: '#/components/schemas/ChargePaymentMethodDetailsPseContent'
    ChargePaymentMethodDetailsOfpiContent:
      description: Information about the payer of a PSE payment.
      type: object
      properties:
        payer_institution:
          description: Unique identifier for the payer‚Äôs institution.
          type: string
          format: uuid
          example: db201c6a-e0ee-4caa-92d6-72b480d6d86f
        beneficiary_bank_account:
          description: Belvo's unique ID used to identify the beneficiary's bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
    ChargePaymentMethodDetailsOfpi:
      title: OFPI
      description: Details about the payment method.
      type: object
      properties:
        open_finance:
          $ref: '#/components/schemas/ChargePaymentMethodDetailsOfpiContent'
    PaymentMethodInformationBodyPse:
      description: Payment method type selected.
      type: object
      properties:
        provider_request_id:
          description: Unique ID for the payment, as sent by the provider.
          type: string
          example: c978c0c97ea847e78e8849634473c1f1
        redirect_url:
          description: URL that redirects the user to the institution's website.
          type: string
          example: https://wakandanational.com/
        bank_payment_id:
          description: Unique payment ID provided the institution.
          type: string
          example: '456213985641233659874512459842'
    PaymentMethodInformationPse:
      title: PSE
      description: >-
        Information about the payment method selected.


        **Note**: If no payment method information is associated, we return an
        empty array.
      type: object
      properties:
        pse:
          $ref: '#/components/schemas/PaymentMethodInformationBodyPse'
    EnumPaymentTransactionType:
      description: |-
        The direction of the transaction.

          - `INFLOW` indicates money coming into the account.
          - `OUTFLOW` indicates money coming out of the account.
      type: string
      enum:
        - INFLOW
        - OUTFLOW
      example: INFLOW
    TransactionBankAccountOfpi:
      title: Brazil üáßüá∑ OFPI
      description: >-
        Object containing the payer's bank account information. For OFPI, this
        field will return an empty object.
      type: object
    TransactionBankAccountBodyPse:
      title: Bank account PSE
      description: >-
        Information about the payer's bank account. Belvo returns the bank
        account ID when the account is already saved in the Belvo database.
      type: object
      properties:
        bank_account:
          description: Belvo's unique identifier for the payer‚Äôs bank account.
          type: string
          format: uuid
          example: db201c6a-e0ee-4caa-92d6-72b480d6d86f
    BankAccountInformationContentPse:
      description: Information about the payer's institution
      type: object
      properties:
        payer_institution:
          description: Belvo's unique identifier for the payer‚Äôs institution.
          type: string
          format: uuid
          example: db201c6a-e0ee-4caa-92d6-72b480d6d86f
    BankAccountInformationPse:
      title: Bank account information PSE
      description: >-
        Information about the payer's bank account. Belvo returns this object
        when the payer's bank account information is not saved in the Belvo
        database. 
      type: object
      properties:
        bank_account_information:
          $ref: '#/components/schemas/BankAccountInformationContentPse'
    TransactionBankAccountPse:
      title: Colombia üá®üá¥ PSE
      description: Object containing the payer's bank account information.
      type: object
      oneOf:
        - $ref: '#/components/schemas/TransactionBankAccountBodyPse'
        - $ref: '#/components/schemas/BankAccountInformationPse'
    paymentTransaction:
      type: object
      required:
        - id
        - created_at
        - created_by
        - amount
        - currency
        - description
        - transaction_type
        - beneficiary
        - payer
        - charge
      properties:
        description:
          description: |
            The description of the payment.
          type: string
          example: Training shoes
        id:
          description: Belvo‚Äôs unique ID to reference the transaction.
          type: string
          format: uuid
          example: fd0f3303-cafb-47ea-9753-21155cb144ab
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the payment.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        amount:
          description: >
            The transaction amount.



            **Note**: The amount displayed is always positive as we indicate the
            direction of the transaction in `transaction_type` parameter.
          type: string
          example: '1020.00'
        currency:
          $ref: '#/components/schemas/EnumPaymentsCurrency'
        transaction_type:
          $ref: '#/components/schemas/EnumPaymentTransactionType'
        beneficiary:
          description: Belvo's unique ID used to identify the beneficiary's bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        payer:
          oneOf:
            - $ref: '#/components/schemas/TransactionBankAccountOfpi'
            - $ref: '#/components/schemas/TransactionBankAccountPse'
        payment_intent:
          description: The unique ID of the payment intent associated with the transaction.
          type: string
          format: uuid
          example: 004a28bb-fac2-4172-884b-5b6ea15314ad
        customer:
          description: >-
            Belvo's unique ID for the customer asscociated with this
            transaction.
          type: string
          format: uuid
          example: 9eebd63b-3339-44a9-8a5a-72bb6cb2f310
    Charge:
      type: object
      required:
        - id
        - created_at
        - failure_code
        - failure_message
        - status
        - updated_at
        - amount
        - beneficiary
        - provider
        - metadata
        - payment_method_details
        - payment_method_information
      properties:
        description:
          description: |
            The description of the payment.
          type: string
          example: Training shoes
        id:
          description: Belvo's unique ID for the current charge.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the charge.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        customer:
          description: Belvo's unique ID for the customer that the charge was created for.
          type: string
          format: uuid
          example: 531aa631-70a0-4eeb-ab97-51dea3e90c89
        failure_code:
          description: >
            Error code that explains the reason behind a payment being
            unsuccessful (if applicable).
          type: string
          nullable: true
          example: null
        failure_message:
          description: |
            Further information regarding the `failure_code`.
          type: string
          nullable: true
          example: null
        status:
          description: |
            The current status of the charge.
          type: string
          enum:
            - PENDING
            - SUCCEEDED
            - FAILED
          example: PENDING
        amount:
          description: |
            The amount of the charge.
          type: string
          nullable: true
          example: '100.12'
        currency:
          $ref: '#/components/schemas/EnumPaymentsCurrency'
        metadata:
          description: >-
            Optional and customizable object where you can provide any
            additional key-value pairs for your internal purposes. For example,
            an internal reference number.


            ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
            50 characters each and each value can be up to 500 characters). We
            do not support nested objects, only ASCII values.
          type: object
          example:
            internal_reference_id: GGq73487w2
        beneficiary:
          description: Belvo's unique ID used to identify the beneficiary‚Äôs bank account.
          type: string
          format: uuid
          example: 58524ccc-89ac-4ab6-b62b-c3da3f19a722
        provider:
          $ref: '#/components/schemas/EnumPaymentLinkProvider'
        payment_method_type:
          $ref: '#/components/schemas/EnumPaymentLinkAllowedPaymentMethod'
        payment_method_details:
          oneOf:
            - $ref: '#/components/schemas/ChargePaymentMethodDetailsPse'
            - $ref: '#/components/schemas/ChargePaymentMethodDetailsOfpi'
        payment_method_information:
          oneOf:
            - $ref: '#/components/schemas/PaymentMethodInformationPse'
        payment_intent:
          description: The `payment_intent.id` associated with this charge.
          type: string
          format: uuid
          example: 50c04229-7b1d-4a53-951c-8ad53e10c6ca
        transactions:
          description: An array of Transaction objects relating to the charge.
          type: array
          items:
            $ref: '#/components/schemas/paymentTransaction'
        updated_at:
          description: >
            The ISO-8601 timestamp of when the status of the charge was last
            updated.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
    EnumPaymentIntentStatus:
      description: |
        The current status of the payment intent.
      type: string
      enum:
        - REQUIRES_PAYMENT_METHOD
        - REQUIRES_ACTION
        - SUCCEEDED
        - PROCESSING
        - FAILED
      example: PROCESSING
    PaymentIntentOfpi:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - id
        - created_at
        - created_by
        - customer
        - allowed_payment_method_types
        - amount
        - currency
        - description
        - failure_code
        - failure_message
        - next_step
        - last_error
        - payment_method_details
        - payment_method_information
        - provider
        - status
        - updated_at
        - selected_payment_method_type
      properties:
        description:
          description: |
            The description of the payment.
          type: string
          example: Training shoes
        id:
          description: Belvo's unique ID for the current payment intent.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created this payment intent.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        customer:
          description: Belvo's unique ID for the customer related to this payment intent.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        allowed_payment_method_types:
          description: >-
            A list of payment method types allowed in this payment intent. For
            OFPI, the value will be `open_finance`.
          type: array
          items:
            type: string
            example: open_finance
        amount:
          description: |
            Amount to be paid by your customer in this payment intent.
          type: string
          pattern: ^(?!0$)(?:0\.\d{1,2}|[1-9]\d{0,11})(?:\.\d{1,2})?$
          example: '1330.56'
        currency:
          $ref: '#/components/schemas/EnumPaymentsCurrency'
        failure_code:
          description: >
            Error code that explains the reason behind a payment being
            unsuccessful (if applicable).
          type: string
          nullable: true
          example: null
        failure_message:
          description: |
            Further information regarding the `failure_code`.
          type: string
          nullable: true
          example: null
        metadata:
          description: >-
            Optional and customizable object where you can provide any
            additional key-value pairs for your internal purposes. For example,
            an internal reference number.


            ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
            50 characters each and each value can be up to 500 characters). We
            do not support nested objects, only ASCII values.
          type: object
          example:
            internal_reference_id: GGq73487w2
        next_step:
          oneOf:
            - $ref: '#/components/schemas/NextStepDisplayPaymentMethodInformation'
            - $ref: '#/components/schemas/NextStepNeedsRedirect'
            - $ref: '#/components/schemas/NextStepDisplayConfirmationRequiredOfpi'
            - $ref: '#/components/schemas/NextStepDisplayPaymentProcessing'
            - $ref: '#/components/schemas/NextStepDisplayPaymentSucceeded'
            - $ref: '#/components/schemas/NextStepDisplayPaymentFailed'
        last_error:
          oneOf:
            - $ref: '#/components/schemas/LastErrorPaymentError'
        payment_method_details:
          anyOf:
            - $ref: >-
                #/components/schemas/PaymentIntentPaymentMethodDetailsIndividualOfpi
            - $ref: >-
                #/components/schemas/PaymentIntentPaymentMethodDetailsBusinessOfpi
        payment_method_information:
          $ref: '#/components/schemas/PaymentMethodInformationOfpi'
        charges:
          description: >-
            An array of charge objects related to this paymnet intent. If no
            charges are associated, we return an empty array.


            **Note**: The charges resource will be deprecated and removed from
            our API by end of Q1 2023. We recommend not using any data from this
            resource. 
          type: array
          deprecated: true
          items:
            $ref: '#/components/schemas/Charge'
        provider:
          $ref: '#/components/schemas/EnumPaymentLinkProvider'
        selected_payment_method_type:
          $ref: '#/components/schemas/EnumPaymentLinkAllowedPaymentMethod'
        status:
          $ref: '#/components/schemas/EnumPaymentIntentStatus'
        updated_at:
          description: |
            The ISO-8601 timestamp of when the payment intent was last updated.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
    PaymentLinkOfpi:
      title: Brazil üáßüá∑ OFPI
      type: object
      required:
        - id
        - created_at
        - created_by
        - payment_url
        - callback_urls
        - status
        - expires_in
        - expires_at
      properties:
        id:
          description: Belvo's unique ID for the current payment link.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the payment link.
          type: string
          format: uuid
          example: 62053a72-e2d5-4c95-a578-6b16616900ac
        payment_url:
          description: >-
            The URL for the hosted-widget that will guide your user through the
            payments process.
          type: string
          example: https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        access_token:
          description: >-
            The Belvo-generated access token for the payment link.


            **Note:** You'll need the `access_token` to make [Get details for a
            payment
            link](https://developers.belvo.com/reference/detailcreatepaymentlink)
            requests.
          type: string
          example: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        callback_urls:
          $ref: '#/components/schemas/PaymentLinkCallbackUrlsResponse'
        payment_intent:
          $ref: '#/components/schemas/PaymentIntentOfpi'
        updated_at:
          description: |
            The ISO-8601 timestamp of when the payment link was last updated.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
        status:
          $ref: '#/components/schemas/EnumPaymentLinksStatus'
        expires_in:
          description: 'The payment link expiration time.  '
          type: string
          pattern: ‚Äò^(\\d+)([mhd])$‚Äô
          example: 7d
        expires_at:
          description: |
            The ISO-8601 timestamp of when the payment link is set to expire.
          type: string
          format: date-time
          example: '2023-02-09T08:45:50.406032Z'
    EnumPaymentIntentHolderTypePse:
      description: Type of bank account holder. For PSE, this value must be `INDIVIDUAL`.
      type: string
      enum:
        - INDIVIDUAL
        - BUSINESS
      example: INDIVIDUAL
    HolderBankAccountInformationPse:
      description: >-
        Object with additional information about the individual that holds the
        bank account.
      type: object
      properties:
        first_name:
          description: The account holder's first name.
          type: string
          example: Carlos
        last_name:
          description: The account holder's last name.
          type: string
          example: Vives
    HolderBankAccountPse:
      description: Details regarding the bank account holder.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EnumPaymentIntentHolderTypePse'
        information:
          $ref: '#/components/schemas/HolderBankAccountInformationPse'
    PaymentMethodInformationDetailsPse:
      type: object
      properties:
        country:
          $ref: '#/components/schemas/EnumPaymentsCountry'
        account_type:
          description: The type of bank account. For example, `Ahorros` or `Corriente`.
          type: string
          example: Ahorros
    PaymentMethodInfoCustomerBankAccountsPse:
      type: object
      properties:
        id:
          description: Belvo's unique ID used to identify the customer‚Äôs bank account.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        customer:
          description: Belvo's unique ID for the current customer.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        institution:
          $ref: '#/components/schemas/paymentInstitution'
        number:
          description: The customer's bank account number. This value is obfuscated.
          type: string
          example: '******1234'
        holder:
          $ref: '#/components/schemas/HolderBankAccountPse'
        details:
          $ref: '#/components/schemas/PaymentMethodInformationDetailsPse'
    DisplayPaymentMethodInformationContentPse:
      title: Display PSE payment method information
      description: Object detailing what payment method information you need to display.
      type: object
      properties:
        customer_bank_accounts:
          description: >-
            Array of bank account objects.


            **Note**: If there are no customer accounts saved in the Belvo
            database, we return an empty array.
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethodInfoCustomerBankAccountsPse'
        institutions:
          description: An array of institution objects.
          type: array
          items:
            $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayPaymentMethodInformationPse:
      title: Display PSE payment method information
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type. You'll need to send a PATCH request with the
        institution selected by the customer or their bank accounts (if there
        are accounts already saved in the Belvo database).
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - pse_display_payment_method_information
            - pse_display_credentials_required
            - pse_display_needs_redirect
            - pse_display_token_required
            - pse_display_customer_bank_accounts
            - pse_display_confirmation_required
            - pse_display_payment_processing
            - pse_display_payment_failed
            - pse_display_payment_succeeded
          example: pse_display_payment_method_information
        pse_display_payment_method_information:
          $ref: '#/components/schemas/DisplayPaymentMethodInformationContentPse'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
          type: boolean
          default: false
          example: false
    DisplayCredentialsRequiredContentPse:
      title: Display PSE confirmation required
      description: >-
        Object containing form fields for the required credentials (for example,
        `username` or `password`) in this step.
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayCredentialsRequiredPse:
      title: Display PSE credentials required
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - pse_display_payment_method_information
            - pse_display_credentials_required
            - pse_display_needs_redirect
            - pse_display_token_required
            - pse_display_customer_bank_accounts
            - pse_display_confirmation_required
            - pse_display_payment_processing
            - pse_display_payment_failed
            - pse_display_payment_succeeded
          example: pse_display_credentials_required
        pse_display_credentials_required:
          $ref: '#/components/schemas/DisplayCredentialsRequiredContentPse'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
          type: boolean
          default: false
          example: false
    NeedsRedirectContentPse:
      description: Details regarding the payer institution.
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/InstitutionFormField'
    NextStepDisplayNeedsRedirectPse:
      title: Display PSE needs redirect
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - pse_display_payment_method_information
            - pse_display_credentials_required
            - pse_display_needs_redirect
            - pse_display_token_required
            - pse_display_customer_bank_accounts
            - pse_display_confirmation_required
            - pse_display_payment_processing
            - pse_display_payment_failed
            - pse_display_payment_succeeded
          example: pse_display_needs_redirect
        pse_display_needs_redirect:
          $ref: '#/components/schemas/NeedsRedirectContentPse'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
          type: boolean
          default: true
          example: true
    DisplayTokenRequiredContentPse:
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayTokenRequiredPse:
      title: Display PSE token required
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - pse_display_payment_method_information
            - pse_display_credentials_required
            - pse_display_needs_redirect
            - pse_display_token_required
            - pse_display_customer_bank_accounts
            - pse_display_confirmation_required
            - pse_display_payment_processing
            - pse_display_payment_failed
            - pse_display_payment_succeeded
          example: pse_display_token_required
        pse_display_token_required:
          $ref: '#/components/schemas/DisplayTokenRequiredContentPse'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. This value will return: 

              - `false` when a customer wants to pay for the very first time. This is so because you still need to input information about your customer in the following steps to process a payment successfully. 
              - `true` when a customer wants to pay and this is not their first time. This is so because the payment intent has all the information needed about the customer to process a payment. 


            **Note:** When the value is `true`, you'll need to confirm the
            payment intent. You can do this by making a PATCH request sending
            through the parameter `confirm: true`.
          type: boolean
          example: true
    BeneficiaryBankAccountPse:
      title: Beneficiary Bank Account PSE
      type: object
      properties:
        id:
          description: Belvo's unique ID for the beneficiary bank account.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        institution:
          description: >-
            Belvo's unique ID for the institution that the bank account is
            created in.
          type: string
          format: uuid
          nullable: true
          example: f512d996-583a-4a91-8b5b-eba2e103b068
        number:
          description: The bank account number.
          type: string
          nullable: true
          example: '******1213'
        holder:
          $ref: '#/components/schemas/HolderBusinessResponsePse'
    DisplayCustomerBankAccountsContentPse:
      title: Display PSE payment method information
      description: Object detailing what payment method information you need to display.
      type: object
      properties:
        customer_bank_accounts:
          description: Array of customer bank account objects.
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethodInfoCustomerBankAccountsPse'
        beneficiary_bank_account:
          $ref: '#/components/schemas/BeneficiaryBankAccountPse'
    NextStepDisplayCustomerBankAccountsPse:
      title: Display PSE customer bank accounts
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - pse_display_payment_method_information
            - pse_display_credentials_required
            - pse_display_needs_redirect
            - pse_display_token_required
            - pse_display_customer_bank_accounts
            - pse_display_confirmation_required
            - pse_display_payment_processing
            - pse_display_payment_failed
            - pse_display_payment_succeeded
          example: pse_display_customer_bank_accounts
        pse_display_customer_bank_accounts:
          $ref: '#/components/schemas/DisplayCustomerBankAccountsContentPse'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
          type: boolean
          default: true
          example: true
    DisplayConfirmationRequiredContentPse:
      title: Display PSE Colombia confirmation required.
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        payer_institution:
          $ref: '#/components/schemas/paymentInstitution'
    NextStepDisplayConfirmationRequiredPse:
      title: Display PSE confirmation required
      description: >-
        Object detailing the next steps you should follow for a specific
        `next_step` type.
      type: object
      properties:
        type:
          description: |
            The type of `next_step` you need to follow.
          type: string
          enum:
            - pse_display_payment_method_information
            - pse_display_credentials_required
            - pse_display_needs_redirect
            - pse_display_token_required
            - pse_display_customer_bank_accounts
            - pse_display_confirmation_required
            - pse_display_payment_processing
            - pse_display_payment_failed
            - pse_display_payment_succeeded
          example: pse_display_confirmation_required
        pse_display_confirmation_required:
          $ref: '#/components/schemas/DisplayConfirmationRequiredContentPse'
        ready_to_confirm:
          description: >-
            Boolean that indicates whether the payment intent is ready to be
            confirmed. 

              **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.
          type: boolean
          default: true
          example: true
    LastErrorInvalidCredentials:
      title: invalid_credentials
      description: >-
        Information about the error you ran into in the previous step of the
        payment intent, if applicable. This error can occur when the credentials
        that your customer provides are incorrect.
      type: object
      required:
        - error_code
        - error_message
      properties:
        error_code:
          description: >-
            A unique error code (`invalid_credentials`) that allows you to
            classify and handle the error programmatically.
          type: string
          example: invalid_credentials
        error_message:
          description: A short description of the error.
          type: string
          example: The credentials sent are incorrect, please try again.
    LastErrorInvalidToken:
      title: invalid_token
      description: >-
        Information about the error you ran into in the previous step of the
        payment intent, if applicable. This error can occur when the MFA token
        your customer provides is invalid.
      type: object
      required:
        - error_code
        - error_message
      properties:
        error_code:
          description: >-
            A unique error code (`invalid_token`) that allows you to classify
            and handle the error programmatically.
          type: string
          example: invalid_token
        error_message:
          description: A short description of the error.
          type: string
          example: The token sent is incorrect or has expired, please try again.
    LastErrorLoginError:
      title: login_error
      description: >-
        Information about the error you ran into in the previous step of the
        payment intent, if applicable. This error can occur when something
        unexpected happened in the `pse_display_credentials_required` next step.
      type: object
      required:
        - error_code
        - error_message
      properties:
        error_code:
          description: >-
            A unique error code (`login_error`) that allows you to classify and
            handle the error programmatically.
          type: string
          example: login_error
        error_message:
          description: A short description of the error.
          type: string
          example: Provider login error
    LastErrorTwoFactor:
      title: login_two_factor_error
      description: >-
        Information about the error you ran into in the previous step of the
        payment intent, if applicable. This error can occur when something
        unexpected happened in the `pse_display_token_required` next step.
      type: object
      required:
        - error_code
        - error_message
      properties:
        error_code:
          description: >-
            A unique error code (`login_two_factor_error`) that allows you to
            classify and handle the error programmatically.
          type: string
          example: login_two_factor_error
        error_message:
          description: A short description of the error.
          type: string
          example: Provider login two factor error
    LastErrorSessionExpired:
      title: session_expired
      description: >-
        Information about the error you ran into in the previous step of the
        payment intent, if applicable. This error occurs when you try to send a
        PATCH request after the session has already expired (the session expires
        after 10 minutes).
      type: object
      required:
        - error_code
        - error_message
      properties:
        error_code:
          description: >-
            A unique error code (`session_expired`) that allows you to classify
            and handle the error programmatically.
          type: string
          example: session_expired
        error_message:
          description: A short description of the error.
          type: string
          example: Bank session was not found.
    PaymentIntentPaymentMethodDetailsBodyPse:
      description: Details about the payment method type selected.
      type: object
      required:
        - beneficiary_bank_account
        - callback_url
        - belvo_flow
      properties:
        payer_institution:
          description: Belvo's unique identifier for the payer‚Äôs institution.
          type: string
          format: uuid
          example: db201c6a-e0ee-4caa-92d6-72b480d6d86f
        payer_bank_account:
          description: Belvo's unique ID used to identify the customer‚Äôs bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        beneficiary_bank_account:
          description: Belvo's unique ID used to identify the beneficiary‚Äôs bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        username:
          description: >-
            The username used to log in to the institution. This value is
            obfuscated.
          type: string
          example: '***'
        password:
          description: >-
            The password used to log in to the institution. This value is
            obfuscated.
          type: string
          example: '***'
        callback_url:
          description: >-
            The callback URL that your user will be redirected to after
            confirming the payment in their banking application.
          type: string
          example: https://www.acmecorp.com/checkout/3487321
        belvo_flow:
          description: >-
            This parameter determines the payment flow of the payment intent. By
            default, this is set to `true` and the payment intent created is
            processed using the Belvo's payment flow and Belvo-integrated
            institutions. When set to `false`, the payment intent process uses
            institutions not integrated into Belvo's flow.       
          type: boolean
          default: true
          example: true
    PaymentIntentPaymentMethodDetailsPse:
      title: PSE
      description: Details about the PSE payment method.
      type: object
      properties:
        pse:
          $ref: '#/components/schemas/PaymentIntentPaymentMethodDetailsBodyPse'
    PaymentIntentPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - id
        - created_at
        - created_by
        - customer
        - allowed_payment_method_types
        - amount
        - currency
        - description
        - failure_code
        - failure_message
        - next_step
        - last_error
        - payment_method_details
        - payment_method_information
        - provider
        - status
        - updated_at
        - selected_payment_method_type
      properties:
        description:
          description: |
            The description of the payment.
          type: string
          example: Training shoes
        id:
          description: Belvo's unique ID for the current payment intent.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created this payment intent.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        customer:
          description: Belvo's unique ID for the customer related to this payment intent.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        allowed_payment_method_types:
          description: >-
            A list of payment method types allowed in this payment intent. For
            PSE, the value will be `pse`.
          type: array
          items:
            $ref: '#/components/schemas/EnumPaymentLinkAllowedPaymentMethod'
        amount:
          description: |
            Amount to be paid by your customer in this payment intent.
          type: string
          pattern: ^(?!0+$)\d{1,12}$
          example: '350000'
        currency:
          $ref: '#/components/schemas/EnumPaymentsCurrency'
        failure_code:
          description: >
            Error code that explains the reason behind a payment being
            unsuccessful (if applicable).
          type: string
          nullable: true
          example: null
        failure_message:
          description: |
            Further information regarding the `failure_code`.
          type: string
          nullable: true
          example: null
        metadata:
          description: >-
            Optional and customizable object where you can provide any
            additional key-value pairs for your internal purposes. For example,
            an internal reference number.


            ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
            50 characters each and each value can be up to 500 characters). We
            do not support nested objects, only ASCII values.
          type: object
          example:
            internal_reference_id: GGq73487w2
        next_step:
          oneOf:
            - $ref: '#/components/schemas/NextStepDisplayPaymentMethodInformationPse'
            - $ref: '#/components/schemas/NextStepDisplayCredentialsRequiredPse'
            - $ref: '#/components/schemas/NextStepDisplayNeedsRedirectPse'
            - $ref: '#/components/schemas/NextStepDisplayTokenRequiredPse'
            - $ref: '#/components/schemas/NextStepDisplayCustomerBankAccountsPse'
            - $ref: '#/components/schemas/NextStepDisplayConfirmationRequiredPse'
        last_error:
          oneOf:
            - $ref: '#/components/schemas/LastErrorInvalidCredentials'
            - $ref: '#/components/schemas/LastErrorInvalidToken'
            - $ref: '#/components/schemas/LastErrorLoginError'
            - $ref: '#/components/schemas/LastErrorTwoFactor'
            - $ref: '#/components/schemas/LastErrorPaymentError'
            - $ref: '#/components/schemas/LastErrorSessionExpired'
        payment_method_details:
          $ref: '#/components/schemas/PaymentIntentPaymentMethodDetailsPse'
        payment_method_information:
          $ref: '#/components/schemas/PaymentMethodInformationPse'
        charges:
          description: >-
            An array of charge objects related to this paymnet intent. If no
            charges are associated, we return an empty array.


            **Note**: The charges resource will be deprecated and removed from
            our API by end of Q1 2023. We recommend not using any data from this
            resource. 
          type: array
          deprecated: true
          items:
            $ref: '#/components/schemas/Charge'
        provider:
          $ref: '#/components/schemas/EnumPaymentLinkProvider'
        selected_payment_method_type:
          $ref: '#/components/schemas/EnumPaymentLinkAllowedPaymentMethod'
        status:
          $ref: '#/components/schemas/EnumPaymentIntentStatus'
        updated_at:
          description: |
            The ISO-8601 timestamp of when the payment intent was last updated.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
    PaymentLinkPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - id
        - created_at
        - created_by
        - payment_url
        - callback_urls
        - status
        - expires_in
        - expires_at
      properties:
        id:
          description: Belvo's unique ID for the current payment link.
          type: string
          format: uuid
          example: 1c83ead8-6665-429c-a17a-ddc76cb3a95e
        created_at:
          description: >-
            The ISO-8601 timestamp of when the data point was last updated in
            Belvo's database.
          type: string
          format: date-time
          example: '2022-02-09T08:45:50.406032Z'
        created_by:
          description: Belvo's unique ID for the user that created the payment link.
          type: string
          format: uuid
          example: 62053a72-e2d5-4c95-a578-6b16616900ac
        payment_url:
          description: >-
            The URL for the hosted-widget that will guide your user through the
            payments process.
          type: string
          example: https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        access_token:
          description: >-
            The Belvo-generated access token for the payment link.


            **Note:** You'll need the `access_token` to make [Get details for a
            payment
            link](https://developers.belvo.com/reference/detailcreatepaymentlink)
            requests.
          type: string
          example: YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU
        callback_urls:
          $ref: '#/components/schemas/PaymentLinkCallbackUrlsResponse'
        payment_intent:
          $ref: '#/components/schemas/PaymentIntentPse'
        updated_at:
          description: |
            The ISO-8601 timestamp of when the payment link was last updated.
          type: string
          format: date-time
          nullable: true
          example: '2022-02-09T08:45:50.406032Z'
        status:
          $ref: '#/components/schemas/EnumPaymentLinksStatus'
        expires_in:
          description: 'The payment link expiration time. '
          type: string
          pattern: ‚Äò^(\\d+)([mhd])$‚Äô
          example: 7d
        expires_at:
          description: |
            The ISO-8601 timestamp of when the payment link is set to expire.
          type: string
          format: date-time
          example: '2023-02-09T08:45:50.406032Z'
    PaymentIntentPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `customer` or
            `bank-accounts`).
          type: string
          nullable: true
          example: https://api.belvo.com/payments/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of payment intent objects.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PaymentIntentPse'
    PaymentIntentsPaymentMethodDetailsBodyPse:
      title: PSE
      description: >-
        Details about the organization's bank account that will receive the
        payment.
      type: object
      required:
        - beneficiary_bank_account
        - belvo_flow
      properties:
        beneficiary_bank_account:
          description: Belvo's unique ID used to identify the beneficiary's bank account.
          type: string
          format: uuid
          example: a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc
        callback_url:
          description: >-
            The URL to your application that your customer will be directed to
            once they confirm the payment in their bank application.
          type: string
          example: https://www.acmecorp.com/checkout/3487321
        belvo_flow:
          description: >-
            This parameter determines the payment flow of the payment intent. By
            default, this is set to `true` and the payment intent created is
            processed using Belvo's payment flow and Belvo-integrated
            institutions. When set to `false`, the payment intent process uses
            institutions not integrated into Belvo's flow.       
          type: boolean
          default: true
          example: true
    PaymentIntentsPaymentMethodDetailsPse:
      title: PSE
      description: Object with payment method details to create a payment intent.
      type: object
      required:
        - pse
      properties:
        pse:
          $ref: '#/components/schemas/PaymentIntentsPaymentMethodDetailsBodyPse'
    CreatePaymentIntentPse:
      title: Colombia üá®üá¥ PSE
      type: object
      required:
        - amount
        - customer
        - description
        - allowed_payment_method_types
        - payment_method_details
        - provider
      properties:
        description:
          description: |
            The description of the payment.
          type: string
          example: Training shoes
        amount:
          description: >
            Amount to be paid by your customer.



            For PSE, you can only send whole numbers (integers). For example:
            `"350000"`.
          type: string
          pattern: ^(?!0+$)\d{1,12}$
          example: '350000'
        customer:
          description: |
            Belvo's unique ID to reference the customer.
          type: string
          format: uuid
          example: 06dc2f14-1217-4480-9b36-550a944a39d1
        allowed_payment_method_types:
          description: >-
            A list of payment method types allowed in this payment intent. For
            PSE, this value must be set to `pse`.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/EnumPaymentLinkAllowedPaymentMethod'
        payment_method_details:
          $ref: '#/components/schemas/PaymentIntentsPaymentMethodDetailsPse'
        provider:
          $ref: '#/components/schemas/EnumPaymentLinkProvider'
        metadata:
          description: >-
            Optional and customizable object where you can provide any
            additional key-value pairs for your internal purposes. For example,
            an internal reference number for the payment intent.


            ‚ö†Ô∏è **Note**: You can only provide up to 50 keys (keys can have up to
            50 characters each and each value can be up to 500 characters). We
            do not support nested objects, only ASCII values.
          type: object
          example:
            internal_reference_id: GGq73487w2
    PatchPaymentMethodDetailsPse:
      description: >-
        Object with required fields to fill information in the payment intent
        object. The information you need to send through depends on the next
        step Belvo returns in the response.
      type: object
      properties:
        payer_institution:
          description: >-
            Belvo's unique identifier for the payer‚Äôs institution.


            **Note**: You need to send through this information after you
            received the `pse_display_payment_method_information` next step in
            the payment intent.
          type: string
          format: uuid
          example: db201c6a-e0ee-4caa-92d6-72b480d6d86f
        username:
          description: >-
            The username used to log in to the institution.


            **Note**: You need to send through this information after you
            received the `pse_display_credentials_required` next step in the
            payment intent.
          type: string
          example: username
        password:
          description: >-
            The password used to log in to the institution.


            **Note**: You need to send through this information after you
            received the `pse_display_credentials_required` next step in the
            payment intent.
          type: string
          example: '123456'
        payer_token:
          description: >-
            The MFA token generated by the institution and required to continue
            the payment flow.


            **Note**: You need to send through this information if you received
            the `pse_display_token_required` next step in the payment intent.
          type: string
          example: '123456'
        payer_bank_account:
          description: >-
            Belvo's unique identifier for the payer‚Äôs bank account.


            **Note**: You need to send through this information after you
            received the `pse_display_customer_bank_accounts` next step in the
            payment intent.
          type: string
          format: uuid
          example: db201c6a-e0ee-4caa-92d6-72b480d6d86f
    PatchPaymentIntentsBodyPse:
      title: PATCH payment method details
      type: object
      properties:
        pse:
          $ref: '#/components/schemas/PatchPaymentMethodDetailsPse'
    PatchPaymentIntentPse:
      type: object
      required:
        - payment_method_details
      properties:
        payment_method_details:
          oneOf:
            - $ref: '#/components/schemas/PatchPaymentIntentsBodyPse'
        confirm:
          description: >-
            Boolean that indicates whether this request confirms the payment
            intent. 


            **Note:** You'll need to send this parameter set to `true` when the
            payment intent next_step returns `ready_to_confirm: true`, meaning
            the payment intent is ready to be confirmed. 
          type: boolean
          example: true
    PaymentsTransactionsPaginatedResponse:
      type: object
      properties:
        count:
          description: The total number of results in your Belvo account.
          type: integer
          format: int32
          example: 130
        next:
          description: >
            The URL to next page of results. Each page consists of up to 100
            items. If there are not enough results for an additional page, the
            value is `null`.


            In our documentation example, we use `{endpoint}` as a placeholder
            value. In production, this value will be replaced by the actual
            endpoint you are currently using (for example, `customer` or
            `bank-accounts`).
          type: string
          nullable: true
          example: https://api.belvo.com/payments/{endpoint}/?page=2
        previous:
          description: >-
            The URL to the previous page of results. If there is no previous
            page, the value is `null`.
          type: string
          nullable: true
          example: null
        results:
          description: Array of transaction objects.
          type: array
          items:
            $ref: '#/components/schemas/paymentTransaction'
    TaxReturnsRetrieveRequest:
      oneOf:
        - $ref: '#/components/schemas/TaxReturnsMonthlyRequest'
        - $ref: '#/components/schemas/TaxReturnsYearlyRequest'
    CustomersCreateRequest:
      oneOf:
        - $ref: '#/components/schemas/CreateCustomerOfpi'
        - $ref: '#/components/schemas/CreateCustomerPse'
    BankAccountsCreateRequest:
      oneOf:
        - $ref: '#/components/schemas/CreateBankAccountOfpi'
        - $ref: '#/components/schemas/CreateBankAccountPse'
    PaymentLinksCreateRequest:
      oneOf:
        - $ref: '#/components/schemas/CreatePaymentLinkOfpi'
        - $ref: '#/components/schemas/CreatePaymentLinkPse'
    PaymentIntentsCreateRequest:
      oneOf:
        - $ref: '#/components/schemas/CreatePaymentIntentPse'
    LinksListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    LinksCompleteRequestResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    LinksCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    LinksCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    LinksCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    LinksRegisterResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    LinksRegister401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    LinksRegister428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    LinksRegister500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    LinksDestroyResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    LinksDestroy404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    LinksGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    LinksGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    LinksChangeAccessModeResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/InvalidAccessMode'
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    LinksChangeAccessMode401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    LinksChangeAccessMode404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    LinksChangeAccessMode428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    LinksChangeAccessMode500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    LinksUpdateResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    LinksUpdate401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    LinksUpdate404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    LinksUpdate428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    LinksUpdate500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    AccountsListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    AccountsCompleteRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    AccountsCompleteRequest201Response:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    AccountsCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    AccountsCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    AccountsCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    AccountsCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    AccountsCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    AccountsRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    AccountsRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    AccountsRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    AccountsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    AccountsRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    AccountsRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    AccountsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    AccountsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    AccountsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    AccountsGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    AccountsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TransactionsListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TransactionsCompleteRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'
    TransactionsCompleteRequest201Response:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'
    TransactionsCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    TransactionsCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TransactionsCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    TransactionsCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    TransactionsCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    TransactionsRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'
    TransactionsRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'
    TransactionsRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    TransactionsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TransactionsRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    TransactionsRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    TransactionsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    TransactionsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TransactionsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TransactionsGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TransactionsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    BalancesListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    BalancesCompleteRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/Balance'
    BalancesCompleteRequest201Response:
      type: array
      items:
        $ref: '#/components/schemas/Balance'
    BalancesCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    BalancesCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    BalancesCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    BalancesCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    BalancesCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    BalancesRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/Balance'
    BalancesRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/Balance'
    BalancesRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    BalancesRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    BalancesRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    BalancesRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    BalancesRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    BalancesDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    BalancesDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    BalancesGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    BalancesGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    InstitutionsListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InstitutionsGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InstitutionsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    OwnersListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    OwnersCompleteRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/Owner'
    OwnersCompleteRequest201Response:
      type: array
      items:
        $ref: '#/components/schemas/Owner'
    OwnersCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    OwnersCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    OwnersCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    OwnersCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    OwnersCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    OwnersRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/Owner'
    OwnersRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/Owner'
    OwnersRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    OwnersRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    OwnersRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    OwnersRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    OwnersRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    OwnersDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    OwnersDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    OwnersGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    OwnersGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    InvoicesListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvoicesCompleteRequestResponse:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/InvoiceWithIdSat'
          - $ref: '#/components/schemas/InvoiceDian'
    InvoicesCompleteRequest201Response:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/InvoiceWithIdSat'
          - $ref: '#/components/schemas/InvoiceDian'
    InvoicesCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    InvoicesCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvoicesCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    InvoicesCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    InvoicesCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    InvoicesRetrieveResponse:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/InvoiceWithIdSat'
          - $ref: '#/components/schemas/InvoiceDian'
    InvoicesRetrieve201Response:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/InvoiceWithIdSat'
          - $ref: '#/components/schemas/InvoiceDian'
    InvoicesRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    InvoicesRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvoicesRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    InvoicesRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    InvoicesDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvoicesDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    InvoicesGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/InvoiceWithIdSat'
        - $ref: '#/components/schemas/InvoiceDian'
    InvoicesGetDetails401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvoicesGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxReturnsListResponse:
      oneOf:
        - $ref: '#/components/schemas/TaxReturnsPersonalPaginated'
        - $ref: '#/components/schemas/TaxReturnsPersonalMonthlyPaginated'
        - $ref: '#/components/schemas/TaxReturnsBusinessPaginated'
        - $ref: '#/components/schemas/TaxReturnsBusinessMonthlyPaginated'
    TaxReturnsList401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxReturnsRetrieveResponse:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/TaxReturnPersonal'
          - $ref: '#/components/schemas/TaxReturnPersonalMonthly'
          - $ref: '#/components/schemas/TaxReturnBusiness'
          - $ref: '#/components/schemas/TaxReturnBusinessMonthly'
    TaxReturnsRetrieve201Response:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/TaxReturnPersonal'
          - $ref: '#/components/schemas/TaxReturnPersonalMonthly'
          - $ref: '#/components/schemas/TaxReturnBusiness'
          - $ref: '#/components/schemas/TaxReturnBusinessMonthly'
    TaxReturnsRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    TaxReturnsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxReturnsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    TaxReturnsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxReturnsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxReturnsGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/TaxReturnPersonal'
        - $ref: '#/components/schemas/TaxReturnPersonalMonthly'
        - $ref: '#/components/schemas/TaxReturnBusiness'
        - $ref: '#/components/schemas/TaxReturnBusinessMonthly'
    TaxReturnsGetDetails401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxReturnsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxStatusListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxStatusRetrieveResponse:
      oneOf:
        - $ref: '#/components/schemas/TaxStatusSat'
        - $ref: '#/components/schemas/TaxStatusDian'
    TaxStatusRetrieve201Response:
      oneOf:
        - $ref: '#/components/schemas/TaxStatusSat'
        - $ref: '#/components/schemas/TaxStatusDian'
    TaxStatusRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    TaxStatusRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxStatusRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    TaxStatusRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    TaxStatusDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxStatusDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxStatusGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/TaxStatusSat'
        - $ref: '#/components/schemas/TaxStatusDian'
    TaxStatusGetDetails401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxStatusGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxComplianceStatusListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxComplianceStatusRetrieveResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    TaxComplianceStatusRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxComplianceStatusRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    TaxComplianceStatusRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    TaxComplianceStatusDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxComplianceStatusDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxComplianceStatusGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxComplianceStatusGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    IncomesListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    IncomesCompleteRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/Income'
    IncomesCompleteRequest201Response:
      type: array
      items:
        $ref: '#/components/schemas/Income'
    IncomesCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    IncomesCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    IncomesCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    IncomesCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    IncomesCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    IncomesRetrieveResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
          - $ref: '#/components/schemas/InvalidPeriodError'
    IncomesRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    IncomesRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    IncomesRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    IncomesRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    IncomesDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    IncomesDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    IncomesGetDetailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/Income'
    IncomesGetDetails401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    IncomesGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    RecurringExpensesListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RecurringExpensesCompleteRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/RecurringExpenses'
    RecurringExpensesCompleteRequest201Response:
      type: array
      items:
        $ref: '#/components/schemas/RecurringExpenses'
    RecurringExpensesCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    RecurringExpensesCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RecurringExpensesCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    RecurringExpensesCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    RecurringExpensesCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    RecurringExpensesRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/RecurringExpenses'
    RecurringExpensesRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/RecurringExpenses'
    RecurringExpensesRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
          - $ref: '#/components/schemas/InvalidPeriodError'
    RecurringExpensesRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RecurringExpensesRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    RecurringExpensesRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    RecurringExpensesRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    RecurringExpensesDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RecurringExpensesDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    RecurringExpensesGetDetailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/RecurringExpenses'
    RecurringExpensesGetDetails401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RecurringExpensesGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    InvestmentPortfoliosListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvestmentPortfoliosCompleteRequestResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    InvestmentPortfoliosCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvestmentPortfoliosCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    InvestmentPortfoliosCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    InvestmentPortfoliosRetrieveResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    InvestmentPortfoliosRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvestmentPortfoliosRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    InvestmentPortfoliosRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    InvestmentPortfoliosDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvestmentPortfoliosDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    InvestmentPortfoliosGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    InvestmentPortfoliosGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    ReceivableTransactionsListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    ReceivableTransactionsRetrieveResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    ReceivableTransactionsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    ReceivableTransactionsRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    ReceivableTransactionsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    ReceivableTransactionsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    ReceivableTransactionsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    ReceivableTransactionsGetDetailsResponse:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    RiskInsightsListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RiskInsightsCompleteRequestResponse:
      type: array
      items:
        $ref: '#/components/schemas/RiskInsights'
    RiskInsightsCompleteRequest201Response:
      type: array
      items:
        $ref: '#/components/schemas/RiskInsights'
    RiskInsightsCompleteRequest400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    RiskInsightsCompleteRequest401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RiskInsightsCompleteRequest408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    RiskInsightsCompleteRequest428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    RiskInsightsCompleteRequest500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    RiskInsightsRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/RiskInsights'
    RiskInsightsRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/RiskInsights'
    RiskInsightsRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
          - $ref: '#/components/schemas/InvalidPeriodError'
    RiskInsightsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RiskInsightsRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    RiskInsightsRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    RiskInsightsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    RiskInsightsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RiskInsightsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    RiskInsightsGetDetailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/RiskInsights'
    RiskInsightsGetDetails401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    RiskInsightsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxRetentionsListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxRetentionsRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/TaxRetentions'
    TaxRetentionsRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/TaxRetentions'
    TaxRetentionsRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    TaxRetentionsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxRetentionsRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    TaxRetentionsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    TaxRetentionsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxRetentionsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxRetentionsGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxRetentionsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxDeclarationsListResponse:
      oneOf:
        - $ref: '#/components/schemas/TaxDeclarationIndividualPaginated'
        - $ref: '#/components/schemas/TaxDeclarationBusinessPaginated'
    TaxDeclarationsList401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxDeclarationsRetrieveResponse:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/TaxDeclarationBusiness'
          - $ref: '#/components/schemas/TaxDeclarationIndividual'
    TaxDeclarationsRetrieve201Response:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/TaxDeclarationBusiness'
          - $ref: '#/components/schemas/TaxDeclarationIndividual'
    TaxDeclarationsRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    TaxDeclarationsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxDeclarationsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    TaxDeclarationsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxDeclarationsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    TaxDeclarationsGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/TaxDeclarationIndividual'
        - $ref: '#/components/schemas/TaxDeclarationBusiness'
    TaxDeclarationsGetDetails401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    TaxDeclarationsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    EmploymentRecordsListResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    EmploymentRecordsRetrieveResponse:
      type: array
      items:
        $ref: '#/components/schemas/EmploymentRecord'
    EmploymentRecordsRetrieve201Response:
      type: array
      items:
        $ref: '#/components/schemas/EmploymentRecord'
    EmploymentRecordsRetrieve400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    EmploymentRecordsRetrieve401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    EmploymentRecordsRetrieve408Response:
      title: Request Timeout
      description: >-
        Belvo has a limit regarding the time it takes to log in, retrieve
        account data, and log out. A timeout occurs when there is a very high
        amount of data and everything could not be obtained within the allotted
        time.
          
      type: array
      items:
        $ref: '#/components/schemas/RequestTimeoutError'
    EmploymentRecordsRetrieve428Response:
      type: array
      items:
        $ref: '#/components/schemas/TokenRequiredResponse'
    EmploymentRecordsRetrieve500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    EmploymentRecordsDeleteResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    EmploymentRecordsDelete404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    EmploymentRecordsGetDetailsResponse:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    EmploymentRecordsGetDetails404Response:
      description: |-
        You made a request where you:

          - provided the wrong URL.
          - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.
          
      type: array
      items:
        $ref: '#/components/schemas/NotFoundError'
    IncomeVerificationVerifyResponse:
      type: array
      items:
        $ref: '#/components/schemas/Income'
    IncomeVerificationVerify400Response:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    IncomeVerificationVerify401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    IncomeVerificationVerify403Response:
      description: >-
        This error occurs when you try to access Belvo's resource without the
        correct permissions.
      type: array
      items:
        $ref: '#/components/schemas/AccessToResourceDenied'
    IncomeVerificationVerify500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    CategorizationCategorizeTransactionsResponse:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/TooManySessionsError'
          - $ref: '#/components/schemas/SessionExpiredError'
          - $ref: '#/components/schemas/ValidationError'
          - $ref: '#/components/schemas/InstitutionDownError'
          - $ref: '#/components/schemas/InstitutionUnavailableError'
          - $ref: '#/components/schemas/InstitutionInactiveError'
          - $ref: '#/components/schemas/UnsupportedOperationError'
          - $ref: '#/components/schemas/InvalidLinkError'
          - $ref: '#/components/schemas/UnconfirmedLinkError'
    CategorizationCategorizeTransactions401Response:
      description: >-
        This error occurs when you try to make an API call using incorrect Belvo
        API credentials (either your secret key or secret password, or both, are
        incorrect).
      type: array
      items:
        $ref: '#/components/schemas/UnauthorizedError'
    CategorizationCategorizeTransactions403Response:
      description: >-
        This error occurs when you try to access Belvo's resource without the
        correct permissions.
      type: array
      items:
        $ref: '#/components/schemas/AccessToResourceDenied'
    CategorizationCategorizeTransactions500Response:
      title: Unexpected Error
      description: >-
        This error occurs when we (Belvo) have encountered an internal system
        error (sorry about that) or due to an unsupported response from the
        institution.
          
      type: array
      items:
        $ref: '#/components/schemas/UnexpectedError'
    SecretKeysListResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    SecretKeysCreateResponse:
      type: array
      items:
        $ref: '#/components/schemas/Payments_RequestApiKeysResponse'
    SecretKeysCreate400Response:
      type: array
      items:
        $ref: '#/components/schemas/400ValidationError'
    SecretKeysCreate408Response:
      type: array
      items:
        $ref: '#/components/schemas/408RequestTimeoutError'
    PaymentInstitutionsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentInstitutionsGetDetailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentInstitutionsGetDetails404Response:
      type: array
      items:
        $ref: '#/components/schemas/404NotFoundError'
    CustomersListResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    CustomersCreateResponse:
      oneOf:
        - $ref: '#/components/schemas/CustomerOfpi'
        - $ref: '#/components/schemas/CustomerPse'
    CustomersCreate400Response:
      type: array
      items:
        $ref: '#/components/schemas/400ValidationError'
    CustomersCreate401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    CustomersCreate500Response:
      type: array
      items:
        $ref: '#/components/schemas/500UnexpectedError'
    CustomersGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/CustomerOfpi'
        - $ref: '#/components/schemas/CustomerPse'
    CustomersGetDetails401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    CustomersGetDetails404Response:
      type: array
      items:
        $ref: '#/components/schemas/404NotFoundError'
    BankAccountsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    BankAccountsCreateResponse:
      oneOf:
        - $ref: '#/components/schemas/BankAccountOfpiResponse'
        - $ref: '#/components/schemas/BankAccountPseResponse'
    BankAccountsCreate400Response:
      type: array
      items:
        $ref: '#/components/schemas/400ValidationError'
    BankAccountsCreate401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    BankAccountsCreate408Response:
      type: array
      items:
        $ref: '#/components/schemas/408RequestTimeoutError'
    BankAccountsCreate500Response:
      type: array
      items:
        $ref: '#/components/schemas/500UnexpectedError'
    BankAccountsGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/BankAccountOfpiResponse'
        - $ref: '#/components/schemas/BankAccountPseResponse'
    BankAccountsGetDetails401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    BankAccountsGetDetails404Response:
      type: array
      items:
        $ref: '#/components/schemas/404NotFoundError'
    PaymentLinksListResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentLinksCreateResponse:
      oneOf:
        - $ref: '#/components/schemas/PaymentLinkOfpi'
        - $ref: '#/components/schemas/PaymentLinkPse'
    PaymentLinksCreate400Response:
      type: array
      items:
        $ref: '#/components/schemas/400ValidationError'
    PaymentLinksCreate401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentLinksCreate408Response:
      type: array
      items:
        $ref: '#/components/schemas/408RequestTimeoutError'
    PaymentLinksCreate500Response:
      type: array
      items:
        $ref: '#/components/schemas/500UnexpectedError'
    PaymentLinksGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/PaymentLinkOfpi'
        - $ref: '#/components/schemas/PaymentLinkPse'
    PaymentLinksGetDetails401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentLinksGetDetails404Response:
      type: array
      items:
        $ref: '#/components/schemas/404NotFoundError'
    PaymentIntentsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentIntentsCreateResponse:
      oneOf:
        - $ref: '#/components/schemas/PaymentIntentPse'
    PaymentIntentsCreate400Response:
      type: array
      items:
        $ref: '#/components/schemas/400ValidationError'
    PaymentIntentsCreate401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentIntentsCreate408Response:
      type: array
      items:
        $ref: '#/components/schemas/408RequestTimeoutError'
    PaymentIntentsCreate500Response:
      type: array
      items:
        $ref: '#/components/schemas/500UnexpectedError'
    PaymentIntentsGetDetailsResponse:
      oneOf:
        - $ref: '#/components/schemas/PaymentIntentPse'
    PaymentIntentsGetDetails401Response:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentIntentsGetDetails404Response:
      type: array
      items:
        $ref: '#/components/schemas/404NotFoundError'
    PaymentIntentsCompleteResponse:
      oneOf:
        - $ref: '#/components/schemas/PaymentIntentPse'
    PaymentIntentsComplete400Response:
      type: array
      items:
        $ref: '#/components/schemas/400ValidationError'
    PaymentIntentsComplete404Response:
      type: array
      items:
        $ref: '#/components/schemas/404NotFoundError'
    PaymentTransactionsListResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentTransactionsGetDetailsResponse:
      type: array
      items:
        $ref: '#/components/schemas/401UnauthorizedError'
    PaymentTransactionsGetDetails404Response:
      type: array
      items:
        $ref: '#/components/schemas/404NotFoundError'
  examples:
    AccountsBankingChecking:
      summary: Checking Account
      description: Example of a checking account.
      value:
        - id: c21f3914-bcbe-44c4-a2e8-a5e33f6888d4
          link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          category: CHECKING_ACCOUNT
          balance_type: ASSET
          type: Cuentas de efectivo
          name: Cuenta Perfiles- M.N.- - ERB-237
          number: '2180700688677950'
          balance:
            available: 4523.48
            current: 4523.48
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: CLABE
          public_identification_value: '2180700008677950'
          last_accessed_at: '2022-02-01T20:25:47.307911Z'
          credit_data: null
          loan_data: null
          funds_data: null
    AccountsBankingCreditCard:
      summary: Credit Card Account
      description: Example of a credit card account.
      value:
        - id: 0f82c5db-13a2-43c7-a69a-e036160aba3a
          link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          category: CREDIT_CARD
          balance_type: LIABILITY
          type: Tarjetas de cr√©dito
          name: Erebor Gold
          number: null
          balance:
            available: 1550.15
            current: 4049.85
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: '2022-02-01T20:25:47.307911Z'
          credit_data:
            collected_at: '2022-02-09T08:45:50.406032Z'
            credit_limit: 15600
            cutting_date: '2021-04-11'
            next_payment_date: '2021-03-31'
            minimum_payment: 690
            no_interest_payment: 11550.15
            interest_rate: 4
            monthly_payment: null
            last_payment_date: null
            last_period_balance: null
          loan_data: null
          funds_data: null
    AccountsBankingLoan:
      summary: Loan Account
      description: Example of a loan account.
      value:
        - id: 0f82c5db-13a2-43c7-a69a-e036160aba3aX
          link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          category: LOAN_ACCOUNT
          balance_type: LIABILITY
          type: Cr√©ditos
          name: Cuenta n√≥mina
          number: '72964044'
          balance:
            available: 34708.36
            current: 34708.36
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: ACCOUNT_NUMBER
          public_identification_value: '217035843284091420'
          last_accessed_at: '2022-02-01T20:25:47.307911Z'
          credit_data: null
          loan_data:
            collected_at: '2022-02-09T08:45:50.406032Z'
            loan_type: SFH
            contract_amount: 202000
            principal: 192000
            outstanding_principal: 142000
            outstanding_balance: 164000
            payment_day: '17'
            interest_rates:
              - name: jurosEfetivo
                type: MONTHLY
                value: 7.85
            fees:
              - type: OPERATION_FEE
                value: 5.6
            monthly_payment: 1000
            number_of_installments_total: 50
            number_of_installments_outstanding: 41
            contract_start_date: '2018-01-01'
            contract_end_date: '2027-10-01'
            contract_number: ER8072930097
          funds_data: null
    AccountsBankingPension:
      summary: Pension Account
      description: Example of a pension account.
      value:
        - id: 3d5b0f90-90df-455d-a647-5b74feb746f6
          link: fbbb5ea7-4605-437f-b5c5-667fd037a303
          institution:
            name: erebor_br_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          category: PENSION_FUND_ACCOUNT
          balance_type: ASSET
          type: Contas
          name: Conta corrente
          number: '37903487'
          balance:
            available: 26305.33
            current: 26305.33
          currency: BRL
          bank_product_id: null
          internal_identification: null
          public_identification_name: PENSION_PLAN_ID
          public_identification_value: '626249048387247512'
          last_accessed_at: '2021-03-09T08:19:05.000Z'
          credit_data: null
          loan_data: null
          funds_data:
            - collected_at: '2022-02-09T08:45:50.406032Z'
              name: CICLO DE VIDA 2040 I
              type: PGBL
              balance: 94793
              percentage: 9
              public_identifications:
                - name: CNPJ
                  value: 11.233.333/4424-01
                - name: SUSEP
                  value: 13311.2333222/3333-44
            - collected_at: '2022-02-09T08:45:50.406032Z'
              name: CICLO DE VIDA 2020 I
              type: PGBL
              balance: 50834
              percentage: 91
              public_identifications:
                - name: CNPJ
                  value: 11.222.333/4444-02
                - name: SUSEP
                  value: 11111.222222/3333-44
    AccountsBankingSavings:
      summary: Savings Account
      description: Example of a savings account.
      value:
        - id: 3d5b0f90-90df-455d-a647-5b74feb746f6X
          link: fbbb5ea7-4605-437f-b5c5-667fd037a303
          institution:
            name: erebor_co_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          category: SAVINGS_ACCOUNT
          balance_type: ASSET
          type: Cuenta de Ahorro
          name: Cuenta de Ahorro
          number: '13166008'
          balance:
            available: 4978436.05
            current: 4978436.05
          currency: COP
          bank_product_id: null
          internal_identification: null
          public_identification_name: ACCOUNT_NUMBER
          public_identification_value: '260825906'
          last_accessed_at: '2021-03-09T10:28:40.000Z'
          credit_data: null
          loan_data: null
          funds_data: null
    AccountsBankingCheckingDetail:
      summary: Checking Account
      description: Example of a checking account.
      value:
        id: c21f3914-bcbe-44c4-a2e8-a5e33f6888d4X
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        category: CHECKING_ACCOUNT
        balance_type: ASSET
        type: Cuentas de efectivo
        name: Cuenta Perfiles- M.N.- - ERB-237
        number: '2180700688677950'
        balance:
          available: 4523.48
          current: 4523.48
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: CLABE
        public_identification_value: '2180700008677950'
        last_accessed_at: '2022-02-01T20:25:47.307911Z'
        credit_data: null
        loan_data: null
        funds_data: null
    AccountsBankingCreditCardDetail:
      summary: Credit Card Account
      description: Example of a credit card account.
      value:
        id: 0f82c5db-13a2-43c7-a69a-e036160aba3aX
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        category: CREDIT_CARD
        balance_type: LIABILITY
        type: Tarjetas de cr√©dito
        name: Erebor Gold
        number: null
        balance:
          available: 1550.15
          current: 4049.85
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: null
        public_identification_value: null
        last_accessed_at: '2022-02-01T20:25:47.307911Z'
        credit_data:
          collected_at: '2022-02-09T08:45:50.406032Z'
          credit_limit: 15600
          cutting_date: '2021-04-11'
          next_payment_date: '2021-03-31'
          minimum_payment: 690
          no_interest_payment: 11550.15
          interest_rate: 4
          monthly_payment: null
          last_payment_date: null
          last_period_balance: null
        loan_data: null
        funds_data: null
    AccountsBankingLoanDetail:
      summary: Loan Account
      description: Example of a loan account.
      value:
        id: 0f82c5db-13a2-43c7-a69a-e036160aba3aX
        link: 57f212dc-1ba4-407f-b7f0-15a5e5ff17ae
        institution:
          name: erebor_mx_retail
          type: bank
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        category: LOAN_ACCOUNT
        balance_type: LIABILITY
        type: Cr√©ditos
        name: Cuenta n√≥mina
        number: '72964044'
        balance:
          available: 34708.36
          current: 34708.36
        currency: MXN
        bank_product_id: null
        internal_identification: null
        public_identification_name: ACCOUNT_NUMBER
        public_identification_value: '217035843284091420'
        last_accessed_at: '2022-02-01T20:25:47.307911Z'
        credit_data: null
        loan_data:
          collected_at: '2022-02-09T08:45:50.406032Z'
          loan_type: SFH
          contract_amount: 202000
          principal: 192000
          outstanding_principal: 142000
          outstanding_balance: 164000
          payment_day: '17'
          interest_rates:
            - name: jurosEfetivo
              type: MONTHLY
              value: 7.85
          fees:
            - type: OPERATION_FEE
              value: 5.6
          monthly_payment: 1000
          number_of_installments_total: 50
          number_of_installments_outstanding: 41
          contract_start_date: '2018-01-01'
          contract_end_date: '2027-10-01'
          contract_number: ER8072930097
        funds_data: null
    AccountsBankingPensionDetail:
      summary: Pension Account
      description: Example of a pension account.
      value:
        id: 3d5b0f90-90df-455d-a647-5b74feb746f6X
        link: fbbb5ea7-4605-437f-b5c5-667fd037a303
        institution:
          name: erebor_br_retail
          type: bank
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        category: PENSION_FUND_ACCOUNT
        balance_type: ASSET
        type: Contas
        name: Conta corrente
        number: '37903487'
        balance:
          available: 26305.33
          current: 26305.33
        currency: BRL
        bank_product_id: null
        internal_identification: null
        public_identification_name: PENSION_PLAN_ID
        public_identification_value: '626249048387247512'
        last_accessed_at: '2021-03-09T08:19:05.000Z'
        credit_data: null
        loan_data: null
        funds_data:
          - collected_at: '2022-02-09T08:45:50.406032Z'
            name: CICLO DE VIDA 2040 I
            type: PGBL
            balance: 94793
            percentage: 9
            public_identifications:
              - name: CNPJ
                value: 11.233.333/4424-01
              - name: SUSEP
                value: 13311.2333222/3333-44
          - collected_at: '2022-02-09T08:45:50.406032Z'
            name: CICLO DE VIDA 2020 I
            type: PGBL
            balance: 50834
            percentage: 91
            public_identifications:
              - name: CNPJ
                value: 11.222.333/4444-02
              - name: SUSEP
                value: 11111.222222/3333-44
    AccountsBankingSavingsDetail:
      summary: Savings Account
      description: Example of a savings account.
      value:
        id: 3d5b0f90-90df-455d-a647-5b74feb746f6X
        link: fbbb5ea7-4605-437f-b5c5-667fd037a303
        institution:
          name: erebor_co_retail
          type: bank
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        category: SAVINGS_ACCOUNT
        balance_type: ASSET
        type: Cuenta de Ahorro
        name: Cuenta de Ahorro
        number: '13166008'
        balance:
          available: 4978436.05
          current: 4978436.05
        currency: COP
        bank_product_id: null
        internal_identification: null
        public_identification_name: ACCOUNT_NUMBER
        public_identification_value: '260825906'
        last_accessed_at: '2021-03-09T10:28:40.000Z'
        credit_data: null
        loan_data: null
        funds_data: null
    TransactionsCheckingPaginated:
      summary: Checking Account Transaction
      description: An example of a checking account transaction
      value:
        count: 198
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - description: Transferencia interbancaria
            id: e5588958-48f2-427c-9300-945207532f5d
            account:
              id: 02589c41-ba22-4d44-8558-8111cc751318
              link: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution:
                name: erebor_mx_retail
                type: bank
              collected_at: '2022-02-09T08:45:50.406032Z'
              created_at: '2022-02-09T08:46:20.406032Z'
              internal_identification: '996685090015'
              name: CUENTA NARANJA LITE +
              number: '996685090015'
              type: CUENTA NARANJA LITE +
              category: CHECKING_ACCOUNT
              bank_product_id: '46'
              public_identification_name: CLABE
              public_identification_value: '058597000010485108'
              currency: MXN
              balance:
                current: 0
                available: 0
              loan_data: null
              credit_data: null
              last_accessed_at: null
              balance_type: ASSET
            created_at: '2022-07-20T22:09:35.556519Z'
            category: Income & Payments
            subcategory: Freelance
            merchant:
              logo: https://logo.clearbit.com/asesor-contable.es
              website: https://merchants-r-us.com
              merchant_name: Merchants R Us Global
            type: INFLOW
            amount: 932.5
            status: UNCATEGORIZED
            balance: null
            currency: MXN
            reference: '085904452810319225'
            value_date: '2022-07-11'
            collected_at: '2022-07-20T22:09:33.767574Z'
            observations: null
            accounting_date: null
            internal_identification: LCzHexIyHi
    TransactionsSavingsPaginated:
      summary: Savings Account Transaction
      description: An example of a savings account transaction
      value:
        count: 198
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - description: Interes
            id: e5588958-48f2-427c-9300-945207532f5dX
            account:
              id: 02589c41-ba22-4d44-8558-8111cc751318X
              link: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution:
                name: erebor_mx_retail
                type: bank
              collected_at: '2022-02-09T08:45:50.406032Z'
              created_at: '2022-02-09T08:46:20.406032Z'
              internal_identification: '996685090015'
              name: Mi ahorro Erebor
              number: '997468860036'
              type: null
              category: SAVINGS_ACCOUNT
              bank_product_id: null
              public_identification_name: CLABE
              public_identification_value: '058597000011543422'
              currency: MXN
              balance:
                current: 4.09
                available: 4.09
              loan_data: null
              credit_data: null
              last_accessed_at: null
              balance_type: ASSET
            created_at: '2022-07-20T22:09:35.556519Z'
            category: Income & Payments
            subcategory: Freelance
            merchant:
              logo: https://logo.clearbit.com/asesor-contable.es
              website: https://merchants-r-us.com
              merchant_name: Merchants R Us Global
            type: INFLOW
            amount: 4.09
            status: UNCATEGORIZED
            balance: null
            currency: MXN
            reference: null
            value_date: '2022-07-11'
            collected_at: '2022-07-20T22:09:33.767574Z'
            observations: null
            accounting_date: null
            internal_identification: 89608418
    TransactionsCreditCardPaginated:
      summary: Credit Card Transaction
      description: An example of a credit card transaction
      value:
        count: 198
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - description: SEVEN BUDDHAS RFC:XXXXXXXXXX
            account:
              id: 02589c41-ba22-4d44-8558-8111cc751318X
              link: 30cb4806-6e00-48a4-91c9-ca55968576c8
              institution:
                name: erebor_mx_retail
                type: bank
              collected_at: '2022-02-09T08:45:50.406032Z'
              created_at: '2022-02-09T08:46:20.406032Z'
              category: CREDIT_CARD
              type: Tarjetas de cr√©dito
              name: Erebor Gold
              number: null
              balance:
                current: 5874.13
                available: 5621.12
              currency: MXN
              bank_product_id: null
              internal_identification: null
              public_identification_name: null
              public_identification_value: null
              last_accessed_at: '2021-03-09T10:28:40.000Z'
              balance_type: LIABILITY
              credit_data:
                credit_limit: 192000
                collected_at: '2022-02-09T08:45:50.406032Z'
                cutting_date: '2019-12-11'
                next_payment_date: '2019-12-01'
                minimum_payment: 2400
                no_interest_payment: 37390.83
                monthly_payment: null
                end_date: null
                last_payment_date: null
                last_period_balance: null
                interest_rate: 4
              loan_data: null
              funds_data: null
            collected_at: '2022-02-09T08:45:50.406032Z'
            value_date: '2019-10-23'
            accounting_date: '2019-10-23T13:01:41.941Z'
            amount: 2145.45
            balance: 16907.96
            currency: MXN
            observations: OPTIONAL OBSERVATIONS
            category: Income & Payments
            subcategory: Freelance
            merchant:
              logo: https://logo.clearbit.com/asesor-contable.es
              website: https://merchants-r-us.com
              merchant_name: Merchants R Us Global
            reference: '8703'
            type: OUTFLOW
            status: PROCESSED
            credit_card_data:
              bill_name: apr-2020
              previous_bill_total: '2000.00'
              collected_at: '2022-02-09T08:45:50.406032Z'
    TransactionsChecking:
      summary: Checking Account Transaction
      description: An example of a checking account transaction
      value:
        - description: Transferencia interbancaria
          id: e5588958-48f2-427c-9300-945207532f5dX
          account:
            id: 02589c41-ba22-4d44-8558-8111cc751318X
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: erebor_mx_retail
              type: bank
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            internal_identification: '996685090015'
            name: CUENTA NARANJA LITE +
            number: '996685090015'
            type: CUENTA NARANJA LITE +
            category: CHECKING_ACCOUNT
            bank_product_id: '46'
            public_identification_name: CLABE
            public_identification_value: '058597000010485108'
            currency: MXN
            balance:
              current: 0
              available: 0
            loan_data: null
            credit_data: null
            last_accessed_at: null
            balance_type: ASSET
          created_at: '2022-07-20T22:09:35.556519Z'
          category: Income & Payments
          subcategory: Freelance
          merchant:
            logo: https://logo.clearbit.com/asesor-contable.es
            website: https://merchants-r-us.com
            merchant_name: Merchants R Us Global
          type: INFLOW
          amount: 932.5
          status: UNCATEGORIZED
          balance: null
          currency: MXN
          reference: '085904452810319225'
          value_date: '2022-07-11'
          collected_at: '2022-07-20T22:09:33.767574Z'
          observations: null
          accounting_date: null
          internal_identification: LCzHexIyHi
    TransactionsSavings:
      summary: Savings Account Transaction
      description: An example of a savings account transaction
      value:
        - description: Interes
          id: e5588958-48f2-427c-9300-945207532f5dX
          account:
            id: 02589c41-ba22-4d44-8558-8111cc751318X
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: erebor_mx_retail
              type: bank
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            internal_identification: '996685090015'
            name: Mi ahorro Erebor
            number: '997468860036'
            type: null
            category: SAVINGS_ACCOUNT
            bank_product_id: null
            public_identification_name: CLABE
            public_identification_value: '058597000011543422'
            currency: MXN
            balance:
              current: 4.09
              available: 4.09
            loan_data: null
            credit_data: null
            last_accessed_at: null
            balance_type: ASSET
          created_at: '2022-07-20T22:09:35.556519Z'
          category: Income & Payments
          subcategory: Freelance
          merchant:
            logo: https://logo.clearbit.com/asesor-contable.es
            website: https://merchants-r-us.com
            merchant_name: Merchants R Us Global
          type: INFLOW
          amount: 4.09
          status: UNCATEGORIZED
          balance: null
          currency: MXN
          reference: null
          value_date: '2022-07-11'
          collected_at: '2022-07-20T22:09:33.767574Z'
          observations: null
          accounting_date: null
          internal_identification: 89608418
    TransactionsCreditCard:
      summary: Credit Card Transaction
      description: An example of a credit card transaction
      value:
        - description: SEVEN BUDDHAS RFC:XXXXXXXXXX
          id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8
          account:
            id: 02589c41-ba22-4d44-8558-8111cc751318X
            link: 30cb4806-6e00-48a4-91c9-ca55968576c8
            institution:
              name: erebor_mx_retail
              type: bank
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            category: CREDIT_CARD
            type: Tarjetas de cr√©dito
            name: Erebor Gold
            number: null
            balance:
              current: 5874.13
              available: 5621.12
            currency: MXN
            bank_product_id: null
            internal_identification: null
            public_identification_name: null
            public_identification_value: null
            last_accessed_at: '2021-03-09T10:28:40.000Z'
            balance_type: LIABILITY
            credit_data:
              credit_limit: 192000
              collected_at: '2022-02-09T08:45:50.406032Z'
              cutting_date: '2019-12-11'
              next_payment_date: '2019-12-01'
              minimum_payment: 2400
              no_interest_payment: 37390.83
              monthly_payment: null
              end_date: null
              last_payment_date: null
              last_period_balance: null
              interest_rate: 4
            loan_data: null
            funds_data: null
          collected_at: '2022-02-09T08:45:50.406032Z'
          value_date: '2019-10-23'
          accounting_date: '2019-10-23T13:01:41.941Z'
          amount: 2145.45
          balance: 16907.96
          currency: MXN
          observations: OPTIONAL OBSERVATIONS
          category: Income & Payments
          subcategory: Freelance
          merchant:
            logo: https://logo.clearbit.com/asesor-contable.es
            website: https://merchants-r-us.com
            merchant_name: Merchants R Us Global
          reference: '8703'
          type: OUTFLOW
          status: PROCESSED
          credit_card_data:
            bill_name: apr-2020
            previous_bill_total: '2000.00'
            collected_at: '2022-02-09T08:45:50.406032Z'
    TransactionsCheckingDetail:
      summary: Checking Account Transaction
      description: An example of a checking account transaction
      value:
        description: Transferencia interbancaria
        id: e5588958-48f2-427c-9300-945207532f5dX
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318X
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          internal_identification: '996685090015'
          name: CUENTA NARANJA LITE +
          number: '996685090015'
          type: CUENTA NARANJA LITE +
          category: CHECKING_ACCOUNT
          bank_product_id: '46'
          public_identification_name: CLABE
          public_identification_value: '058597000010485108'
          currency: MXN
          balance:
            current: 0
            available: 0
          loan_data: null
          credit_data: null
          last_accessed_at: null
          balance_type: ASSET
        created_at: '2022-07-20T22:09:35.556519Z'
        category: Income & Payments
        subcategory: Freelance
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        type: INFLOW
        amount: 932.5
        status: UNCATEGORIZED
        balance: null
        currency: MXN
        reference: '085904452810319225'
        value_date: '2022-07-11'
        collected_at: '2022-07-20T22:09:33.767574Z'
        observations: null
        accounting_date: null
        internal_identification: LCzHexIyHi
    TransactionsSavingsDetail:
      summary: Savings Account Transaction
      description: An example of a savings account transaction
      value:
        description: Interes
        id: e5588958-48f2-427c-9300-945207532f5dX
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318X
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          internal_identification: '996685090015'
          name: Mi ahorro Erebor
          number: '997468860036'
          type: null
          category: SAVINGS_ACCOUNT
          bank_product_id: null
          public_identification_name: CLABE
          public_identification_value: '058597000011543422'
          currency: MXN
          balance:
            current: 4.09
            available: 4.09
          loan_data: null
          credit_data: null
          last_accessed_at: null
          balance_type: ASSET
        created_at: '2022-07-20T22:09:35.556519Z'
        category: Income & Payments
        subcategory: Freelance
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        type: INFLOW
        amount: 4.09
        status: UNCATEGORIZED
        balance: null
        currency: MXN
        reference: null
        value_date: '2022-07-11'
        collected_at: '2022-07-20T22:09:33.767574Z'
        observations: null
        accounting_date: null
        internal_identification: 89608418
    TransactionsCreditCardDetail:
      summary: Credit Card Transaction
      description: An example of a credit card transaction
      value:
        description: SEVEN BUDDHAS RFC:XXXXXXXXXX
        id: 9e432f18-36ca-4bd6-a3f3-1971e58dc1e8X
        account:
          id: 02589c41-ba22-4d44-8558-8111cc751318X
          link: 30cb4806-6e00-48a4-91c9-ca55968576c8
          institution:
            name: erebor_mx_retail
            type: bank
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          category: CREDIT_CARD
          type: Tarjetas de cr√©dito
          name: Erebor Gold
          number: null
          balance:
            current: 5874.13
            available: 5621.12
          currency: MXN
          bank_product_id: null
          internal_identification: null
          public_identification_name: null
          public_identification_value: null
          last_accessed_at: '2021-03-09T10:28:40.000Z'
          balance_type: LIABILITY
          credit_data:
            credit_limit: 192000
            collected_at: '2022-02-09T08:45:50.406032Z'
            cutting_date: '2019-12-11'
            next_payment_date: '2019-12-01'
            minimum_payment: 2400
            no_interest_payment: 37390.83
            monthly_payment: null
            end_date: null
            last_payment_date: null
            last_period_balance: null
            interest_rate: 4
          loan_data: null
          funds_data: null
        collected_at: '2022-02-09T08:45:50.406032Z'
        value_date: '2019-10-23'
        accounting_date: '2019-10-23T13:01:41.941Z'
        amount: 2145.45
        balance: 16907.96
        currency: MXN
        observations: OPTIONAL OBSERVATIONS
        merchant:
          logo: https://logo.clearbit.com/asesor-contable.es
          website: https://merchants-r-us.com
          merchant_name: Merchants R Us Global
        category: Income & Payments
        subcategory: Freelance
        reference: '8703'
        type: OUTFLOW
        status: PROCESSED
        credit_card_data:
          bill_name: apr-2020
          previous_bill_total: '2000.00'
          collected_at: '2022-02-09T08:45:50.406032Z'
    BalancesExamplePaginated:
      summary: Balance Example (Checking Account)
      description: Example of a balance paginated response.
      value:
        count: 385
        next: https://sandbox.belvo.com/api/balances/?page=2
        previous: null
        results:
          - id: b834e69b-1aa4-465d-969c-07c886a4fbed
            account:
              id: 26428311-7108-40b8-a22b-c310187dd005
              link: b834e69b-1aa4-465d-969c-07c886a4fbed
              institution:
                name: erebor_br_retail
                type: bank
              created_at: '2021-10-27T16:18:15.591647Z'
              name: Erebor Gold
              type: null
              agency: '0009'
              number: 7889044-1
              balance:
                current: 146.81
                available: 146.81
              category: CHECKING_ACCOUNT
              currency: BRL
              loan_data: null
              credit_data: null
              balance_type: ASSET
              collected_at: '2022-06-17T03:20:41.300075Z'
              bank_product_id: null
              last_accessed_at: null
              internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
              public_identification_name: AGENCY/ACCOUNT
              public_identification_value: 0009/7889044-1
            collected_at: '2022-04-06T23:30:51.282174+00:00'
            statement: null
            value_date: '2022-04-04'
            current_balance: 4.25
            balance: 4.25
    BalancesExample:
      summary: Balance Example (Checking Account)
      description: Example of a balance response.
      value:
        - id: b834e69b-1aa4-465d-969c-07c886a4fbedX
          account:
            id: 26428311-7108-40b8-a22b-c310187dd005X
            link: b834e69b-1aa4-465d-969c-07c886a4fbed
            institution:
              name: erebor_br_retail
              type: bank
            created_at: '2021-10-27T16:18:15.591647Z'
            name: Erebor Gold
            type: null
            agency: '0009'
            number: 7889044-1
            balance:
              current: 146.81
              available: 146.81
            category: CHECKING_ACCOUNT
            currency: BRL
            loan_data: null
            credit_data: null
            balance_type: ASSET
            collected_at: '2022-06-17T03:20:41.300075Z'
            bank_product_id: null
            last_accessed_at: null
            internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
            public_identification_name: AGENCY/ACCOUNT
            public_identification_value: 0009/7889044-1
          collected_at: '2022-04-06T23:30:51.282174+00:00'
          statement: null
          value_date: '2022-04-04'
          current_balance: 4.25
          balance: 4.25
    BalancesExampleDetail:
      summary: Balance Example (Checking Account)
      description: Example of a balance response.
      value:
        id: b834e69b-1aa4-465d-969c-07c886a4fbedX
        account:
          id: 26428311-7108-40b8-a22b-c310187dd005X
          link: b834e69b-1aa4-465d-969c-07c886a4fbed
          institution:
            name: erebor_br_retail
            type: bank
          created_at: '2021-10-27T16:18:15.591647Z'
          name: Erebor Gold
          type: null
          agency: '0009'
          number: 7889044-1
          balance:
            current: 146.81
            available: 146.81
          category: CHECKING_ACCOUNT
          currency: BRL
          loan_data: null
          credit_data: null
          balance_type: ASSET
          collected_at: '2022-06-17T03:20:41.300075Z'
          bank_product_id: null
          last_accessed_at: null
          internal_identification: 9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c
          public_identification_name: AGENCY/ACCOUNT
          public_identification_value: 0009/7889044-1
        collected_at: '2022-04-06T23:30:51.282174+00:00'
        statement: null
        value_date: '2022-04-04'
        current_balance: 4.25
        balance: 4.25
    OwnerBankingAccountPaginated:
      summary: Banking
      description: An example of a banking account owner.
      value:
        count: 108
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            display_name: Maria Martinez Martin
            first_name: null
            last_name: null
            second_last_name: null
            email: maria@acme.com
            phone_number: '90090508357'
            address: |-
              Retorno Gran Canaria 453 723
              Cancun, COL 10447
            document_id:
              document_type: CPF
              document_number: 235578435-S
            internal_identification: null
    OwnerBankingAccount:
      summary: Banking
      description: An example of a banking account owner.
      value:
        - id: 2b22f123-7c3a-4518-9ac2-863eb5d4613c
          link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          display_name: Maria Martinez Martin
          first_name: null
          last_name: null
          second_last_name: null
          email: maria@acme.com
          phone_number: '90090508357'
          address: |-
            Retorno Gran Canaria 453 723
            Cancun, COL 10447
          document_id:
            document_type: CPF
            document_number: 235578435-S
          internal_identification: null
    OwnerBankingAccountDetail:
      summary: Banking
      description: An example of a banking account owner.
      value:
        id: 2b22f123-7c3a-4518-9ac2-863eb5d4613cX
        link: c38fb126-fc98-4d6c-8c80-587a97dd56cf
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        display_name: Maria Martinez Martin
        first_name: null
        last_name: null
        second_last_name: null
        email: maria@acme.com
        phone_number: '90090508357'
        address: |-
          Retorno Gran Canaria 453 723
          Cancun, COL 10447
        document_id:
          document_type: CPF
          document_number: 235578435-S
        internal_identification: null
    InvoiceIngresoPaginated:
      summary: Invoice Ingreso
      description: Example of an *Igreso* type invoice.
      value:
        count: 110
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - version: '3.3'
            id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cb
            link: 1bd948f7-245d-4313-b604-34d1044cb908
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_date: '2020-12-24'
            status: Vigente
            invoice_type: Ingreso
            type: OUTFLOW
            sender_id: GHTF980303F7
            sender_name: Roberto Martinez Diaz
            sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
            receiver_id: MNMK3203409H1
            receiver_name: ACNE SA DE CV
            receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
            cancelation_status: null
            cancelation_update_date: null
            certification_date: '2020-12-24'
            certification_authority: FGV330542BG6
            payment_type: '04'
            payment_type_description: null
            payment_method: PUE
            usage: G03
            place_of_issue: '11000'
            invoice_details:
              - description: Servicios de mensajer√≠a.
                product_identification: '78102206'
                quantity: 1
                unit_code: E48
                unit_description: Unidad de servicio
                unit_amount: 25
                pre_tax_amount: 25
                tax_percentage: 16
                tax_amount: 4
                total_amount: 29
                retained_taxes: []
                collected_at: '2022-02-09T08:45:50.406032Z'
            currency: MXN
            subtotal_amount: 25
            exchange_rate: 1
            tax_amount: 4
            discount_amount: 0
            total_amount: 29
            payments: []
            payroll: null
            folio: '28'
            xml: '=XML-STRING='
            warnings:
              code: warning_code
              message: warning message
    InvoicePagoPaginated:
      summary: Invoice Pago
      description: Example of a *Pago* type invoice.
      value:
        count: 110
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - version: '3.3'
            id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
            link: 1bd948f7-245d-4313-b604-34d1044cb908
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_date: '2020-12-24'
            status: Vigente
            invoice_type: Pago
            type: OUTFLOW
            sender_id: GHTF980303F7
            sender_name: Roberto Martinez Diaz
            sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
            receiver_id: MNMK3203409H1
            receiver_name: ACNE SA DE CV
            receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
            cancelation_status: null
            cancelation_update_date: null
            certification_date: '2020-12-24'
            certification_authority: FGV330542BG6
            payment_type: null
            payment_type_description: null
            payment_method: null
            usage: P01
            place_of_issue: '11000'
            invoice_details:
              - description: Pago
                product_identification: '84111506'
                quantity: 1
                unit_amount: 0
                unit_code: ACT
                unit_description: null
                pre_tax_amount: 0
                tax_percentage: 0
                tax_amount: 0
                total_amount: 0
                retained_taxes: []
                collected_at: '2022-02-09T08:45:50.406032Z'
            currency: MXN
            subtotal_amount: 0
            exchange_rate: null
            tax_amount: 0
            discount_amount: 0
            total_amount: 0
            payments:
              - date: '2020-03-17T12:00:00.000Z'
                payment_type: '03'
                currency: BRL
                exchange_rate: '3.75'
                amount: 8000.5
                operation_number: '831840'
                beneficiary_rfc: BNM840515VB1
                beneficiary_account_number: '12343453245633'
                payer_rfc: BKJM840515VB1
                payer_account_number: '13343663245699'
                payer_bank_name: CITI BANAMEX
                related_documents:
                  - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                    currency: MXN
                    payment_method: PPD
                    installment: 1
                    previous_balance: 18877.84
                    amount_paid: 8000
                    outstanding_balance: 10877.84
            payroll: null
            folio: '28'
            xml: '=XML-STRING='
            warnings:
              code: warning_code
              message: warning message
    InvoiceNominaPaginated:
      summary: Invoice Nomina
      description: Example of a *Nomina* type invoice.
      value:
        count: 110
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - version: '3.3'
            id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
            link: 1bd948f7-245d-4313-b604-34d1044cb908
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_date: '2020-12-24'
            status: Vigente
            invoice_type: N√≥mina
            type: INFLOW
            sender_id: GHTF980303F7
            sender_name: ACNE SA DE CV
            sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
            receiver_id: MNMK3203409H1
            receiver_name: Roberto Martinez Diaz
            receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
            cancelation_status: null
            cancelation_update_date: null
            certification_date: '2020-12-24'
            certification_authority: FGV330542BG6
            payment_type: '99'
            payment_type_description: null
            payment_method: PUE
            usage: P01
            place_of_issue: '11000'
            invoice_details:
              - description: Pago de n√≥mina
                product_identification: '84111505'
                quantity: 1
                unit_code: ACT
                unit_description: null
                unit_amount: 20400.1
                total_amount: 20400.1
                pre_tax_amount: 20400.1
                tax_percentage: 0
                tax_amount: 0
                retained_taxes: []
                collected_at: '2022-02-09T08:45:50.406032Z'
            currency: MXN
            subtotal_amount: 20400.1
            exchange_rate: 1
            tax_amount: 0
            discount_amount: 5000
            total_amount: 15400.1
            payments: []
            payroll:
              version: '1.2'
              days: 30
              type: O
              amount: 20400.1
              date_to: '2020-12-31'
              date_from: '2020-12-01'
              collected_at: '2022-02-09T08:45:50.406032Z'
              payment_date: '2020-12-24'
            folio: '28'
            xml: '=XML-STRING='
            warnings:
              code: warning_code
              message: warning message
    InvoiceEgresoPaginated:
      summary: Invoice Egreso
      description: Example of an *Egreso* type invoice.
      value:
        count: 110
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - version: '3.3'
            id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
            link: 1bd948f7-245d-4313-b604-34d1044cb908
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_date: '2020-12-24'
            status: Vigente
            invoice_type: Egreso
            type: INFLOW
            sender_id: GHTF980303F7
            sender_name: Roberto Martinez Diaz
            sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
            receiver_id: MNMK3203409H1
            receiver_name: ACNE SA DE CV
            receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
            cancelation_status: null
            cancelation_update_date: null
            certification_date: '2020-12-24'
            certification_authority: FGV330542BG6
            payment_type: '04'
            payment_type_description: null
            payment_method: PUE
            usage: G03
            place_of_issue: '11000'
            invoice_details:
              - description: Reembolso del servicio
                product_identification: '78111500'
                unit_code: E48
                unit_description: Unidad de servicio
                quantity: 1
                unit_amount: 25
                pre_tax_amount: 25
                tax_percentage: 16
                tax_amount: 4
                total_amount: 29
                retained_taxes: []
                collected_at: '2022-02-09T08:45:50.406032Z'
            currency: MXN
            subtotal_amount: 25
            exchange_rate: 1
            tax_amount: 4
            discount_amount: 0
            total_amount: 29
            payments: []
            payroll: null
            folio: '28'
            xml: '=XML-STRING='
            warnings:
              code: warning_code
              message: warning message
    InvoiceTrasladoPaginated:
      summary: Invoice Traslado
      description: Example of a *Traslado* type invoice.
      value:
        count: 110
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - version: '3.3'
            id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
            link: 1bd948f7-245d-4313-b604-34d1044cb908
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
            invoice_date: '2020-12-24'
            status: Vigente
            invoice_type: Traslado
            type: INFLOW
            sender_id: GHTF980303F7
            sender_name: ACNE SA DE CV
            sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
            receiver_id: MNMK3203409H1
            receiver_name: CARGOS S.A. DE C.V.
            receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
            cancelation_status: null
            cancelation_update_date: null
            certification_date: '2020-12-24'
            certification_authority: FGV330542BG6
            payment_type: null
            payment_type_description: null
            payment_method: null
            usage: G03
            place_of_issue: '11000'
            invoice_details:
              - description: FLETE
                product_identification: '78101802'
                quantity: 1
                unit_code: E48
                unit_description: Unidad de servicio
                unit_amount: 21000
                pre_tax_amount: 21000
                tax_percentage: 16
                tax_amount: 0
                total_amount: 21000
                retained_taxes: []
                collected_at: '2022-02-09T08:45:50.406032Z'
            currency: MXN
            subtotal_amount: 0
            exchange_rate: 1
            tax_amount: 0
            discount_amount: 0
            total_amount: 0
            payments: []
            payroll: null
            folio: '28'
            xml: '=XML-STRING='
            warnings:
              code: warning_code
              message: warning message
    InvoiceIngreso:
      summary: Invoice Ingreso
      description: Example of an *Igreso* type invoice.
      value:
        - version: '3.3'
          id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: '2020-12-24'
          status: Vigente
          invoice_type: Ingreso
          type: OUTFLOW
          sender_id: GHTF980303F7
          sender_name: Roberto Martinez Diaz
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: ACNE SA DE CV
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: '2020-12-24'
          certification_authority: FGV330542BG6
          payment_type: '04'
          payment_type_description: null
          payment_method: PUE
          usage: G03
          place_of_issue: '11000'
          invoice_details:
            - description: Servicios de mensajer√≠a.
              product_identification: '78102206'
              quantity: 1
              unit_code: E48
              unit_description: Unidad de servicio
              unit_amount: 25
              pre_tax_amount: 25
              tax_percentage: 16
              tax_amount: 4
              total_amount: 29
              retained_taxes: []
              collected_at: '2022-02-09T08:45:50.406032Z'
          currency: MXN
          subtotal_amount: 25
          exchange_rate: 1
          tax_amount: 4
          discount_amount: 0
          total_amount: 29
          payments: []
          payroll: null
          folio: '28'
          xml: '=XML-STRING='
          warnings:
            code: warning_code
            message: warning message
    InvoicePago:
      summary: Invoice Pago
      description: Example of a *Pago* type invoice.
      value:
        - version: '3.3'
          id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: '2020-12-24'
          status: Vigente
          invoice_type: Pago
          type: OUTFLOW
          sender_id: GHTF980303F7
          sender_name: Roberto Martinez Diaz
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: ACNE SA DE CV
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: '2020-12-24'
          certification_authority: FGV330542BG6
          payment_type: null
          payment_type_description: null
          payment_method: null
          usage: P01
          place_of_issue: '11000'
          invoice_details:
            - description: Pago
              product_identification: '84111506'
              quantity: 1
              unit_amount: 0
              unit_code: ACT
              unit_description: null
              pre_tax_amount: 0
              tax_percentage: 0
              tax_amount: 0
              total_amount: 0
              retained_taxes: []
              collected_at: '2022-02-09T08:45:50.406032Z'
          currency: MXN
          subtotal_amount: 0
          exchange_rate: null
          tax_amount: 0
          discount_amount: 0
          total_amount: 0
          payments:
            - date: '2020-03-17T12:00:00.000Z'
              payment_type: '03'
              currency: BRL
              exchange_rate: '3.75'
              amount: 8000.5
              operation_number: '831840'
              beneficiary_rfc: BNM840515VB1
              beneficiary_account_number: '12343453245633'
              payer_rfc: BKJM840515VB1
              payer_account_number: '13343663245699'
              payer_bank_name: CITI BANAMEX
              related_documents:
                - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                  currency: MXN
                  payment_method: PPD
                  installment: 1
                  previous_balance: 18877.84
                  amount_paid: 8000
                  outstanding_balance: 10877.84
          payroll: null
          folio: '28'
          xml: '=XML-STRING='
          warnings:
            code: warning_code
            message: warning message
    InvoiceNomina:
      summary: Invoice Nomina
      description: Example of a *Nomina* type invoice.
      value:
        - version: '3.3'
          id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: '2020-12-24'
          status: Vigente
          invoice_type: N√≥mina
          type: INFLOW
          sender_id: GHTF980303F7
          sender_name: ACNE SA DE CV
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: Roberto Martinez Diaz
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: '2020-12-24'
          certification_authority: FGV330542BG6
          payment_type: '99'
          payment_type_description: null
          payment_method: PUE
          usage: P01
          place_of_issue: '11000'
          invoice_details:
            - description: Pago de n√≥mina
              product_identification: '84111505'
              quantity: 1
              unit_code: ACT
              unit_description: null
              unit_amount: 20400.1
              total_amount: 20400.1
              pre_tax_amount: 20400.1
              tax_percentage: 0
              tax_amount: 0
              retained_taxes: []
              collected_at: '2022-02-09T08:45:50.406032Z'
          currency: MXN
          subtotal_amount: 20400.1
          exchange_rate: 1
          tax_amount: 0
          discount_amount: 5000
          total_amount: 15400.1
          payments: []
          payroll:
            version: '1.2'
            days: 30
            type: O
            amount: 20400.1
            date_to: '2020-12-31'
            date_from: '2020-12-01'
            collected_at: '2022-02-09T08:45:50.406032Z'
            payment_date: '2020-12-24'
          folio: '28'
          xml: '=XML-STRING='
          warnings:
            code: warning_code
            message: warning message
    InvoiceEgreso:
      summary: Invoice Egreso
      description: Example of an *Egreso* type invoice.
      value:
        - version: '3.3'
          id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: '2020-12-24'
          status: Vigente
          invoice_type: Egreso
          type: INFLOW
          sender_id: GHTF980303F7
          sender_name: Roberto Martinez Diaz
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: ACNE SA DE CV
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: '2020-12-24'
          certification_authority: FGV330542BG6
          payment_type: '04'
          payment_type_description: null
          payment_method: PUE
          usage: G03
          place_of_issue: '11000'
          invoice_details:
            - description: Reembolso del servicio
              product_identification: '78111500'
              unit_code: E48
              unit_description: Unidad de servicio
              quantity: 1
              unit_amount: 25
              pre_tax_amount: 25
              tax_percentage: 16
              tax_amount: 4
              total_amount: 29
              retained_taxes: []
              collected_at: '2022-02-09T08:45:50.406032Z'
          currency: MXN
          subtotal_amount: 25
          exchange_rate: 1
          tax_amount: 4
          discount_amount: 0
          total_amount: 29
          payments: []
          payroll: null
          folio: '28'
          xml: '=XML-STRING='
          warnings:
            code: warning_code
            message: warning message
    InvoiceTraslado:
      summary: Invoice Traslado
      description: Example of a *Traslado* type invoice.
      value:
        - version: '3.3'
          id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
          link: 1bd948f7-245d-4313-b604-34d1044cb908
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
          invoice_date: '2020-12-24'
          status: Vigente
          invoice_type: Traslado
          type: INFLOW
          sender_id: GHTF980303F7
          sender_name: ACNE SA DE CV
          sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
          receiver_id: MNMK3203409H1
          receiver_name: CARGOS S.A. DE C.V.
          receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
          cancelation_status: null
          cancelation_update_date: null
          certification_date: '2020-12-24'
          certification_authority: FGV330542BG6
          payment_type: null
          payment_type_description: null
          payment_method: null
          usage: G03
          place_of_issue: '11000'
          invoice_details:
            - description: FLETE
              product_identification: '78101802'
              quantity: 1
              unit_code: E48
              unit_description: Unidad de servicio
              unit_amount: 21000
              pre_tax_amount: 21000
              tax_percentage: 16
              tax_amount: 0
              total_amount: 21000
              retained_taxes: []
              collected_at: '2022-02-09T08:45:50.406032Z'
          currency: MXN
          subtotal_amount: 0
          exchange_rate: 1
          tax_amount: 0
          discount_amount: 0
          total_amount: 0
          payments: []
          payroll: null
          folio: '28'
          xml: '=XML-STRING='
          warnings:
            code: warning_code
            message: warning message
    InvoiceIngresoDetail:
      summary: Invoice Ingreso
      description: Example of an *Igreso* type invoice.
      value:
        version: '3.3'
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: '2020-12-24'
        status: Vigente
        invoice_type: Ingreso
        type: OUTFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: '2020-12-24'
        certification_authority: FGV330542BG6
        payment_type: '04'
        payment_type_description: null
        payment_method: PUE
        usage: G03
        place_of_issue: '11000'
        invoice_details:
          - description: Servicios de mensajer√≠a.
            product_identification: '78102206'
            quantity: 1
            unit_code: E48
            unit_description: Unidad de servicio
            unit_amount: 25
            pre_tax_amount: 25
            tax_percentage: 16
            tax_amount: 4
            total_amount: 29
            retained_taxes: []
            collected_at: '2022-02-09T08:45:50.406032Z'
        currency: MXN
        subtotal_amount: 25
        exchange_rate: 1
        tax_amount: 4
        discount_amount: 0
        total_amount: 29
        payments: []
        payroll: null
        folio: '28'
        xml: '=XML-STRING='
        warnings:
          code: warning_code
          message: warning message
    InvoicePagoDetail:
      summary: Invoice Pago
      description: Example of a *Pago* type invoice.
      value:
        version: '3.3'
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: '2020-12-24'
        status: Vigente
        invoice_type: Pago
        type: OUTFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: '2020-12-24'
        certification_authority: FGV330542BG6
        payment_type: null
        payment_type_description: null
        payment_method: null
        usage: P01
        place_of_issue: '11000'
        invoice_details:
          - description: Pago
            product_identification: '84111506'
            quantity: 1
            unit_amount: 0
            unit_code: ACT
            unit_description: null
            pre_tax_amount: 0
            tax_percentage: 0
            tax_amount: 0
            total_amount: 0
            retained_taxes: []
            collected_at: '2022-02-09T08:45:50.406032Z'
        currency: MXN
        subtotal_amount: 0
        exchange_rate: null
        tax_amount: 0
        discount_amount: 0
        total_amount: 0
        payments:
          - date: '2020-03-17T12:00:00.000Z'
            payment_type: '03'
            currency: BRL
            exchange_rate: '3.75'
            amount: 8000.5
            operation_number: '831840'
            beneficiary_rfc: BNM840515VB1
            beneficiary_account_number: '12343453245633'
            payer_rfc: BKJM840515VB1
            payer_account_number: '13343663245699'
            payer_bank_name: CITI BANAMEX
            related_documents:
              - invoice_identification: 7EE015F3-6311-11EA-B02A-00155D014007
                currency: MXN
                payment_method: PPD
                installment: 1
                previous_balance: 18877.84
                amount_paid: 8000
                outstanding_balance: 10877.84
        payroll: null
        folio: '28'
        xml: '=XML-STRING='
        warnings:
          code: warning_code
          message: warning message
    InvoiceNominaDetail:
      summary: Invoice Nomina
      description: Example of a *Nomina* type invoice.
      value:
        version: '3.3'
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: '2020-12-24'
        status: Vigente
        invoice_type: N√≥mina
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: ACNE SA DE CV
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: Roberto Martinez Diaz
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: '2020-12-24'
        certification_authority: FGV330542BG6
        payment_type: '99'
        payment_type_description: null
        payment_method: PUE
        usage: P01
        place_of_issue: '11000'
        invoice_details:
          - description: Pago de n√≥mina
            product_identification: '84111505'
            quantity: 1
            unit_code: ACT
            unit_description: null
            unit_amount: 20400.1
            total_amount: 20400.1
            pre_tax_amount: 20400.1
            tax_percentage: 0
            tax_amount: 0
            retained_taxes: []
            collected_at: '2022-02-09T08:45:50.406032Z'
        currency: MXN
        subtotal_amount: 20400.1
        exchange_rate: 1
        tax_amount: 0
        discount_amount: 5000
        total_amount: 15400.1
        payments: []
        payroll:
          version: '1.2'
          days: 30
          type: O
          amount: 20400.1
          date_to: '2020-12-31'
          date_from: '2020-12-01'
          collected_at: '2022-02-09T08:45:50.406032Z'
          payment_date: '2020-12-24'
        folio: '28'
        xml: '=XML-STRING='
        warnings:
          code: warning_code
          message: warning message
    InvoiceEgresoDetail:
      summary: Invoice Egreso
      description: Example of an *Egreso* type invoice.
      value:
        version: '3.3'
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: '2020-12-24'
        status: Vigente
        invoice_type: Egreso
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: Roberto Martinez Diaz
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: ACNE SA DE CV
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: '2020-12-24'
        certification_authority: FGV330542BG6
        payment_type: '04'
        payment_type_description: null
        payment_method: PUE
        usage: G03
        place_of_issue: '11000'
        invoice_details:
          - description: Reembolso del servicio
            product_identification: '78111500'
            unit_code: E48
            unit_description: Unidad de servicio
            quantity: 1
            unit_amount: 25
            pre_tax_amount: 25
            tax_percentage: 16
            tax_amount: 4
            total_amount: 29
            retained_taxes: []
            collected_at: '2022-02-09T08:45:50.406032Z'
        currency: MXN
        subtotal_amount: 25
        exchange_rate: 1
        tax_amount: 4
        discount_amount: 0
        total_amount: 29
        payments: []
        payroll: null
        folio: '28'
        xml: '=XML-STRING='
        warnings:
          code: warning_code
          message: warning message
    InvoiceTrasladoDetail:
      summary: Invoice Traslado
      description: Example of a *Traslado* type invoice.
      value:
        version: '3.3'
        id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
        link: 1bd948f7-245d-4313-b604-34d1044cb908
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        invoice_identification: 862B9918-3K6H-4E0B-NAI9-2BE2D833B840
        invoice_date: '2020-12-24'
        status: Vigente
        invoice_type: Traslado
        type: INFLOW
        sender_id: GHTF980303F7
        sender_name: ACNE SA DE CV
        sender_tax_fraud_status: NO_TAX_FRAUD_STATUS
        receiver_id: MNMK3203409H1
        receiver_name: CARGOS S.A. DE C.V.
        receiver_tax_fraud_status: NO_TAX_FRAUD_STATUS
        cancelation_status: null
        cancelation_update_date: null
        certification_date: '2020-12-24'
        certification_authority: FGV330542BG6
        payment_type: null
        payment_type_description: null
        payment_method: null
        usage: G03
        place_of_issue: '11000'
        invoice_details:
          - description: FLETE
            product_identification: '78101802'
            quantity: 1
            unit_code: E48
            unit_description: Unidad de servicio
            unit_amount: 21000
            pre_tax_amount: 21000
            tax_percentage: 16
            tax_amount: 0
            total_amount: 21000
            retained_taxes: []
            collected_at: '2022-02-09T08:45:50.406032Z'
        currency: MXN
        subtotal_amount: 0
        exchange_rate: 1
        tax_amount: 0
        discount_amount: 0
        total_amount: 0
        payments: []
        payroll: null
        folio: '28'
        xml: '=XML-STRING='
        warnings:
          code: warning_code
          message: warning message
    TaxReturnPersonalListPaginated:
      summary: Tax Return Personal
      description: Example of a list of personal tax returns
      value:
        count: 101
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - id: 02589c41-ba22-4d44-8558-8111cc751318X
            link: 19697249-01b8-443e-a451-76bfc5fbeebf
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            informacion_general:
              ejercicio: 2018
              fecha_hora_presentacion: '2020-01-07T17:28:00-05:00'
              numero_operacion: '00000000001'
              periodo_declaracion: Del Ejercicio
              rfc: ABCD111111A11
              tipo_declaracion: Normal
              nombre: JOHN DOE
            sueldos_salarios:
              retenedores:
                - rfc_retenedor: ABCD222222A22
                  nombre_denominacion_razon_social: ACME CORP
                  ingresos_exentos: 118263
                  ingreso_anual: 2265
                  subsidio_empleo: 0
              impuesto_retenido: 19497
              ingreso_anual: 118263
              ingresos_acumulables: 115998
              ingresos_exentos: 2265
              subsidio_empleo: 0
            servicios_profesionales:
              deducciones_autorizadas:
                deducciones_autorizadas: 11870
                otras_deducciones: null
                detalle_deducciones:
                  - tipo_deduccion: GASTOS
                    concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
                    monto_detallado: 9682
                  - tipo_deduccion: GASTOS
                    concepto: COMPRAS Y GASTOS GENERALES
                    monto_detallado: 2188
                total_deducciones_autorizadas: 11870
              ingresos:
                ingresos_acumulables: 46000
                ingresos_exentos: null
                otros_ingresos: null
                total_ingresos: 46000
              resultado_fiscal:
                utilidad_fiscal: 34130
                ptu_pagada_ejercicio: 0
                perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
                utilidad_gravable: 34130
              pagos_provisionales:
                pagos_provisionales_efectuados_en_ejercicio: 0
              retenciones_isr:
                isr_retenido_personas_morales: 4600
            deducciones_personales:
              honorarios_medicos_dentales_hospitalarios:
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC444444A44
                  monto_deducible: 1000
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC444444A44
                  monto_deducible: 502.34
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC333333A33
                  monto_deducible: 258.83
                - rfc_emisor: ABC444444A55
                  monto_deducible: 14183.1
                - rfc_emisor: ABC444444A66
                  monto_deducible: 1658
                - rfc_emisor: ABC444444A77
                  monto_deducible: 1600
                - rfc_emisor: ABC444444A88
                  monto_deducible: 1064
                - rfc_emisor: ABC444444A99
                  monto_deducible: 927.57
              donativos:
                - rfc_emisor: ABC555555A99
                  monto_deducible: 10.03
              aportaciones_voluntarias_complementarias_al_sar:
                - rfc_emisor: ABC666666A99
                  monto_deducible: 12.03
                - rfc_emisor: ABC777777A99
                  monto_deducible: 87.22
              primas_por_seguros_de_gasto_medico:
                - rfc_emisor: ABC777777A99
                  monto_deducible: 20.03
            determinacion_impuesto:
              base_gravable: 126864
              deducciones_personales: 23264
              ingresos_acumulables: 150128
              isr_favorable: 10308
              isr_conforme_tarifa_final: 13789
              isr_retenido: 24097
              num_clabe: '000000000000000001'
              nombre_banco: BANCO SA
              pagos_provisionales: 0
              titular_clabe_permite_verificacion: S√ç
              accion_saldo_a_favor: DEVOLUCI√ìN
            retenciones:
              sueldos_salarios:
                - rfc_retenedor: ABC444444A99
                  monto_retenciones: 118263
                  retenciones_isr: 19497
              dividendos: []
              servicios_profesionales:
                - rfc_retenedor: ABC444444A00
                  monto_retenciones: 46000
                  retenciones_isr: 4600
            dividendos:
              monto_acumulable_dividendos_utilidades: null
              monto_total_isr_pagado_sociedad: null
            datos_informativos:
              credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
              credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
              credito_fiscal_autorizado_proyectos_inversion_artes: 0
              credito_fiscal_autorizado_inversion_equipos_fijos: 0
              credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
              saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
              saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
              saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
            pdf: '=PDF-STRING='
            receipt_pdf: '=PDF-STRING='
            type: yearly
    TaxReturnPersonalListMonthlyPaginatedPFAE:
      summary: Tax Return Personal Monthly (PFAe)
      description: Example of a list of PFAE-type monthly personal tax returns
      value:
        count: 101
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            informacion_general:
              rfc: null
              nombre: null
              tipo_declaracion: null
              ejercicio: null
              periodo_declaracion: null
              fecha_hora_presentacion: null
              numero_operacion: null
            isr:
              tipo: PFAE
              determinacion:
                ingresos_periodos_anteriores: 0
                ingresos_periodo: 0
                total_ingresos: 0
                compras_gastos_periodos_anteriores: 1596
                compra_gastos_periodo: 399
                total_compras_gastos: 1995
                base_gravable_pago_provisional: 0
                isr_causado: 0
                pagos_provisionales_efectuados_anterioridad: 0
                isr_retenido_periodos_anteriores: 0
                impuesto_retenido: 0
                isr_cargo: 0
              detalle_del_pago:
                a_cargo: 0
                parte_actualizada: 0
                recargos: 0
                total_contribuciones: 0
                total_aplicaciones: 0
                cantidad_a_cargo: 0
                cantidad_a_pagar: 0
            iva:
              determinacion:
                actividades_gravadas_tasa_16: 0
                actividades_gravadas_tasa_0: 0
                actividades_exentas: 0
                iva_cobrado_periodo_tasa_16: 0
                iva_acreditable_periodo: 0
                iva_retenido: 0
                saldo_a_favor: null
                impuesto_a_favor: null
              detalle_del_pago:
                total_contribuciones: 0
                total_aplicaciones: 0
                cantidad_a_cargo: 0
                cantidad_a_pagar: 0
                a_favor: null
            pdf: '===PDF_BINARY===='
            receipt_pdf: '===PDF_BINARY===='
            type: monthly
    TaxReturnPersonalListMonthlyPaginatedPFAI:
      summary: Tax Return Personal Monthly (PFAI)
      description: Example of a list of PFAI-type monthly personal tax returns
      value:
        count: 101
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            informacion_general:
              rfc: null
              nombre: null
              tipo_declaracion: null
              ejercicio: null
              periodo_declaracion: null
              fecha_hora_presentacion: null
              numero_operacion: null
            isr:
              tipo: PFAE
              determinacion:
                ingresos_periodos_anteriores: 0
                ingresos_periodo: 0
                total_ingresos: 0
                compras_gastos_periodos_anteriores: 1596
                compra_gastos_periodo: 399
                total_compras_gastos: 1995
                base_gravable_pago_provisional: 0
                isr_causado: 0
                pagos_provisionales_efectuados_anterioridad: 0
                isr_retenido_periodos_anteriores: 0
                impuesto_retenido: 0
                isr_cargo: 0
                tipo_de_deducc√≠on: dedducc√≠on opicional
                optas_por_el_c√°lculo_acumulado: 'NO'
                deducc√≠on_opcional: 700
                impuesto_predial: 0
                total_deducciones_autorizadas: 700
                tienes_facilidades_administrativas_o_est√≠mulos_deducibles: 'NO'
              detalle_del_pago:
                a_cargo: 0
                parte_actualizada: 0
                recargos: 0
                total_contribuciones: 0
                total_aplicaciones: 0
                cantidad_a_cargo: 0
                cantidad_a_pagar: 0
            iva:
              determinacion:
                actividades_gravadas_tasa_16: 0
                actividades_gravadas_tasa_0: 0
                actividades_exentas: 0
                iva_cobrado_periodo_tasa_16: 0
                iva_acreditable_periodo: 0
                iva_retenido: 0
                saldo_a_favor: null
                impuesto_a_favor: null
                impuesto_a_cargo: 54
                cantidad_a_cargo: 54
              detalle_del_pago:
                total_contribuciones: 0
                total_aplicaciones: 0
                cantidad_a_cargo: 0
                cantidad_a_pagar: 0
                a_favor: null
            pdf: '===PDF_BINARY===='
            receipt_pdf: '===PDF_BINARY===='
            type: monthly
    TaxReturnBusinessListPaginated:
      summary: Tax Return Business
      description: Example of a list of business tax returns
      value:
        count: 101
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - id: 02589c41-ba22-4d44-8558-8111cc751318X
            link: 19697249-01b8-443e-a451-76bfc5fbeebf
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            informacion_general:
              ejercicio: 2018
              fecha_hora_presentacion: '2020-01-07T16:55:00-06:00'
              numero_operacion: '000000000001'
              periodo_declaracion: Del Ejercicio
              rfc: ABC1111111A1
              tipo_declaracion: Normal
              tipo_complementaria: null
              denominacion_razon_social: ACME CORP
            datos_adicionales:
              indica_si_optas_por_dictaminar_tus_estados_financieros: 'NO'
              estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: 'NO'
              estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN SELECCI√ìN
              estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN SELECCI√ìN
              optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCI√ìN
              indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: 'NO'
            estado_resultados:
              ventas_servicios_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: 911165
                total: 911165
              ventas_servicios_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              devoluciones_descuentos_bonificaciones_ventas_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              devoluciones_descuentos_bonificaciones_ventas_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              ingresos_netos:
                partes_relacionadas: null
                partes_no_relacionadas: 911165
                total: 911165
              inventario_inicial: null
              compras_netas_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              compras_netas_importacion:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              inventario_final: null
              costo_mercancias: null
              mano_de_obra:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              maquilas:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              gastos_indirectos_fabricacion:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              costo_ventas_servicios: null
              utilidad_bruta: 911165
              perdida_bruta: null
              gastos_operacion:
                partes_relacionadas: null
                partes_no_relacionadas: 499540
                total: 499540
              utilidad_operacion: 411625
              perdida_operacion: null
              intereses_devengados_a_favor_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              intereses_devengados_a_favor_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              intereses_moratorios_a_favor_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              intereses_moratorios_a_favor_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              ganancia_cambiaria:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              intereses_devengados_a_cargo_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              intereses_devengados_a_cargo_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              intereses_moratorios_a_cargo_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              intereses_moratorios_a_cargo_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              perdida_cambiaria:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              resultado_posicion_monetaria_favorable:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              resultado_posicion_monetaria_desfavorable:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              otras_operaciones_financieras_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              otras_operaciones_financieras_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              otras_operaciones_financieras: null
              resultado_integral_financiamiento: null
              otros_gastos_nacionales: null
              otros_gastos_extranjero: null
              otros_gastos: null
              otros_productos_nacionales: null
              otros_productos_extranjero: null
              otros_productos: null
              ingresos_partidas_discontinuas_extraordinarias: null
              gastos_partidas_discontinuas_extraordinarias: null
              utilidad_antes_impuesto: 411625
              perdida_antes_impuesto: null
              isr: 113002
              ietu: null
              impac: null
              ptu: null
              utilidad_participacion_subsidiaria: null
              perdida_participacion_subsidiaria: null
              efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria: null
              efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria: null
              utilidad_neta: 298623
              perdida_neta: null
            estado_posicion_financiera_balance:
              activo:
                efectivo_caja_depositos_instituciones_credito_nacionales: 726644
                efectivo_caja_depositos_instituciones_credito_extranjero: null
                inversiones_valores_instituciones_nacionales_excepto_acciones: null
                inversiones_valores_instituciones_extranjero_excepto_acciones: null
                cuentas_documentos_por_cobrar_nacionales:
                  partes_relacionadas: null
                  partes_no_relacionadas: null
                  total: null
                cuentas_documentos_por_cobrar_extranjero:
                  partes_relacionadas: null
                  partes_no_relacionadas: null
                  total: null
                contribuciones_a_favor: null
                inventarios: null
                otros_activos_circulantes: 13277
                inversiones_en_acciones_nacionales: null
                inversiones_en_acciones_extranjero: null
                inversiones_en_acciones_total: null
                terrenos: null
                construcciones: null
                construcciones_en_proceso: null
                maquinaria_y_equipo: null
                mobiliario_y_equipo_oficina: null
                equipo_de_computo: null
                equipo_de_transporte: null
                otros_activos_fijos: 12756
                depreciacion_acumulada: -106
                cargos_y_gastos_diferidos: 9319
                amortizacion_acumulada: null
                suma_activo: 761890
              pasivo:
                cuentas_documentos_por_pagar_nacionales:
                  partes_relacionadas: null
                  partes_no_relacionadas: 268227
                  total: 268227
                cuentas_documentos_por_pagar_extranjero:
                  partes_relacionadas: null
                  partes_no_relacionadas: null
                  total: null
                contribuciones_por_pagar: 223490
                anticipos_de_clientes:
                  partes_relacionadas: null
                  partes_no_relacionadas: null
                  total: null
                aportaciones_futuros_aumentos_de_capital: null
                otros_pasivos: null
                suma_pasivo: 491717
              capital_contable:
                capital_social_proveniente_aportaciones: 10000
                capital_social_proveniente_capitalizacion: null
                reservas: null
                otras_cuentas_capital: null
                aportaciones_futuros_aumentos_de_capital: null
                utilidades_acumuladas: null
                utilidad_del_ejercicio: 298623
                perdidas_acumuladas: -38450
                perdida_del_ejercicio: null
                exceso_en_actualizacion_capital: null
                insuficiencia_en_actualizacion_capital: null
                actualizacion_del_capital_contable: null
                suma_capital_contable: 270173
                suma_pasivo_mas_capital_contable: 761890
            conciliacion_entre_resultado_contable_fiscal:
              utilidad_o_perdida_neta: 298623
              efectos_reexpresion: null
              resultado_posicion_monetaria: null
              utilidad_o_perdida_neta_historica: 298623
              ingresos_fiscales_no_contables: 95
              ajuste_anual_inflacion_acumulable: 95
              anticipos_de_clientes: null
              intereses_moratorios_efectivamente_cobrados: null
              ganancia_en_enajenacion_acciones_por_reembolso_capital: null
              ganancia_en_enajenacion_de_terrenos_y_activo_fijo: null
              inventario_acumulable_del_ejercicio: null
              otros_ingresos_fiscales_no_contables: null
              deducciones_contables_no_fiscales: 117415
              costo_de_ventas_contable: null
              depreciacion_y_amortizacion_contable: 106
              gastos_que_no_reunen_requisitos_fiscales: 4307
              isr_ietu_impac_ptu: 113002
              perdida_contable_enajenacion_de_acciones: null
              perdida_contable_enajenacion_de_activo_fijo: null
              perdida_en_participacion_subsidiaria: null
              intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
              otras_deducciones_contables_no_fiscales: 0
              deducciones_fiscales_no_contables: 0
              ajuste_anual_inflacion_deducible: null
              costo_vendido_fiscal: null
              deduccion_inversiones: null
              estimulo_fiscal_por_deduccion_inmediata_inversiones: null
              donacion_bienes_basicos_subsistencia_humana: 0
              estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
              deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
              perdida_fiscal_en_enajenacion_acciones: null
              perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo: null
              intereses_moratorios_efectivamente_pagados: null
              otras_deducciones_fiscales_no_contables: null
              ingresos_contables_no_fiscales: null
              intereses_moratorios_devengados_a_favor_cobrados_o_no: null
              anticipos_de_clientes_ejercicios_anteriores: null
              saldos_a_favor_impuestos_y_su_actualizacion: null
              utilidad_contable_enajenacion_de_activo_fijo: null
              utilidad_contable_enajenacion_de_acciones: null
              utilidad_en_participacion_subsidiaria: null
              otros_ingresos_contables_no_fiscales: null
              utilidad_o_perdida_fiscal_antes_de_ptu: 416133
            deducciones_autorizadas:
              sueldos_salarios: null
              honorarios_pagados_a_personas_fisicas: null
              regalias_y_asistencia_tecnica: null
              donativos_otorgados: null
              uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas: null
              fletes_y_acarreos_pagados_a_parsonas_fisicas: null
              contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps: null
              seguros_fianzas: null
              perdida_por_creditos_incobrables: null
              viaticos_y_gastos_viaje: 59527
              combustible_y_lubricantes: null
              credito_al_salario_no_disminuido_de_contribuciones: null
              aportaciones_sar_infonavit_y_jubilaciones_vejez: null
              aportaciones_para_fondos_de_pensiones_y_jubilaciones: null
              cuotas_imss: null
              consumos_en_restaurantes: 11254
              perdida_por_operaciones_financieras_derivadas: null
              deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores: null
              monto_total_pagos_que_sean_ingresos_exentos_para_trabajador: null
              monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador: null
              monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador: null
              uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno: null
              otras_deducciones_autorizadas: 424346
              total_deducciones_autorizadas: 495127
            cifras_cierre_ejercicio:
              perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas: null
              saldo_promedio_anual_de_creditos: 142795
              saldo_promedio_anual_de_deudas: 144765
              coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
              porcentaje_de_participacion_consolidable: null
              isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar: null
              saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores: null
              saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores: null
              saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida: null
              saldo_actualizado_de_cuenta_de_capital_de_aportacion: null
              saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables: null
            determinacion_del_impuesto_sobre_la_renta:
              determinacion_del_impuesto_sobre_la_renta:
                total_ingresos_acumulables: 911260
                total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
                deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila: null
                utilidad_o_perdida_fiscal_antes_de_ptu: 416134
                ptu_pagada_en_el_ejercicio: null
                utilidad_fiscal_del_ejercicio: 416134
                perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
                resultado_fiscal: 376672
                impuesto_causado_en_ejercicio: 113002
                tienes_estimulos_fiscales_a_acreditar: SIN SELECCI√ìN
                impuesto_sobre_la_renta_del_ejercicio: 113002
                pagos_provisionales_efectuados_enterados_a_federacion: null
                impuesto_retenido_al_contribuyente: null
                impuesto_acreditable_pagado_en_extranjero: null
                impuesto_acreditable_por_dividendos_o_utilidades_distribuidos: null
                otras_cantidades_a_cargo: null
                otras_cantidades_a_favor: null
                diferencia_a_cargo: 113002
                isr_a_cargo_del_ejercicio: 113002
                isr_a_favor_del_ejercicio: null
              impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes: null
              datos_informativos_ejercicio:
                monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
                monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
                impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
                ingresos_obtenidos_por_apoyos_gubernamentales: 0
                gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
                credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
                credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
                saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
                credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
              datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
                total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio: null
                saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar: 0
                saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
                saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
                saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
            dividendos_o_utilidades_distribuidos:
              provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores: null
              provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014: null
              provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre: null
              no_provenientes_de_cufin_ni_cufinre_en_efectivo: null
              no_provenientes_de_cufin_ni_cufinre_en_acciones: null
              monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre: null
              monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre: null
              provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente: null
            detalle_pago_r1_isr_personas_morales:
              a_cargo: 113002
              parte_actualizada: null
              recargos: null
              multa_por_correccion: null
              total_contribuciones: 113002
              desea_aplicar_alguna_compensacion_o_estimulo: 'NO'
              cantidad_a_cargo: 113002
              opta_por_pagar_parcialidades: SIN SELECCI√ìN
              importe_de_primera_parcialidad: null
              importe_sin_primera_parcialidad: null
              cantidad_a_favor: null
              cantidad_a_pagar: 113002
            pdf: '=PDF-STRING='
            receipt_pdf: '=PDF-STRING='
            type: yearly
    TaxReturnBusinessListMonthlyPaginated:
      summary: Tax Return Business Monthly
      description: Example of a list of monthly business tax returns
      value:
        count: 101
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            informacion_general:
              rfc: DPA950805RR2
              denominacion_razon_social: Aloha Mahalo SC
              tipo_declaracion: Normal
              ejercicio: 2020
              periodo_declaracion: Diciembre
              fecha_hora_presentacion: '2021-01-18T19:24:00-06:00'
              numero_operacion: '400475119'
              tipo_complementaria: null
            determinacion_isr:
              personas_morales_regimen_general:
                suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
                estimulos_acreditables: null
                ingresos_nominales_mes_que_declara: 6482479
                reducciones: null
                total_ingresos_nominales: 76330893
                impuestos_del_periodo: 284098
                coeficiente_utilidad: 0.2318
                pagos_provisionales_efectuados_anterioridad: 303039
                utilidad_fiscal_pago_provisional: 17693501
                impuesto_retenido: 29925
                ptu: null
                otras_cantidades_a_cargo_contribuyente: null
                iventario_acumulable: null
                otras_cantidades_a_favor_contribuyente: null
                anticipos_rendimientos_distribuidos_periodo: 16746509
                diferencia_a_cargo: 0
                perdidas_fiscales_ejercicios_anteriores_pendientes: null
                estimulo_fiscal_deduccion_inmediata: null
                impuesto_correspondiente_participacion_consolidable: null
                deduccion_adicional_fomento_primer_empleo: null
                porcentaje_participacion_consolidable: null
                base_gravable_pago_provisional: 946992
                impuesto_a_cargo: 0
                isr_causado: 284098
                ieps_alcohol: null
            detalle_pago_isr:
              r1_isr_personas_morales:
                a_cargo: 0
                acreditamiento_sorteo_buen_fin: null
                parte_actualizada: null
                diesel_marino: null
                recargos: null
                total_aplicaciones: 0
                multa_por_correccion: null
                fecha_pago_realizado_anterioridad: null
                total_de_contribuciones: 0
                monto_pagado_anterioridad: null
                credito_al_salario: null
                importe_pagado_ultimas_48_hrs: null
                subsidio_empleo: null
                cantidad_a_cargo: 0
                impuesto_a_depositos_efectivo_acreditable: null
                aplica_primera_parcialidad: 'NO'
                compensaciones: null
                credito_ieps_diesel: null
                diesel_automotriz_transporte: null
                cantidad_a_favor: null
                uso_infraestructura_carretera_cuota: null
                cantidad_a_pagar: 0
                otros_estimulos: null
                importe_1ra_parcialidad: null
                importe_sin_1ra_parcialidad: null
              r12_isr_retenciones_por_salarios:
                a_cargo: 415945
                acreditamiento_sorteos: null
                parte_actualizada: 0
                diesel_marino: null
                recargos: 0
                total_aplicaciones: 379
                multa_por_correccion: null
                fecha_pago_realizado_anterioridad: null
                total_de_contribuciones: 415945
                monto_pagado_anterioridad: null
                credito_al_salario: null
                importe_pagado_ultimas_48_hrs: null
                subsidio_empleo: 379
                cantidad_a_cargo: 415566
                impuesto_a_depositos_efectivo_acreditable: null
                aplica_primera_parcialidad: 'NO'
                compensaciones: null
                credito_ieps_diesel: null
                diesel_automotriz_transporte: null
                cantidad_a_favor: null
                otros_estimulos: null
                cantidad_a_pagar: 415566
                importe_1ra_parcialidad: null
                importe_sin_1ra_parcialidad: null
              r13_isr_retenciones_por_asimilados_a_salarios:
                a_cargo: 254588
                acreditamiento_sorteos: null
                parte_actualizada: 0
                diesel_marino: null
                recargos: 0
                total_aplicaciones: 0
                multa_por_correccion: null
                fecha_pago_realizado_anterioridad: null
                total_de_contribuciones: 254588
                monto_pagado_anterioridad: null
                credito_al_salario: null
                importe_pagado_ultimas_48_hrs: null
                subsidio_empleo: null
                cantidad_a_cargo: 254588
                impuesto_a_depositos_efectivo_acreditable: null
                aplica_primera_parcialidad: 'NO'
                compensaciones: null
                credito_ieps_diesel: null
                diesel_automotriz_transporte: null
                cantidad_a_favor: null
                otros_estimulos: null
                cantidad_a_pagar: 254588
                importe_1ra_parcialidad: null
                importe_sin_1ra_parcialidad: null
              r14_isr_retenciones_por_servicios_profesionales:
                a_cargo: 104482
                acreditamiento_sorteos: null
                parte_actualizada: 0
                diesel_marino: null
                recargos: 0
                total_aplicaciones: 0
                multa_por_correccion: null
                fecha_pago_realizado_anterioridad: null
                total_de_contribuciones: 104482
                monto_pagado_anterioridad: null
                credito_al_salario: null
                importe_pagado_ultimas_48_hrs: null
                subsidio_empleo: null
                cantidad_a_cargo: 104482
                impuesto_a_depositos_efectivo_acreditable: null
                aplica_primera_parcialidad: 'NO'
                compensaciones: null
                credito_ieps_diesel: null
                diesel_automotriz_transporte: null
                cantidad_a_favor: null
                otros_estimulos: null
                cantidad_a_pagar: 104482
                importe_1ra_parcialidad: null
                importe_sin_1ra_parcialidad: null
            determinacion_iva:
              montos_actos_actividades_pagados:
                total_actos_actividades_pagados_tasa_16: 2094706
                total_actos_actividades_pagados_importacion_bienes_tasa_11: null
                total_actos_actividades_sujetos_estimulo_rfn: 0
                total_actos_actividades_pagados_tasa_0: 0
                total_actos_actividades_pagados_importacion_bienes_tasa_16: null
                total_actos_actividades_pagados_no_paga_iva: 0
              detalle_total_actos_actividades_pagados_tasa_16:
                intereses_pagados_tasa_16: null
                otros_actos_pagados_tasa_16: 2094706
                regalias_pagadas_tasa_16: null
                total_actos_pagados_tasa_16: 2094706
              determinacion_iva_acreditable:
                total_iva_actos_actividades_pagados_tasa_16: 335153
                iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto: null
                iva_pagado_sujeto_estimulo_rfn: null
                iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto: null
                total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
                iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
                proporcion_utilizada_conforme_art_5: null
                total_iva_trasladado_contribuyente: 335153
                proporcion_utilizada_conforme_art_5_b: null
                iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
                iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados: null
                iva_acreditable: 335153
                monto_acreditable_actualizado_a_incrementar_derivado_ajuste: null
                iva_pagado_importacion_inversiones_actos_gravados: null
                total_iva_acreditable_periodo: 335153
                total_iva_actos_actividades_gravados: 335153
                total_actos_actividades_pagados_importacion_bienes_tasa_11: null
                iva_trasladado_adquisicion_inversiones_actos_gravados: null
                iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: null
              determinacion_iva:
                valor_actos_actividades_gravados_tasa_16: 6457950
                otras_cantidades_a_favor_contribuyente: null
                valor_actos_actividades_gravados_tasa_11: null
                cantidad_a_cargo: 312421
                valor_actos_actividades_gravados_tasa_0_exportacion: null
                saldo_a_favor: null
                valor_actos_actividades_gravados_tasa_9_otros: null
                devolucion_inmediata_obtenida: null
                suma_actos_actividades_gravados: 6457950
                saldo_a_favor_periodo: 0
                valor_actos_actividades_no_se_deba_pagar_impuesto_exentos: null
                acreditamiento_saldo_favor_periodos_anteriores: null
                impuesto_causado: 1033272
                diferencia_a_cargo: 312421
                cantidad_actualizada_a_reintegrarse_derivada_de_ajuste: null
                ieps_acreditable_alcohol: null
                iva_retenido_al_contribuyente: 385698
                impuesto_a_cargo: 312421
                total_iva_acreditable: 335153
                remanente_saldo_favor_ieps_alcohol: null
                otras_cantidades_a_cargo_contribuyente: null
              detalle_valor_actos_actividades_gravados_tasa_16:
                intereses_cobrados_tasa_16: null
                otros_actos_actividades_gravados_tasa_16: 6457950
                regalias_entre_partes_relacionadas_tasa_16: null
                total_actos_actividades_gravados_tasa_16: 6457950
            detalle_pago_iva:
              r21_iva:
                a_cargo: 312421
                cretificados_tesofe: null
                a_favor: null
                diesel_marino: null
                parte_actualizada: 0
                total_aplicaciones: 0
                recargos: 0
                fecha_pago_realizado_anterioridad: null
                multa_por_correccion: null
                monto_pagado_anterioridad: null
                total_de_contribuciones: 312421
                importe_pagado_ultimas_48_hrs: null
                credito_al_salario: null
                cantidad_a_cargo: 312421
                subsidio_empleo: null
                aplica_primera_parcialidad: 'NO'
                compensaciones: null
                diesel_automotriz_transporte: null
                uso_infraestructura_carretera_cuota: null
                cantidad_a_favor: null
                otros_estimulos: null
                cantidad_a_pagar: 312421
                importe_1ra_parcialidad: null
                importe_sin_1ra_parcialidad: null
              r21_iva_retenciones:
                a_cargo: 111448
                diesel_marino: null
                parte_actualizada: 0
                total_aplicaciones: 0
                recargos: 0
                fecha_pago_realizado_anterioridad: null
                multa_por_correccion: null
                monto_pagado_anterioridad: null
                total_de_contribuciones: 111448
                importe_pagado_ultimas_48_hrs: null
                credito_al_salario: null
                cantidad_a_cargo: 111448
                subsidio_empleo: null
                aplica_primera_parcialidad: 'NO'
                compensaciones: null
                credito_ieps_diesel: null
                otros_estimulos: null
                cantidad_a_favor: null
                cretificados_tesofe: null
                cantidad_a_pagar: 111448
                importe_1ra_parcialidad: null
                importe_sin_1ra_parcialidad: null
            pdf: '===PDF_BINARY===='
            receipt_pdf: '===PDF_BINARY===='
            type: monthly
    TaxReturnPersonalList:
      summary: Tax Return Personal
      description: Example of a list of personal tax returns
      value:
        - id: 02589c41-ba22-4d44-8558-8111cc751318X
          link: 19697249-01b8-443e-a451-76bfc5fbeebf
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          informacion_general:
            ejercicio: 2018
            fecha_hora_presentacion: '2020-01-07T17:28:00-05:00'
            numero_operacion: '00000000001'
            periodo_declaracion: Del Ejercicio
            rfc: ABCD111111A11
            tipo_declaracion: Normal
            nombre: JOHN DOE
          sueldos_salarios:
            retenedores:
              - rfc_retenedor: ABCD222222A22
                nombre_denominacion_razon_social: ACME CORP
                ingresos_exentos: 118263
                ingreso_anual: 2265
                subsidio_empleo: 0
            impuesto_retenido: 19497
            ingreso_anual: 118263
            ingresos_acumulables: 115998
            ingresos_exentos: 2265
            subsidio_empleo: 0
          servicios_profesionales:
            deducciones_autorizadas:
              deducciones_autorizadas: 11870
              otras_deducciones: null
              detalle_deducciones:
                - tipo_deduccion: GASTOS
                  concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
                  monto_detallado: 9682
                - tipo_deduccion: GASTOS
                  concepto: COMPRAS Y GASTOS GENERALES
                  monto_detallado: 2188
              total_deducciones_autorizadas: 11870
            ingresos:
              ingresos_acumulables: 46000
              ingresos_exentos: null
              otros_ingresos: null
              total_ingresos: 46000
            resultado_fiscal:
              utilidad_fiscal: 34130
              ptu_pagada_ejercicio: 0
              perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
              utilidad_gravable: 34130
            pagos_provisionales:
              pagos_provisionales_efectuados_en_ejercicio: 0
            retenciones_isr:
              isr_retenido_personas_morales: 4600
          deducciones_personales:
            honorarios_medicos_dentales_hospitalarios:
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC444444A44
                monto_deducible: 1000
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC444444A44
                monto_deducible: 502.34
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC333333A33
                monto_deducible: 258.83
              - rfc_emisor: ABC444444A55
                monto_deducible: 14183.1
              - rfc_emisor: ABC444444A66
                monto_deducible: 1658
              - rfc_emisor: ABC444444A77
                monto_deducible: 1600
              - rfc_emisor: ABC444444A88
                monto_deducible: 1064
              - rfc_emisor: ABC444444A99
                monto_deducible: 927.57
            donativos:
              - rfc_emisor: ABC555555A99
                monto_deducible: 10.03
            aportaciones_voluntarias_complementarias_al_sar:
              - rfc_emisor: ABC666666A99
                monto_deducible: 12.03
              - rfc_emisor: ABC777777A99
                monto_deducible: 87.22
            primas_por_seguros_de_gasto_medico:
              - rfc_emisor: ABC777777A99
                monto_deducible: 20.03
          determinacion_impuesto:
            base_gravable: 126864
            deducciones_personales: 23264
            ingresos_acumulables: 150128
            isr_favorable: 10308
            isr_conforme_tarifa_final: 13789
            isr_retenido: 24097
            num_clabe: '000000000000000001'
            nombre_banco: BANCO SA
            pagos_provisionales: 0
            titular_clabe_permite_verificacion: S√ç
            accion_saldo_a_favor: DEVOLUCI√ìN
          retenciones:
            sueldos_salarios:
              - rfc_retenedor: ABC444444A99
                monto_retenciones: 118263
                retenciones_isr: 19497
            dividendos: []
            servicios_profesionales:
              - rfc_retenedor: ABC444444A00
                monto_retenciones: 46000
                retenciones_isr: 4600
          dividendos:
            monto_acumulable_dividendos_utilidades: null
            monto_total_isr_pagado_sociedad: null
          datos_informativos:
            credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
            credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
            credito_fiscal_autorizado_proyectos_inversion_artes: 0
            credito_fiscal_autorizado_inversion_equipos_fijos: 0
            credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
            saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
            saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
            saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
          pdf: '=PDF-STRING='
          receipt_pdf: '=PDF-STRING='
    TaxReturnPersonalListMonthlyPFAE:
      summary: Tax Return Personal Monthly (PFAE)
      description: Example of a PFAE-type monthly personal tax return
      value:
        - collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          informacion_general:
            rfc: null
            nombre: null
            tipo_declaracion: null
            ejercicio: null
            periodo_declaracion: null
            fecha_hora_presentacion: null
            numero_operacion: null
          isr:
            tipo: PFAE
            determinacion:
              ingresos_periodos_anteriores: 0
              ingresos_periodo: 0
              total_ingresos: 0
              compras_gastos_periodos_anteriores: 1596
              compra_gastos_periodo: 399
              total_compras_gastos: 1995
              base_gravable_pago_provisional: 0
              isr_causado: 0
              pagos_provisionales_efectuados_anterioridad: 0
              isr_retenido_periodos_anteriores: 0
              impuesto_retenido: 0
              isr_cargo: 0
            detalle_del_pago:
              a_cargo: 0
              parte_actualizada: 0
              recargos: 0
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
          iva:
            determinacion:
              actividades_gravadas_tasa_16: 0
              actividades_gravadas_tasa_0: 0
              actividades_exentas: 0
              iva_cobrado_periodo_tasa_16: 0
              iva_acreditable_periodo: 0
              iva_retenido: 0
              saldo_a_favor: null
              impuesto_a_favor: null
            detalle_del_pago:
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
              a_favor: null
          pdf: '===PDF_BINARY===='
          receipt_pdf: '===PDF_BINARY===='
          type: monthly
    TaxReturnPersonalListMonthlyPFAI:
      summary: Tax Return Personal Monthly (PFAI)
      description: Example of a PFAI-type monthly personal tax return
      value:
        - collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          informacion_general:
            rfc: null
            nombre: null
            tipo_declaracion: null
            ejercicio: null
            periodo_declaracion: null
            fecha_hora_presentacion: null
            numero_operacion: null
          isr:
            tipo: PFAE
            determinacion:
              ingresos_periodos_anteriores: 0
              ingresos_periodo: 0
              total_ingresos: 0
              compras_gastos_periodos_anteriores: 1596
              compra_gastos_periodo: 399
              total_compras_gastos: 1995
              base_gravable_pago_provisional: 0
              isr_causado: 0
              pagos_provisionales_efectuados_anterioridad: 0
              isr_retenido_periodos_anteriores: 0
              impuesto_retenido: 0
              isr_cargo: 0
              tipo_de_deducc√≠on: dedducc√≠on opicional
              optas_por_el_c√°lculo_acumulado: 'NO'
              deducc√≠on_opcional: 700
              impuesto_predial: 0
              total_deducciones_autorizadas: 700
              tienes_facilidades_administrativas_o_est√≠mulos_deducibles: 'NO'
            detalle_del_pago:
              a_cargo: 0
              parte_actualizada: 0
              recargos: 0
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
          iva:
            determinacion:
              actividades_gravadas_tasa_16: 0
              actividades_gravadas_tasa_0: 0
              actividades_exentas: 0
              iva_cobrado_periodo_tasa_16: 0
              iva_acreditable_periodo: 0
              iva_retenido: 0
              saldo_a_favor: null
              impuesto_a_favor: null
              impuesto_a_cargo: 54
              cantidad_a_cargo: 54
            detalle_del_pago:
              total_contribuciones: 0
              total_aplicaciones: 0
              cantidad_a_cargo: 0
              cantidad_a_pagar: 0
              a_favor: null
          pdf: '===PDF_BINARY===='
          receipt_pdf: '===PDF_BINARY===='
          type: monthly
    TaxReturnBusinessList:
      summary: Tax Return Business
      description: Example of a list of business tax returns
      value:
        - id: 02589c41-ba22-4d44-8558-8111cc751318X
          link: 19697249-01b8-443e-a451-76bfc5fbeebf
          collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          informacion_general:
            ejercicio: 2018
            fecha_hora_presentacion: '2020-01-07T16:55:00-06:00'
            numero_operacion: '000000000001'
            periodo_declaracion: Del Ejercicio
            rfc: ABC1111111A1
            tipo_declaracion: Normal
            tipo_complementaria: null
            denominacion_razon_social: ACME CORP
          datos_adicionales:
            indica_si_optas_por_dictaminar_tus_estados_financieros: 'NO'
            estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: 'NO'
            estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN SELECCI√ìN
            estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN SELECCI√ìN
            optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCI√ìN
            indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: 'NO'
          estado_resultados:
            ventas_servicios_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: 911165
              total: 911165
            ventas_servicios_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            devoluciones_descuentos_bonificaciones_ventas_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            devoluciones_descuentos_bonificaciones_ventas_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            ingresos_netos:
              partes_relacionadas: null
              partes_no_relacionadas: 911165
              total: 911165
            inventario_inicial: null
            compras_netas_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            compras_netas_importacion:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            inventario_final: null
            costo_mercancias: null
            mano_de_obra:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            maquilas:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            gastos_indirectos_fabricacion:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            costo_ventas_servicios: null
            utilidad_bruta: 911165
            perdida_bruta: null
            gastos_operacion:
              partes_relacionadas: null
              partes_no_relacionadas: 499540
              total: 499540
            utilidad_operacion: 411625
            perdida_operacion: null
            intereses_devengados_a_favor_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_devengados_a_favor_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_favor_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_favor_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            ganancia_cambiaria:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_devengados_a_cargo_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_devengados_a_cargo_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_cargo_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            intereses_moratorios_a_cargo_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            perdida_cambiaria:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            resultado_posicion_monetaria_favorable:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            resultado_posicion_monetaria_desfavorable:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            otras_operaciones_financieras_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            otras_operaciones_financieras_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            otras_operaciones_financieras: null
            resultado_integral_financiamiento: null
            otros_gastos_nacionales: null
            otros_gastos_extranjero: null
            otros_gastos: null
            otros_productos_nacionales: null
            otros_productos_extranjero: null
            otros_productos: null
            ingresos_partidas_discontinuas_extraordinarias: null
            gastos_partidas_discontinuas_extraordinarias: null
            utilidad_antes_impuesto: 411625
            perdida_antes_impuesto: null
            isr: 113002
            ietu: null
            impac: null
            ptu: null
            utilidad_participacion_subsidiaria: null
            perdida_participacion_subsidiaria: null
            efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria: null
            efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria: null
            utilidad_neta: 298623
            perdida_neta: null
          estado_posicion_financiera_balance:
            activo:
              efectivo_caja_depositos_instituciones_credito_nacionales: 726644
              efectivo_caja_depositos_instituciones_credito_extranjero: null
              inversiones_valores_instituciones_nacionales_excepto_acciones: null
              inversiones_valores_instituciones_extranjero_excepto_acciones: null
              cuentas_documentos_por_cobrar_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              cuentas_documentos_por_cobrar_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              contribuciones_a_favor: null
              inventarios: null
              otros_activos_circulantes: 13277
              inversiones_en_acciones_nacionales: null
              inversiones_en_acciones_extranjero: null
              inversiones_en_acciones_total: null
              terrenos: null
              construcciones: null
              construcciones_en_proceso: null
              maquinaria_y_equipo: null
              mobiliario_y_equipo_oficina: null
              equipo_de_computo: null
              equipo_de_transporte: null
              otros_activos_fijos: 12756
              depreciacion_acumulada: -106
              cargos_y_gastos_diferidos: 9319
              amortizacion_acumulada: null
              suma_activo: 761890
            pasivo:
              cuentas_documentos_por_pagar_nacionales:
                partes_relacionadas: null
                partes_no_relacionadas: 268227
                total: 268227
              cuentas_documentos_por_pagar_extranjero:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              contribuciones_por_pagar: 223490
              anticipos_de_clientes:
                partes_relacionadas: null
                partes_no_relacionadas: null
                total: null
              aportaciones_futuros_aumentos_de_capital: null
              otros_pasivos: null
              suma_pasivo: 491717
            capital_contable:
              capital_social_proveniente_aportaciones: 10000
              capital_social_proveniente_capitalizacion: null
              reservas: null
              otras_cuentas_capital: null
              aportaciones_futuros_aumentos_de_capital: null
              utilidades_acumuladas: null
              utilidad_del_ejercicio: 298623
              perdidas_acumuladas: -38450
              perdida_del_ejercicio: null
              exceso_en_actualizacion_capital: null
              insuficiencia_en_actualizacion_capital: null
              actualizacion_del_capital_contable: null
              suma_capital_contable: 270173
              suma_pasivo_mas_capital_contable: 761890
          conciliacion_entre_resultado_contable_fiscal:
            utilidad_o_perdida_neta: 298623
            efectos_reexpresion: null
            resultado_posicion_monetaria: null
            utilidad_o_perdida_neta_historica: 298623
            ingresos_fiscales_no_contables: 95
            ajuste_anual_inflacion_acumulable: 95
            anticipos_de_clientes: null
            intereses_moratorios_efectivamente_cobrados: null
            ganancia_en_enajenacion_acciones_por_reembolso_capital: null
            ganancia_en_enajenacion_de_terrenos_y_activo_fijo: null
            inventario_acumulable_del_ejercicio: null
            otros_ingresos_fiscales_no_contables: null
            deducciones_contables_no_fiscales: 117415
            costo_de_ventas_contable: null
            depreciacion_y_amortizacion_contable: 106
            gastos_que_no_reunen_requisitos_fiscales: 4307
            isr_ietu_impac_ptu: 113002
            perdida_contable_enajenacion_de_acciones: null
            perdida_contable_enajenacion_de_activo_fijo: null
            perdida_en_participacion_subsidiaria: null
            intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
            otras_deducciones_contables_no_fiscales: 0
            deducciones_fiscales_no_contables: 0
            ajuste_anual_inflacion_deducible: null
            costo_vendido_fiscal: null
            deduccion_inversiones: null
            estimulo_fiscal_por_deduccion_inmediata_inversiones: null
            donacion_bienes_basicos_subsistencia_humana: 0
            estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
            deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
            perdida_fiscal_en_enajenacion_acciones: null
            perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo: null
            intereses_moratorios_efectivamente_pagados: null
            otras_deducciones_fiscales_no_contables: null
            ingresos_contables_no_fiscales: null
            intereses_moratorios_devengados_a_favor_cobrados_o_no: null
            anticipos_de_clientes_ejercicios_anteriores: null
            saldos_a_favor_impuestos_y_su_actualizacion: null
            utilidad_contable_enajenacion_de_activo_fijo: null
            utilidad_contable_enajenacion_de_acciones: null
            utilidad_en_participacion_subsidiaria: null
            otros_ingresos_contables_no_fiscales: null
            utilidad_o_perdida_fiscal_antes_de_ptu: 416133
          deducciones_autorizadas:
            sueldos_salarios: null
            honorarios_pagados_a_personas_fisicas: null
            regalias_y_asistencia_tecnica: null
            donativos_otorgados: null
            uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas: null
            fletes_y_acarreos_pagados_a_parsonas_fisicas: null
            contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps: null
            seguros_fianzas: null
            perdida_por_creditos_incobrables: null
            viaticos_y_gastos_viaje: 59527
            combustible_y_lubricantes: null
            credito_al_salario_no_disminuido_de_contribuciones: null
            aportaciones_sar_infonavit_y_jubilaciones_vejez: null
            aportaciones_para_fondos_de_pensiones_y_jubilaciones: null
            cuotas_imss: null
            consumos_en_restaurantes: 11254
            perdida_por_operaciones_financieras_derivadas: null
            deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores: null
            monto_total_pagos_que_sean_ingresos_exentos_para_trabajador: null
            monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador: null
            monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador: null
            uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno: null
            otras_deducciones_autorizadas: 424346
            total_deducciones_autorizadas: 495127
          cifras_cierre_ejercicio:
            perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas: null
            saldo_promedio_anual_de_creditos: 142795
            saldo_promedio_anual_de_deudas: 144765
            coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
            porcentaje_de_participacion_consolidable: null
            isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar: null
            saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores: null
            saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores: null
            saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida: null
            saldo_actualizado_de_cuenta_de_capital_de_aportacion: null
            saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables: null
          determinacion_del_impuesto_sobre_la_renta:
            determinacion_del_impuesto_sobre_la_renta:
              total_ingresos_acumulables: 911260
              total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
              deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila: null
              utilidad_o_perdida_fiscal_antes_de_ptu: 416134
              ptu_pagada_en_el_ejercicio: null
              utilidad_fiscal_del_ejercicio: 416134
              perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
              resultado_fiscal: 376672
              impuesto_causado_en_ejercicio: 113002
              tienes_estimulos_fiscales_a_acreditar: SIN SELECCI√ìN
              impuesto_sobre_la_renta_del_ejercicio: 113002
              pagos_provisionales_efectuados_enterados_a_federacion: null
              impuesto_retenido_al_contribuyente: null
              impuesto_acreditable_pagado_en_extranjero: null
              impuesto_acreditable_por_dividendos_o_utilidades_distribuidos: null
              otras_cantidades_a_cargo: null
              otras_cantidades_a_favor: null
              diferencia_a_cargo: 113002
              isr_a_cargo_del_ejercicio: 113002
              isr_a_favor_del_ejercicio: null
            impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes: null
            datos_informativos_ejercicio:
              monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
              monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
              impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
              ingresos_obtenidos_por_apoyos_gubernamentales: 0
              gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
              credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
              credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
              credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
              saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
              credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
            datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
              total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio: null
              saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar: 0
              saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
              saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
              saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
          dividendos_o_utilidades_distribuidos:
            provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores: null
            provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014: null
            provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre: null
            no_provenientes_de_cufin_ni_cufinre_en_efectivo: null
            no_provenientes_de_cufin_ni_cufinre_en_acciones: null
            monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre: null
            monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre: null
            provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente: null
          detalle_pago_r1_isr_personas_morales:
            a_cargo: 113002
            parte_actualizada: null
            recargos: null
            multa_por_correccion: null
            total_contribuciones: 113002
            desea_aplicar_alguna_compensacion_o_estimulo: 'NO'
            cantidad_a_cargo: 113002
            opta_por_pagar_parcialidades: SIN SELECCI√ìN
            importe_de_primera_parcialidad: null
            importe_sin_primera_parcialidad: null
            cantidad_a_favor: null
            cantidad_a_pagar: 113002
          pdf: '=PDF-STRING='
          receipt_pdf: '=PDF-STRING='
    TaxReturnBusinessListMonthly:
      summary: Tax Return Business Monthly
      description: Example of a monthly business tax return
      value:
        - collected_at: '2022-02-09T08:45:50.406032Z'
          created_at: '2022-02-09T08:46:20.406032Z'
          informacion_general:
            rfc: DPA950805RR2
            denominacion_razon_social: Aloha Mahalo SC
            tipo_declaracion: Normal
            ejercicio: 2020
            periodo_declaracion: Diciembre
            fecha_hora_presentacion: '2021-01-18T19:24:00-06:00'
            numero_operacion: '400475119'
            tipo_complementaria: null
          determinacion_isr:
            personas_morales_regimen_general:
              suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
              estimulos_acreditables: null
              ingresos_nominales_mes_que_declara: 6482479
              reducciones: null
              total_ingresos_nominales: 76330893
              impuestos_del_periodo: 284098
              coeficiente_utilidad: 0.2318
              pagos_provisionales_efectuados_anterioridad: 303039
              utilidad_fiscal_pago_provisional: 17693501
              impuesto_retenido: 29925
              ptu: null
              otras_cantidades_a_cargo_contribuyente: null
              iventario_acumulable: null
              otras_cantidades_a_favor_contribuyente: null
              anticipos_rendimientos_distribuidos_periodo: 16746509
              diferencia_a_cargo: 0
              perdidas_fiscales_ejercicios_anteriores_pendientes: null
              estimulo_fiscal_deduccion_inmediata: null
              impuesto_correspondiente_participacion_consolidable: null
              deduccion_adicional_fomento_primer_empleo: null
              porcentaje_participacion_consolidable: null
              base_gravable_pago_provisional: 946992
              impuesto_a_cargo: 0
              isr_causado: 284098
              ieps_alcohol: null
          detalle_pago_isr:
            r1_isr_personas_morales:
              a_cargo: 0
              acreditamiento_sorteo_buen_fin: null
              parte_actualizada: null
              diesel_marino: null
              recargos: null
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 0
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 0
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: 'NO'
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              uso_infraestructura_carretera_cuota: null
              cantidad_a_pagar: 0
              otros_estimulos: null
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r12_isr_retenciones_por_salarios:
              a_cargo: 415945
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 379
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 415945
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: 379
              cantidad_a_cargo: 415566
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: 'NO'
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 415566
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r13_isr_retenciones_por_asimilados_a_salarios:
              a_cargo: 254588
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 254588
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 254588
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: 'NO'
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 254588
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r14_isr_retenciones_por_servicios_profesionales:
              a_cargo: 104482
              acreditamiento_sorteos: null
              parte_actualizada: 0
              diesel_marino: null
              recargos: 0
              total_aplicaciones: 0
              multa_por_correccion: null
              fecha_pago_realizado_anterioridad: null
              total_de_contribuciones: 104482
              monto_pagado_anterioridad: null
              credito_al_salario: null
              importe_pagado_ultimas_48_hrs: null
              subsidio_empleo: null
              cantidad_a_cargo: 104482
              impuesto_a_depositos_efectivo_acreditable: null
              aplica_primera_parcialidad: 'NO'
              compensaciones: null
              credito_ieps_diesel: null
              diesel_automotriz_transporte: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 104482
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
          determinacion_iva:
            montos_actos_actividades_pagados:
              total_actos_actividades_pagados_tasa_16: 2094706
              total_actos_actividades_pagados_importacion_bienes_tasa_11: null
              total_actos_actividades_sujetos_estimulo_rfn: 0
              total_actos_actividades_pagados_tasa_0: 0
              total_actos_actividades_pagados_importacion_bienes_tasa_16: null
              total_actos_actividades_pagados_no_paga_iva: 0
            detalle_total_actos_actividades_pagados_tasa_16:
              intereses_pagados_tasa_16: null
              otros_actos_pagados_tasa_16: 2094706
              regalias_pagadas_tasa_16: null
              total_actos_pagados_tasa_16: 2094706
            determinacion_iva_acreditable:
              total_iva_actos_actividades_pagados_tasa_16: 335153
              iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto: null
              iva_pagado_sujeto_estimulo_rfn: null
              iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto: null
              total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
              iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
              proporcion_utilizada_conforme_art_5: null
              total_iva_trasladado_contribuyente: 335153
              proporcion_utilizada_conforme_art_5_b: null
              iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
              iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados: null
              iva_acreditable: 335153
              monto_acreditable_actualizado_a_incrementar_derivado_ajuste: null
              iva_pagado_importacion_inversiones_actos_gravados: null
              total_iva_acreditable_periodo: 335153
              total_iva_actos_actividades_gravados: 335153
              total_actos_actividades_pagados_importacion_bienes_tasa_11: null
              iva_trasladado_adquisicion_inversiones_actos_gravados: null
              iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: null
            determinacion_iva:
              valor_actos_actividades_gravados_tasa_16: 6457950
              otras_cantidades_a_favor_contribuyente: null
              valor_actos_actividades_gravados_tasa_11: null
              cantidad_a_cargo: 312421
              valor_actos_actividades_gravados_tasa_0_exportacion: null
              saldo_a_favor: null
              valor_actos_actividades_gravados_tasa_9_otros: null
              devolucion_inmediata_obtenida: null
              suma_actos_actividades_gravados: 6457950
              saldo_a_favor_periodo: 0
              valor_actos_actividades_no_se_deba_pagar_impuesto_exentos: null
              acreditamiento_saldo_favor_periodos_anteriores: null
              impuesto_causado: 1033272
              diferencia_a_cargo: 312421
              cantidad_actualizada_a_reintegrarse_derivada_de_ajuste: null
              ieps_acreditable_alcohol: null
              iva_retenido_al_contribuyente: 385698
              impuesto_a_cargo: 312421
              total_iva_acreditable: 335153
              remanente_saldo_favor_ieps_alcohol: null
              otras_cantidades_a_cargo_contribuyente: null
            detalle_valor_actos_actividades_gravados_tasa_16:
              intereses_cobrados_tasa_16: null
              otros_actos_actividades_gravados_tasa_16: 6457950
              regalias_entre_partes_relacionadas_tasa_16: null
              total_actos_actividades_gravados_tasa_16: 6457950
          detalle_pago_iva:
            r21_iva:
              a_cargo: 312421
              cretificados_tesofe: null
              a_favor: null
              diesel_marino: null
              parte_actualizada: 0
              total_aplicaciones: 0
              recargos: 0
              fecha_pago_realizado_anterioridad: null
              multa_por_correccion: null
              monto_pagado_anterioridad: null
              total_de_contribuciones: 312421
              importe_pagado_ultimas_48_hrs: null
              credito_al_salario: null
              cantidad_a_cargo: 312421
              subsidio_empleo: null
              aplica_primera_parcialidad: 'NO'
              compensaciones: null
              diesel_automotriz_transporte: null
              uso_infraestructura_carretera_cuota: null
              cantidad_a_favor: null
              otros_estimulos: null
              cantidad_a_pagar: 312421
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
            r21_iva_retenciones:
              a_cargo: 111448
              diesel_marino: null
              parte_actualizada: 0
              total_aplicaciones: 0
              recargos: 0
              fecha_pago_realizado_anterioridad: null
              multa_por_correccion: null
              monto_pagado_anterioridad: null
              total_de_contribuciones: 111448
              importe_pagado_ultimas_48_hrs: null
              credito_al_salario: null
              cantidad_a_cargo: 111448
              subsidio_empleo: null
              aplica_primera_parcialidad: 'NO'
              compensaciones: null
              credito_ieps_diesel: null
              otros_estimulos: null
              cantidad_a_favor: null
              cretificados_tesofe: null
              cantidad_a_pagar: 111448
              importe_1ra_parcialidad: null
              importe_sin_1ra_parcialidad: null
          pdf: '===PDF_BINARY===='
          receipt_pdf: '===PDF_BINARY===='
          type: monthly
    TaxReturnPersonalListDetail:
      summary: Tax Return Personal
      description: Example of a list of personal tax returns
      value:
        id: 02589c41-ba22-4d44-8558-8111cc751318X
        link: 19697249-01b8-443e-a451-76bfc5fbeebf
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        informacion_general:
          ejercicio: 2018
          fecha_hora_presentacion: '2020-01-07T17:28:00-05:00'
          numero_operacion: '00000000001'
          periodo_declaracion: Del Ejercicio
          rfc: ABCD111111A11
          tipo_declaracion: Normal
          nombre: JOHN DOE
        sueldos_salarios:
          retenedores:
            - rfc_retenedor: ABCD222222A22
              nombre_denominacion_razon_social: ACME CORP
              ingresos_exentos: 118263
              ingreso_anual: 2265
              subsidio_empleo: 0
          impuesto_retenido: 19497
          ingreso_anual: 118263
          ingresos_acumulables: 115998
          ingresos_exentos: 2265
          subsidio_empleo: 0
        servicios_profesionales:
          deducciones_autorizadas:
            deducciones_autorizadas: 11870
            otras_deducciones: null
            detalle_deducciones:
              - tipo_deduccion: GASTOS
                concepto: GASOLINA Y MANTENIMIENTO DE TRANSPORTE
                monto_detallado: 9682
              - tipo_deduccion: GASTOS
                concepto: COMPRAS Y GASTOS GENERALES
                monto_detallado: 2188
            total_deducciones_autorizadas: 11870
          ingresos:
            ingresos_acumulables: 46000
            ingresos_exentos: null
            otros_ingresos: null
            total_ingresos: 46000
          resultado_fiscal:
            utilidad_fiscal: 34130
            ptu_pagada_ejercicio: 0
            perdidas_fiscales_ejercicios_anteriores_aplicadas: 0
            utilidad_gravable: 34130
          pagos_provisionales:
            pagos_provisionales_efectuados_en_ejercicio: 0
          retenciones_isr:
            isr_retenido_personas_morales: 4600
        deducciones_personales:
          honorarios_medicos_dentales_hospitalarios:
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC444444A44
              monto_deducible: 1000
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC444444A44
              monto_deducible: 502.34
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC333333A33
              monto_deducible: 258.83
            - rfc_emisor: ABC444444A55
              monto_deducible: 14183.1
            - rfc_emisor: ABC444444A66
              monto_deducible: 1658
            - rfc_emisor: ABC444444A77
              monto_deducible: 1600
            - rfc_emisor: ABC444444A88
              monto_deducible: 1064
            - rfc_emisor: ABC444444A99
              monto_deducible: 927.57
          donativos:
            - rfc_emisor: ABC555555A99
              monto_deducible: 10.03
          aportaciones_voluntarias_complementarias_al_sar:
            - rfc_emisor: ABC666666A99
              monto_deducible: 12.03
            - rfc_emisor: ABC777777A99
              monto_deducible: 87.22
          primas_por_seguros_de_gasto_medico:
            - rfc_emisor: ABC777777A99
              monto_deducible: 20.03
        determinacion_impuesto:
          base_gravable: 126864
          deducciones_personales: 23264
          ingresos_acumulables: 150128
          isr_favorable: 10308
          isr_conforme_tarifa_final: 13789
          isr_retenido: 24097
          num_clabe: '000000000000000001'
          nombre_banco: BANCO SA
          pagos_provisionales: 0
          titular_clabe_permite_verificacion: S√ç
          accion_saldo_a_favor: DEVOLUCI√ìN
        retenciones:
          sueldos_salarios:
            - rfc_retenedor: ABC444444A99
              monto_retenciones: 118263
              retenciones_isr: 19497
          dividendos: []
          servicios_profesionales:
            - rfc_retenedor: ABC444444A00
              monto_retenciones: 46000
              retenciones_isr: 4600
        dividendos:
          monto_acumulable_dividendos_utilidades: null
          monto_total_isr_pagado_sociedad: null
        datos_informativos:
          credito_fiscal_autorizado_proyectos_investigacion_desarrollo: 0
          credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento: 0
          credito_fiscal_autorizado_proyectos_inversion_artes: 0
          credito_fiscal_autorizado_inversion_equipos_fijos: 0
          credito_fiscal_autorizado_produccion_distribucion_cinematografica: 0
          saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo: 0
          saldo_credito_fiscal_anteriores_proyectos_inversion_artes: 0
          saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica: 0
        pdf: '=PDF-STRING='
        receipt_pdf: '=PDF-STRING='
    TaxReturnPersonalListMonthlyPFAEDetail:
      summary: Tax Return Personal Monthly (PFAE)
      description: Example of a PFAE-type monthly personal tax return
      value:
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        informacion_general:
          rfc: null
          nombre: null
          tipo_declaracion: null
          ejercicio: null
          periodo_declaracion: null
          fecha_hora_presentacion: null
          numero_operacion: null
        isr:
          tipo: PFAE
          determinacion:
            ingresos_periodos_anteriores: 0
            ingresos_periodo: 0
            total_ingresos: 0
            compras_gastos_periodos_anteriores: 1596
            compra_gastos_periodo: 399
            total_compras_gastos: 1995
            base_gravable_pago_provisional: 0
            isr_causado: 0
            pagos_provisionales_efectuados_anterioridad: 0
            isr_retenido_periodos_anteriores: 0
            impuesto_retenido: 0
            isr_cargo: 0
          detalle_del_pago:
            a_cargo: 0
            parte_actualizada: 0
            recargos: 0
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
        iva:
          determinacion:
            actividades_gravadas_tasa_16: 0
            actividades_gravadas_tasa_0: 0
            actividades_exentas: 0
            iva_cobrado_periodo_tasa_16: 0
            iva_acreditable_periodo: 0
            iva_retenido: 0
            saldo_a_favor: null
            impuesto_a_favor: null
          detalle_del_pago:
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
            a_favor: null
        pdf: '===PDF_BINARY===='
        receipt_pdf: '===PDF_BINARY===='
        type: monthly
    TaxReturnPersonalListMonthlyPFAIDetail:
      summary: Tax Return Personal Monthly (PFAI)
      description: Example of a PFAI-type monthly personal tax return
      value:
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        informacion_general:
          rfc: null
          nombre: null
          tipo_declaracion: null
          ejercicio: null
          periodo_declaracion: null
          fecha_hora_presentacion: null
          numero_operacion: null
        isr:
          tipo: PFAE
          determinacion:
            ingresos_periodos_anteriores: 0
            ingresos_periodo: 0
            total_ingresos: 0
            compras_gastos_periodos_anteriores: 1596
            compra_gastos_periodo: 399
            total_compras_gastos: 1995
            base_gravable_pago_provisional: 0
            isr_causado: 0
            pagos_provisionales_efectuados_anterioridad: 0
            isr_retenido_periodos_anteriores: 0
            impuesto_retenido: 0
            isr_cargo: 0
            tipo_de_deducc√≠on: dedducc√≠on opicional
            optas_por_el_c√°lculo_acumulado: 'NO'
            deducc√≠on_opcional: 700
            impuesto_predial: 0
            total_deducciones_autorizadas: 700
            tienes_facilidades_administrativas_o_est√≠mulos_deducibles: 'NO'
          detalle_del_pago:
            a_cargo: 0
            parte_actualizada: 0
            recargos: 0
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
        iva:
          determinacion:
            actividades_gravadas_tasa_16: 0
            actividades_gravadas_tasa_0: 0
            actividades_exentas: 0
            iva_cobrado_periodo_tasa_16: 0
            iva_acreditable_periodo: 0
            iva_retenido: 0
            saldo_a_favor: null
            impuesto_a_favor: null
            impuesto_a_cargo: 54
            cantidad_a_cargo: 54
          detalle_del_pago:
            total_contribuciones: 0
            total_aplicaciones: 0
            cantidad_a_cargo: 0
            cantidad_a_pagar: 0
            a_favor: null
        pdf: '===PDF_BINARY===='
        receipt_pdf: '===PDF_BINARY===='
        type: monthly
    TaxReturnBusinessListDetail:
      summary: Tax Return Business
      description: Example of a list of business tax returns
      value:
        id: 02589c41-ba22-4d44-8558-8111cc751318X
        link: 19697249-01b8-443e-a451-76bfc5fbeebf
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        informacion_general:
          ejercicio: 2018
          fecha_hora_presentacion: '2020-01-07T16:55:00-06:00'
          numero_operacion: '000000000001'
          periodo_declaracion: Del Ejercicio
          rfc: ABC1111111A1
          tipo_declaracion: Normal
          tipo_complementaria: null
          denominacion_razon_social: ACME CORP
        datos_adicionales:
          indica_si_optas_por_dictaminar_tus_estados_financieros: 'NO'
          estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal: 'NO'
          estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero: SIN SELECCI√ìN
          estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp: SIN SELECCI√ìN
          optas_por_presentar_informacion_sobre_tu_situacion_fiscal: SIN SELECCI√ìN
          indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente: 'NO'
        estado_resultados:
          ventas_servicios_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: 911165
            total: 911165
          ventas_servicios_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          devoluciones_descuentos_bonificaciones_ventas_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          devoluciones_descuentos_bonificaciones_ventas_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          ingresos_netos:
            partes_relacionadas: null
            partes_no_relacionadas: 911165
            total: 911165
          inventario_inicial: null
          compras_netas_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          compras_netas_importacion:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          inventario_final: null
          costo_mercancias: null
          mano_de_obra:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          maquilas:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          gastos_indirectos_fabricacion:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          costo_ventas_servicios: null
          utilidad_bruta: 911165
          perdida_bruta: null
          gastos_operacion:
            partes_relacionadas: null
            partes_no_relacionadas: 499540
            total: 499540
          utilidad_operacion: 411625
          perdida_operacion: null
          intereses_devengados_a_favor_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_favor_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_favor_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_favor_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          ganancia_cambiaria:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_cargo_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_devengados_a_cargo_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_cargo_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          intereses_moratorios_a_cargo_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          perdida_cambiaria:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          resultado_posicion_monetaria_favorable:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          resultado_posicion_monetaria_desfavorable:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras_nacionales:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras_extranjero:
            partes_relacionadas: null
            partes_no_relacionadas: null
            total: null
          otras_operaciones_financieras: null
          resultado_integral_financiamiento: null
          otros_gastos_nacionales: null
          otros_gastos_extranjero: null
          otros_gastos: null
          otros_productos_nacionales: null
          otros_productos_extranjero: null
          otros_productos: null
          ingresos_partidas_discontinuas_extraordinarias: null
          gastos_partidas_discontinuas_extraordinarias: null
          utilidad_antes_impuesto: 411625
          perdida_antes_impuesto: null
          isr: 113002
          ietu: null
          impac: null
          ptu: null
          utilidad_participacion_subsidiaria: null
          perdida_participacion_subsidiaria: null
          efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria: null
          efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria: null
          utilidad_neta: 298623
          perdida_neta: null
        estado_posicion_financiera_balance:
          activo:
            efectivo_caja_depositos_instituciones_credito_nacionales: 726644
            efectivo_caja_depositos_instituciones_credito_extranjero: null
            inversiones_valores_instituciones_nacionales_excepto_acciones: null
            inversiones_valores_instituciones_extranjero_excepto_acciones: null
            cuentas_documentos_por_cobrar_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            cuentas_documentos_por_cobrar_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            contribuciones_a_favor: null
            inventarios: null
            otros_activos_circulantes: 13277
            inversiones_en_acciones_nacionales: null
            inversiones_en_acciones_extranjero: null
            inversiones_en_acciones_total: null
            terrenos: null
            construcciones: null
            construcciones_en_proceso: null
            maquinaria_y_equipo: null
            mobiliario_y_equipo_oficina: null
            equipo_de_computo: null
            equipo_de_transporte: null
            otros_activos_fijos: 12756
            depreciacion_acumulada: -106
            cargos_y_gastos_diferidos: 9319
            amortizacion_acumulada: null
            suma_activo: 761890
          pasivo:
            cuentas_documentos_por_pagar_nacionales:
              partes_relacionadas: null
              partes_no_relacionadas: 268227
              total: 268227
            cuentas_documentos_por_pagar_extranjero:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            contribuciones_por_pagar: 223490
            anticipos_de_clientes:
              partes_relacionadas: null
              partes_no_relacionadas: null
              total: null
            aportaciones_futuros_aumentos_de_capital: null
            otros_pasivos: null
            suma_pasivo: 491717
          capital_contable:
            capital_social_proveniente_aportaciones: 10000
            capital_social_proveniente_capitalizacion: null
            reservas: null
            otras_cuentas_capital: null
            aportaciones_futuros_aumentos_de_capital: null
            utilidades_acumuladas: null
            utilidad_del_ejercicio: 298623
            perdidas_acumuladas: -38450
            perdida_del_ejercicio: null
            exceso_en_actualizacion_capital: null
            insuficiencia_en_actualizacion_capital: null
            actualizacion_del_capital_contable: null
            suma_capital_contable: 270173
            suma_pasivo_mas_capital_contable: 761890
        conciliacion_entre_resultado_contable_fiscal:
          utilidad_o_perdida_neta: 298623
          efectos_reexpresion: null
          resultado_posicion_monetaria: null
          utilidad_o_perdida_neta_historica: 298623
          ingresos_fiscales_no_contables: 95
          ajuste_anual_inflacion_acumulable: 95
          anticipos_de_clientes: null
          intereses_moratorios_efectivamente_cobrados: null
          ganancia_en_enajenacion_acciones_por_reembolso_capital: null
          ganancia_en_enajenacion_de_terrenos_y_activo_fijo: null
          inventario_acumulable_del_ejercicio: null
          otros_ingresos_fiscales_no_contables: null
          deducciones_contables_no_fiscales: 117415
          costo_de_ventas_contable: null
          depreciacion_y_amortizacion_contable: 106
          gastos_que_no_reunen_requisitos_fiscales: 4307
          isr_ietu_impac_ptu: 113002
          perdida_contable_enajenacion_de_acciones: null
          perdida_contable_enajenacion_de_activo_fijo: null
          perdida_en_participacion_subsidiaria: null
          intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no: 0
          otras_deducciones_contables_no_fiscales: 0
          deducciones_fiscales_no_contables: 0
          ajuste_anual_inflacion_deducible: null
          costo_vendido_fiscal: null
          deduccion_inversiones: null
          estimulo_fiscal_por_deduccion_inmediata_inversiones: null
          donacion_bienes_basicos_subsistencia_humana: 0
          estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores: 0
          deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores: 0
          perdida_fiscal_en_enajenacion_acciones: null
          perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo: null
          intereses_moratorios_efectivamente_pagados: null
          otras_deducciones_fiscales_no_contables: null
          ingresos_contables_no_fiscales: null
          intereses_moratorios_devengados_a_favor_cobrados_o_no: null
          anticipos_de_clientes_ejercicios_anteriores: null
          saldos_a_favor_impuestos_y_su_actualizacion: null
          utilidad_contable_enajenacion_de_activo_fijo: null
          utilidad_contable_enajenacion_de_acciones: null
          utilidad_en_participacion_subsidiaria: null
          otros_ingresos_contables_no_fiscales: null
          utilidad_o_perdida_fiscal_antes_de_ptu: 416133
        deducciones_autorizadas:
          sueldos_salarios: null
          honorarios_pagados_a_personas_fisicas: null
          regalias_y_asistencia_tecnica: null
          donativos_otorgados: null
          uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas: null
          fletes_y_acarreos_pagados_a_parsonas_fisicas: null
          contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps: null
          seguros_fianzas: null
          perdida_por_creditos_incobrables: null
          viaticos_y_gastos_viaje: 59527
          combustible_y_lubricantes: null
          credito_al_salario_no_disminuido_de_contribuciones: null
          aportaciones_sar_infonavit_y_jubilaciones_vejez: null
          aportaciones_para_fondos_de_pensiones_y_jubilaciones: null
          cuotas_imss: null
          consumos_en_restaurantes: 11254
          perdida_por_operaciones_financieras_derivadas: null
          deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores: null
          monto_total_pagos_que_sean_ingresos_exentos_para_trabajador: null
          monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador: null
          monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador: null
          uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno: null
          otras_deducciones_autorizadas: 424346
          total_deducciones_autorizadas: 495127
        cifras_cierre_ejercicio:
          perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas: null
          saldo_promedio_anual_de_creditos: 142795
          saldo_promedio_anual_de_deudas: 144765
          coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente: 0.4567
          porcentaje_de_participacion_consolidable: null
          isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores: null
          saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida: null
          saldo_actualizado_de_cuenta_de_capital_de_aportacion: null
          saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables: null
        determinacion_del_impuesto_sobre_la_renta:
          determinacion_del_impuesto_sobre_la_renta:
            total_ingresos_acumulables: 911260
            total_deducciones_autorizadas_y_deduccion_inmediata_inversiones: 495126
            deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila: null
            utilidad_o_perdida_fiscal_antes_de_ptu: 416134
            ptu_pagada_en_el_ejercicio: null
            utilidad_fiscal_del_ejercicio: 416134
            perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio: 39462
            resultado_fiscal: 376672
            impuesto_causado_en_ejercicio: 113002
            tienes_estimulos_fiscales_a_acreditar: SIN SELECCI√ìN
            impuesto_sobre_la_renta_del_ejercicio: 113002
            pagos_provisionales_efectuados_enterados_a_federacion: null
            impuesto_retenido_al_contribuyente: null
            impuesto_acreditable_pagado_en_extranjero: null
            impuesto_acreditable_por_dividendos_o_utilidades_distribuidos: null
            otras_cantidades_a_cargo: null
            otras_cantidades_a_favor: null
            diferencia_a_cargo: 113002
            isr_a_cargo_del_ejercicio: 113002
            isr_a_favor_del_ejercicio: null
          impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes: null
          datos_informativos_ejercicio:
            monto_aplicado_del_estimulo_fiscal_de_chatarrizacion: 0
            monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles: 0
            impac_recuperado_en_ejercicio_derivado_de_deconsolidacion: 0
            ingresos_obtenidos_por_apoyos_gubernamentales: 0
            gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico: 0
            credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
            credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar: 0
            credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar: 0
            saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos: 0
            credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar: 0
          datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio:
            total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio: null
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar: 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar: 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar: 0
            saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar: 0
        dividendos_o_utilidades_distribuidos:
          provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores: null
          provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014: null
          provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre: null
          no_provenientes_de_cufin_ni_cufinre_en_efectivo: null
          no_provenientes_de_cufin_ni_cufinre_en_acciones: null
          monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre: null
          monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre: null
          provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente: null
        detalle_pago_r1_isr_personas_morales:
          a_cargo: 113002
          parte_actualizada: null
          recargos: null
          multa_por_correccion: null
          total_contribuciones: 113002
          desea_aplicar_alguna_compensacion_o_estimulo: 'NO'
          cantidad_a_cargo: 113002
          opta_por_pagar_parcialidades: SIN SELECCI√ìN
          importe_de_primera_parcialidad: null
          importe_sin_primera_parcialidad: null
          cantidad_a_favor: null
          cantidad_a_pagar: 113002
        pdf: '=PDF-STRING='
        receipt_pdf: '=PDF-STRING='
    TaxReturnBusinessListMonthlyDetail:
      summary: Tax Return Business Monthly
      description: Example of a monthly business tax return
      value:
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        informacion_general:
          rfc: DPA950805RR2
          denominacion_razon_social: Aloha Mahalo SC
          tipo_declaracion: Normal
          ejercicio: 2020
          periodo_declaracion: Diciembre
          fecha_hora_presentacion: '2021-01-18T19:24:00-06:00'
          numero_operacion: '400475119'
          tipo_complementaria: null
        determinacion_isr:
          personas_morales_regimen_general:
            suma_ingresos_nominales_meses_anteriores_ejercicio: 69848414
            estimulos_acreditables: null
            ingresos_nominales_mes_que_declara: 6482479
            reducciones: null
            total_ingresos_nominales: 76330893
            impuestos_del_periodo: 284098
            coeficiente_utilidad: 0.2318
            pagos_provisionales_efectuados_anterioridad: 303039
            utilidad_fiscal_pago_provisional: 17693501
            impuesto_retenido: 29925
            ptu: null
            otras_cantidades_a_cargo_contribuyente: null
            iventario_acumulable: null
            otras_cantidades_a_favor_contribuyente: null
            anticipos_rendimientos_distribuidos_periodo: 16746509
            diferencia_a_cargo: 0
            perdidas_fiscales_ejercicios_anteriores_pendientes: null
            estimulo_fiscal_deduccion_inmediata: null
            impuesto_correspondiente_participacion_consolidable: null
            deduccion_adicional_fomento_primer_empleo: null
            porcentaje_participacion_consolidable: null
            base_gravable_pago_provisional: 946992
            impuesto_a_cargo: 0
            isr_causado: 284098
            ieps_alcohol: null
        detalle_pago_isr:
          r1_isr_personas_morales:
            a_cargo: 0
            acreditamiento_sorteo_buen_fin: null
            parte_actualizada: null
            diesel_marino: null
            recargos: null
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 0
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 0
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: 'NO'
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            uso_infraestructura_carretera_cuota: null
            cantidad_a_pagar: 0
            otros_estimulos: null
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r12_isr_retenciones_por_salarios:
            a_cargo: 415945
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 379
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 415945
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: 379
            cantidad_a_cargo: 415566
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: 'NO'
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 415566
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r13_isr_retenciones_por_asimilados_a_salarios:
            a_cargo: 254588
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 254588
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 254588
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: 'NO'
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 254588
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r14_isr_retenciones_por_servicios_profesionales:
            a_cargo: 104482
            acreditamiento_sorteos: null
            parte_actualizada: 0
            diesel_marino: null
            recargos: 0
            total_aplicaciones: 0
            multa_por_correccion: null
            fecha_pago_realizado_anterioridad: null
            total_de_contribuciones: 104482
            monto_pagado_anterioridad: null
            credito_al_salario: null
            importe_pagado_ultimas_48_hrs: null
            subsidio_empleo: null
            cantidad_a_cargo: 104482
            impuesto_a_depositos_efectivo_acreditable: null
            aplica_primera_parcialidad: 'NO'
            compensaciones: null
            credito_ieps_diesel: null
            diesel_automotriz_transporte: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 104482
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
        determinacion_iva:
          montos_actos_actividades_pagados:
            total_actos_actividades_pagados_tasa_16: 2094706
            total_actos_actividades_pagados_importacion_bienes_tasa_11: null
            total_actos_actividades_sujetos_estimulo_rfn: 0
            total_actos_actividades_pagados_tasa_0: 0
            total_actos_actividades_pagados_importacion_bienes_tasa_16: null
            total_actos_actividades_pagados_no_paga_iva: 0
          detalle_total_actos_actividades_pagados_tasa_16:
            intereses_pagados_tasa_16: null
            otros_actos_pagados_tasa_16: 2094706
            regalias_pagadas_tasa_16: null
            total_actos_pagados_tasa_16: 2094706
          determinacion_iva_acreditable:
            total_iva_actos_actividades_pagados_tasa_16: 335153
            iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto: null
            iva_pagado_sujeto_estimulo_rfn: null
            iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto: null
            total_actos_actividades_pagados_importacion_bienes_tasa_16: 0
            iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: 0
            proporcion_utilizada_conforme_art_5: null
            total_iva_trasladado_contribuyente: 335153
            proporcion_utilizada_conforme_art_5_b: null
            iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados: 335153
            iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados: null
            iva_acreditable: 335153
            monto_acreditable_actualizado_a_incrementar_derivado_ajuste: null
            iva_pagado_importacion_inversiones_actos_gravados: null
            total_iva_acreditable_periodo: 335153
            total_iva_actos_actividades_gravados: 335153
            total_actos_actividades_pagados_importacion_bienes_tasa_11: null
            iva_trasladado_adquisicion_inversiones_actos_gravados: null
            iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto: null
          determinacion_iva:
            valor_actos_actividades_gravados_tasa_16: 6457950
            otras_cantidades_a_favor_contribuyente: null
            valor_actos_actividades_gravados_tasa_11: null
            cantidad_a_cargo: 312421
            valor_actos_actividades_gravados_tasa_0_exportacion: null
            saldo_a_favor: null
            valor_actos_actividades_gravados_tasa_9_otros: null
            devolucion_inmediata_obtenida: null
            suma_actos_actividades_gravados: 6457950
            saldo_a_favor_periodo: 0
            valor_actos_actividades_no_se_deba_pagar_impuesto_exentos: null
            acreditamiento_saldo_favor_periodos_anteriores: null
            impuesto_causado: 1033272
            diferencia_a_cargo: 312421
            cantidad_actualizada_a_reintegrarse_derivada_de_ajuste: null
            ieps_acreditable_alcohol: null
            iva_retenido_al_contribuyente: 385698
            impuesto_a_cargo: 312421
            total_iva_acreditable: 335153
            remanente_saldo_favor_ieps_alcohol: null
            otras_cantidades_a_cargo_contribuyente: null
          detalle_valor_actos_actividades_gravados_tasa_16:
            intereses_cobrados_tasa_16: null
            otros_actos_actividades_gravados_tasa_16: 6457950
            regalias_entre_partes_relacionadas_tasa_16: null
            total_actos_actividades_gravados_tasa_16: 6457950
        detalle_pago_iva:
          r21_iva:
            a_cargo: 312421
            cretificados_tesofe: null
            a_favor: null
            diesel_marino: null
            parte_actualizada: 0
            total_aplicaciones: 0
            recargos: 0
            fecha_pago_realizado_anterioridad: null
            multa_por_correccion: null
            monto_pagado_anterioridad: null
            total_de_contribuciones: 312421
            importe_pagado_ultimas_48_hrs: null
            credito_al_salario: null
            cantidad_a_cargo: 312421
            subsidio_empleo: null
            aplica_primera_parcialidad: 'NO'
            compensaciones: null
            diesel_automotriz_transporte: null
            uso_infraestructura_carretera_cuota: null
            cantidad_a_favor: null
            otros_estimulos: null
            cantidad_a_pagar: 312421
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
          r21_iva_retenciones:
            a_cargo: 111448
            diesel_marino: null
            parte_actualizada: 0
            total_aplicaciones: 0
            recargos: 0
            fecha_pago_realizado_anterioridad: null
            multa_por_correccion: null
            monto_pagado_anterioridad: null
            total_de_contribuciones: 111448
            importe_pagado_ultimas_48_hrs: null
            credito_al_salario: null
            cantidad_a_cargo: 111448
            subsidio_empleo: null
            aplica_primera_parcialidad: 'NO'
            compensaciones: null
            credito_ieps_diesel: null
            otros_estimulos: null
            cantidad_a_favor: null
            cretificados_tesofe: null
            cantidad_a_pagar: 111448
            importe_1ra_parcialidad: null
            importe_sin_1ra_parcialidad: null
        pdf: '===PDF_BINARY===='
        receipt_pdf: '===PDF_BINARY===='
        type: monthly
    TaxStatusPersonalListPaginated:
      summary: Personal Tax Status
      description: Example of a list of personal tax status
      value:
        count: 101
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - id: e88d29d1-3dc6-407f-825c-a9b50453e349
            link: 401d5a8e-79e2-472e-a1ca-8f4646f5cb24
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
            official_name: Alfredo Gonzalo Robin
            id_cif: '2274235873432'
            tax_payer_information:
              rfc: GGTF770303G7
              curp: BEMP930403HDFLLT00
              name: Alfredo
              first_last_name: Gonzalo
              second_last_name: Robin
              start_operations_date: '2000-06-01'
              status_padron: ACTIVO
              last_status_change_date: '2000-06-01'
              commercial_name: Alfredo Gonzalo Robin
              social_name: null
              email: alfredo@robin.com
              phone: '667507132'
            address:
              postal_code: '21255'
              street_type: BOULEVARD (BLVD.)
              street: GENERAL GIMENO
              exterior_number: '4360'
              interior_number: PLANTA BAJA
              suburb: BUENAVENTURA
              locality: null
              municipality: ALTOS DE MIRAMAR
              state: CIUDAD DE MEXICO
              between_street:
                - street_one: CALLE PRINCIPE
                  street_two: CALLE NUEVA ROMA
            economic_activity:
              - order: '1'
                economic_activity: Asalariado
                percentage: '100'
                initial_date: '2014-11-05'
                end_date: null
            regimes:
              - regime: R√©gimen de Sueldos y Salarios e Ingresos Asimilados a Salarios
                initial_date: '2003-01-01'
                end_date: null
            obligations:
              - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                initial_date: '2004-03-31'
                end_date: null
              - obligation: Pago definitivo mensual de IVA.
                expiration: >-
                  A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo
                  que corresponda.
                initial_date: '2004-03-31'
                end_date: null
            digital_stamp: >-
              ||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
              FISCAL|2044441088666600000034||
            digital_stamp_chain: >-
              ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=
            pdf: '=PDF-STRING='
    TaxStatusBusinessListPaginated:
      summary: Business Tax Status
      description: Example of a list of business tax status
      value:
        count: 101
        next: https://sandbox.belvo.com/api/{endpoint}/?page=2
        previous: null
        results:
          - id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6f
            link: 0b2edc42-7214-4c68-b22e-ae6885bf7c07
            collected_at: '2022-02-09T08:45:50.406032Z'
            created_at: '2022-02-09T08:46:20.406032Z'
            place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
            official_name: ACNE SA DE CV
            id_cif: '2274235873432'
            tax_payer_information:
              rfc: GHTF980303F7
              curp: null
              name: null
              first_last_name: null
              second_last_name: null
              start_operations_date: '1995-08-01'
              status_padron: ACTIVO
              last_status_change_date: '1995-08-01'
              commercial_name: null
              social_name: ACNE SA DE CV
              email: contact@acne.com
              phone: '555507122'
            address:
              postal_code: '21255'
              street_type: BOULEVARD (BLVD.)
              street: GENERAL GIMENO
              exterior_number: '4360'
              interior_number: PLANTA BAJA
              suburb: BUENAVENTURA
              locality: null
              municipality: ALTOS DE MIRAMAR
              state: CIUDAD DE MEXICO
              between_street:
                - street_one: CALLE PRINCIPE
                  street_two: CALLE NUEVA ROMA
            economic_activity:
              - order: '1'
                economic_activity: Otros servicios profesionales, cient√≠ficos y t√©cnicos
                percentage: '100'
                initial_date: '2014-11-05'
                end_date: null
            regimes:
              - regime: R√©gimen General de Ley Personas Morales
                initial_date: '2003-01-01'
                end_date: null
            obligations:
              - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
                expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
                initial_date: '2004-03-31'
                end_date: null
              - obligation: Pago definitivo mensual de IVA.
                expiration: >-
                  A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo
                  que corresponda.
                initial_date: '2004-03-31'
                end_date: null
            digital_stamp: >-
              ||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
              FISCAL|2044441088666600000034||
            digital_stamp_chain: >-
              EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
            pdf: '=PDF-STRING='
    TaxStatusPersonalList:
      summary: Personal Tax Status
      description: Example of a list of personal tax status
      value:
        id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6fX
        link: 401d5a8e-79e2-472e-a1ca-8f4646f5cb24
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
        official_name: Alfredo Gonzalo Robin
        id_cif: '2274235873432'
        tax_payer_information:
          rfc: GGTF770303G7
          curp: BEMP930403HDFLLT00
          name: Alfredo
          first_last_name: Gonzalo
          second_last_name: Robin
          start_operations_date: '2000-06-01'
          status_padron: ACTIVO
          last_status_change_date: '2000-06-01'
          commercial_name: Alfredo Gonzalo Robin
          social_name: null
          email: alfredo@robin.com
          phone: '667507132'
        address:
          postal_code: '21255'
          street_type: BOULEVARD (BLVD.)
          street: GENERAL GIMENO
          exterior_number: '4360'
          interior_number: PLANTA BAJA
          suburb: BUENAVENTURA
          locality: null
          municipality: ALTOS DE MIRAMAR
          state: CIUDAD DE MEXICO
          between_street:
            - street_one: CALLE PRINCIPE
              street_two: CALLE NUEVA ROMA
        economic_activity:
          - order: '1'
            economic_activity: Asalariado
            percentage: '100'
            initial_date: '2014-11-05'
            end_date: null
        regimes:
          - regime: R√©gimen de Sueldos y Salarios e Ingresos Asimilados a Salarios
            initial_date: '2003-01-01'
            end_date: null
        obligations:
          - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
            expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
            initial_date: '2004-03-31'
            end_date: null
          - obligation: Pago definitivo mensual de IVA.
            expiration: >-
              A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que
              corresponda.
            initial_date: '2004-03-31'
            end_date: null
        digital_stamp: >-
          ||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
          FISCAL|2044441088666600000034||
        digital_stamp_chain: >-
          ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=
        pdf: '=PDF-STRING='
    TaxStatusBusinessList:
      summary: Business Tax Status
      description: Example of a list of business tax status
      value:
        id: 6de34cb3-bf0d-445d-b832-7ec7781e2c6fX
        link: 0b2edc42-7214-4c68-b22e-ae6885bf7c07
        collected_at: '2022-02-09T08:45:50.406032Z'
        created_at: '2022-02-09T08:46:20.406032Z'
        place_and_date_of_issuance: BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021
        official_name: ACNE SA DE CV
        id_cif: '2274235873432'
        tax_payer_information:
          rfc: GHTF980303F7
          curp: null
          name: null
          first_last_name: null
          second_last_name: null
          start_operations_date: '1995-08-01'
          status_padron: ACTIVO
          last_status_change_date: '1995-08-01'
          commercial_name: null
          social_name: ACNE SA DE CV
          email: contact@acne.com
          phone: '555507122'
        address:
          postal_code: '21255'
          street_type: BOULEVARD (BLVD.)
          street: GENERAL GIMENO
          exterior_number: '4360'
          interior_number: PLANTA BAJA
          suburb: BUENAVENTURA
          locality: null
          municipality: ALTOS DE MIRAMAR
          state: CIUDAD DE MEXICO
          between_street:
            - street_one: CALLE PRINCIPE
              street_two: CALLE NUEVA ROMA
        economic_activity:
          - order: '1'
            economic_activity: Otros servicios profesionales, cient√≠ficos y t√©cnicos
            percentage: '100'
            initial_date: '2014-11-05'
            end_date: null
        regimes:
          - regime: R√©gimen General de Ley Personas Morales
            initial_date: '2003-01-01'
            end_date: null
        obligations:
          - obligation: Declaraci√≥n informativa de IVA con la anual de ISR
            expiration: Conjuntamente con la declaraci√≥n anual del ejercicio.
            initial_date: '2004-03-31'
            end_date: null
          - obligation: Pago definitivo mensual de IVA.
            expiration: >-
              A m√°s tardar el d√≠a 17 del mes inmediato posterior al periodo que
              corresponda.
            initial_date: '2004-03-31'
            end_date: null
        digital_stamp: >-
          ||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACI√ìN
          FISCAL|2044441088666600000034||
        digital_stamp_chain: >-
          EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=
        pdf: null
    IncomeVerificationEyod:
      summary: Income Verfification
      description: Example of an enriched income transactions.
      value:
        - id: 076c66e5-90f5-4e01-99c7-50e32f65ae42
          link: b834e69b-1aa4-465d-969c-07c886a4fbed
          created_at: '2022-02-09T08:45:50.406032Z'
          institution: Erebor Brazil
          income_source_type: BANK
          first_transaction_date: '2022-09-25'
          last_transaction_date: '2023-03-25'
          number_of_income_streams: 5
          monthly_average: 2000
          monthly_average_regular: 1800
          monthly_average_irregular: 200
          monthly_average_low_confidence: 200
          monthly_average_medium_confidence: 200
          monthly_average_high_confidence: 200
          total_income_amount: 12000
          total_regular_income_amount: 10800
          total_irregular_income_amount: 1200
          total_low_confidence: 200
          total_medium_confidence: 200
          total_high_confidence: 200
          income_streams:
            - account_id: EBUACA-89077589
              income_type: SALARY
              frequency: MONTHLY
              monthly_average: 7500
              average_income_amount: 7500
              last_income_amount: 7500
              currency: BRL
              last_income_description: Sal√°rio
              last_income_date: '2023-03-25'
              stability: 0.9
              regularity: 0.8
              trend: -0.1
              lookback_periods: 10
              full_periods: 5
              periods_with_income: 5
              number_of_incomes: 6
              confidence: HIGH
            - account_id: EBUACA-890775324
              income_type: TRANSFER
              frequency: SINGLE
              monthly_average: 3000
              average_income_amount: 3000
              last_income_amount: 3000
              currency: BRL
              last_income_description: Transfer√™ncia da Gui
              last_income_date: '2022-09-25'
              stability: null
              regularity: null
              trend: null
              lookback_periods: 10
              full_periods: 5
              periods_with_income: 1
              number_of_incomes: 1
              confidence: LOW
    CategorizationExample:
      summary: Categorization
      description: Example of categorized transactions
      value:
        transactions:
          - description: APPL3STORE
            transaction_id: 3CWE4927CF15355
            account_holder_type: INDIVIDUAL
            account_holder_id: '7890098789087'
            account_id: BBVACA-89077589
            account_category: CREDIT_CARD
            value_date: '2022-11-18'
            type: OUTLFOW
            amount: 650.89
            currency: BRL
            institution: BBVA
            mcc: 2345
            category: Income & Payments
            subcategory: Freelance
            merchant:
              logo: >-
                https://www.apple.com/ac/structured-data/images/open_graph_logo.png?202110180
              website: https://www.apple.com/br/
              merchant_name: Apple, Inc
          - description: OXXO SP
            transaction_id: 3CWE4927CF15996
            account_holder_type: INDIVIDUAL
            account_holder_id: '996685090015'
            account_id: BDBACA-89077896
            account_category: CHECKING_ACCOUNT
            value_date: '2022-12-02'
            type: OUTLFOW
            amount: 999.9
            currency: BRL
            institution: BCO DO BRASIL
            mcc: null
            category: Income & Payments
            subcategory: Freelance
            merchant:
              logo: >-
                https://storage.googleapis.com/new-cdn.mercafacil.com/wl_assets/dynamic/65d84ba0-a2f3-11ed-8928-dd578f525074-MOBILE_1OCo1.png
              website: https://merchants-r-us.com
              merchant_name: Merchants R Us Global
    ResponseCustomerOfpiIndividualPaginated:
      summary: OFPI Individual
      value:
        count: 110
        next: https://api.belvo.com/payments/{endpoint}/?page=2
        previous: null
        results:
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3f
            created_at: '2022-02-09T08:45:50.406032Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            customer_type: INDIVIDUAL
            name: Caetano Veloso
            country: BRA
            email: caetano.veloso@musicabrazil.br
            identifier: 23******00
            identifier_type: CPF
            address: Rua de Caetano Veloso 432, 70200 Brasilia
            phone: 3210-9876
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
            created_at: '2022-02-09T08:45:50.406032Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            customer_type: INDIVIDUAL
            name: Caetano Veloso
            country: BRA
            email: caetano.veloso@musicabrazil.br
            identifier: 23******00
            identifier_type: CPF
            address: Rua de Caetano Veloso 432, 70200 Brasilia
            phone: 3210-9876
    ResponseCustomerOfpiBusinessPaginated:
      summary: OFPI Business
      value:
        count: 110
        next: https://api.belvo.com/payments/{endpoint}/?page=2
        previous: null
        results:
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
            created_at: '2022-02-09T08:45:50.406032Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            customer_type: BUSINESS
            name: Music Production Brazil
            country: BRA
            email: finance@musicabrazil.br
            identifier: 00.000.000/0001-91
            identifier_type: CNPJ
            address: Rua de Caetano Veloso 432, 70200 Brasilia
            phone: 3210-9876
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
            created_at: '2022-02-09T08:45:50.406032Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            customer_type: BUSINESS
            name: Music Production Brazil
            country: BRA
            email: finance@musicabrazil.br
            identifier: 00.000.000/0001-91
            identifier_type: CNPJ
            address: Rua de Caetano Veloso 432, 70200 Brasilia
            phone: 3210-9876
    ResponseCustomerPseIndividualPaginated:
      summary: PSE Individual
      value:
        count: 110
        next: https://api.belvo.com/payments/{endpoint}/?page=2
        previous: null
        results:
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
            created_at: '2022-02-09T08:45:50.406032Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            customer_type: INDIVIDUAL
            name: Carlos Vives
            country: COL
            email: carlos.vives@musicacolombia.co
            identifier: '1018760936'
            identifier_type: CC
            address: Calle Carlos Vives 432, 80300 Bogota
            phone: 3210-9876
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
            created_at: '2022-02-09T08:45:50.406032Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            customer_type: INDIVIDUAL
            name: Carlos Vives
            country: COL
            email: carlos.vives@musicacolombia.co
            identifier: '1018760936'
            identifier_type: CC
            address: Calle Carlos Vives 432, 80300 Bogota
            phone: 3210-9876
    CreateCustomerOfpiIndividual:
      summary: OFPI Individual
      value:
        customer_type: INDIVIDUAL
        name: Caetano Veloso
        country: BRA
        email: caetano.veloso@musicabrazil.br
        identifier: 231.002.999-00
        identifier_type: CPF
    CreateCustomerOfpiBusiness:
      summary: OFPI Business
      value:
        customer_type: BUSINESS
        name: Music Production Brazil
        country: BRA
        email: finance@musicabrazil.br
        identifier: 00.000.000/0001-91
        identifier_type: CNPJ
    CreateCustomerPseIndividual:
      summary: PSE Individual
      value:
        customer_type: INDIVIDUAL
        name: Carlos Vives
        country: COL
        email: carlos.vives@musicacolombia.co
        identifier: '1018760936'
        identifier_type: CC
        address: Calle Carlos Vives 432, 80300 Bogota
        phone: 3210-9876
    ResponseCustomerOfpiIndividual:
      summary: OFPI Individual
      value:
        id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
        created_at: '2022-02-09T08:45:50.406032Z'
        created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
        customer_type: INDIVIDUAL
        name: Caetano Veloso
        country: BRA
        email: caetano.veloso@musicabrazil.br
        identifier: 23******00
        identifier_type: CPF
        address: Rua de Caetano Veloso 432, 70200 Brasilia
        phone: 3210-9876
    ResponseCustomerOfpiBusiness:
      summary: OFPI Business
      value:
        id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
        created_at: '2022-02-09T08:45:50.406032Z'
        created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
        customer_type: BUSINESS
        name: Music Production Brazil
        country: BRA
        email: finance@musicabrazil.br
        identifier: 00.000.000/0001-91
        identifier_type: CNPJ
        address: Rua de Caetano Veloso 432, 70200 Brasilia
        phone: 3210-9876
    ResponseCustomerPseIndividual:
      summary: PSE Individual
      value:
        id: 0110c70a-5faf-4d72-94b6-307473e86af7
        created_at: '2022-02-09T08:45:50.406032Z'
        created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
        customer_type: INDIVIDUAL
        name: Carlos Vives
        country: COL
        email: carlos.vives@musicacolombia.co
        identifier: '1018760936'
        identifier_type: CC
        address: Calle Carlos Vives 432, 80300 Bogota
        phone: 3210-9876
    ResponseBankAccountOrganizationPixInfoPaginated:
      summary: Organization (PIX Info)
      value:
        count: 110
        next: https://api.belvo.com/payments/{endpoint}/?page=2
        previous: null
        results:
          - id: 90d90e38-0087-4b6d-b6dc-94ea561bb9cbX
            created_at: '2023-02-15T07:52:31.998761Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            institution: f512d996-583a-4a91-8b5b-eba2e103b068
            customer: null
            holder:
              type: BUSINESS
              information:
                name: Music Production Brazil
                identifier_type: CNPJ
                identifier: 00.000.000/0001-91
            details:
              country: BRA
              account_type: CHECKINGS
              agency: '0444'
              number: 45722-0
    ResponseBankAccountOrganizationPixKeyPaginated:
      summary: Organization (PIX Key)
      value:
        count: 110
        next: https://api.belvo.com/payments/{endpoint}/?page=2
        previous: null
        results:
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
            created_at: '2023-02-15T07:52:31.998761Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            institution: f512d996-583a-4a91-8b5b-eba2e103b068
            customer: null
            holder:
              type: BUSINESS
              information:
                name: Music Production Brazil
                identifier_type: CNPJ
                identifier: 00.000.000/0001-91
            details:
              country: BRA
              pix_key: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
    ResponseBankAccountOrganizationPsePaginated:
      summary: Organization (PSE)
      value:
        count: 110
        next: https://api.belvo.com/payments/{endpoint}/?page=2
        previous: null
        results:
          - id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
            created_at: '2023-02-15T07:52:31.998761Z'
            created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
            holder:
              type: BUSINESS
              information:
                name: Tr******es
            providers:
              payments_way:
                terminal_id: 123
                form_id: 321
            metadata:
              internal_reference_id: GGq73487w2
            details: {}
            institution: null
            customer: null
            number: null
    CreateBankAccountOrganizationPixInfo:
      summary: Organization (PIX Info)
      value:
        institution: f512d996-583a-4a91-8b5b-eba2e103b068
        holder:
          type: BUSINESS
          information:
            name: Music Production Brazil
            identifier_type: CNPJ
            identifier: 00.000.000/0001-91
        details:
          country: BRA
          account_type: CHECKINGS
          agency: '0444'
          number: 45722-0
    CreateBankAccountOrganizationPixKey:
      summary: Organization (PIX Key)
      value:
        institution: f512d996-583a-4a91-8b5b-eba2e103b068
        holder:
          type: BUSINESS
          information:
            name: Music Production Brazil
            identifier_type: CNPJ
            identifier: 00.000.000/0001-91
        details:
          country: BRA
          pix_key: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
    CreateBankAccountOrganizationPse:
      summary: Organization (PSE)
      value:
        holder:
          type: BUSINESS
          information:
            name: Trusty documentation services
        providers:
          payments_way:
            terminal_id: 123
            form_id: 321
        metadata:
          internal_reference_id: GGq73487w2
    ResponseBankAccountOrganizationPixInfo:
      summary: Organization (PIX Info)
      value:
        id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
        created_at: '2023-02-15T07:52:31.998761Z'
        created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
        institution: f512d996-583a-4a91-8b5b-eba2e103b068
        customer: null
        holder:
          type: BUSINESS
          information:
            name: Music Production Brazil
            identifier_type: CNPJ
            identifier: 00.000.000/0001-91
          details:
            country: BRA
            account_type: CHECKINGS
            agency: '0444'
            number: 45722-0
    ResponseBankAccountOrganizationPixKey:
      summary: Organization (PIX Key)
      value:
        id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
        created_at: '2023-02-15T07:52:31.998761Z'
        created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
        institution: f512d996-583a-4a91-8b5b-eba2e103b068
        customer: null
        holder:
          type: BUSINESS
          information:
            name: Music Production Brazil
            identifier_type: CNPJ
            identifier: 00.000.000/0001-91
        details:
          country: BRA
          pix_key: RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab
    ResponseBankAccountOrganizationPse:
      summary: Organization (PSE)
      value:
        id: 7c2be016-37e3-44e2-8643-db2eb1129a3fX
        created_at: '2023-02-15T07:52:31.998761Z'
        created_by: 417514fe-50f6-42e9-a3eb-c71da00f014c
        holder:
          type: BUSINESS
          information:
            name: Tr******es
        providers:
          payments_way:
            terminal_id: 123
            form_id: 321
        metadata:
          internal_reference_id: GGq73487w2
        details: {}
        institution: null
        customer: null
        number: null
security:
  - basicAuth: []
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
  samples-languages:
    - curl
    - node
    - ruby
    - python
